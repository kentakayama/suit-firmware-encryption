<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.39 (Ruby 3.0.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-firmware-encryption-14" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="Encrypted Payloads in SUIT Manifests">Encrypted Payloads in SUIT Manifests</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security">Vigil Security, LLC</organization>
      <address>
        <email>housley@vigilsec.com</email>
      </address>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="D." surname="Brown" fullname="David Brown">
      <organization>Linaro</organization>
      <address>
        <email>david.brown@linaro.org</email>
      </address>
    </author>
    <author initials="K." surname="Takayama" fullname="Ken Takayama">
      <organization>SECOM CO., LTD.</organization>
      <address>
        <email>ken.takayama.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2023" month="August" day="18"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 93?>

<t>This document specifies techniques for encrypting software, firmware
and personalization data by utilizing the IETF
SUIT manifest. Key agreement is provided by ephemeral-static (ES)
Diffie-Hellman (DH) and AES Key Wrap (AES-KW). ES-DH
uses public key cryptography while AES-KW uses a pre-shared
key-encryption key. Encryption of the plaintext is
accomplished with conventional symmetric key cryptography.</t>



    </abstract>



  </front>

  <middle>


<?line 103?>

<section anchor="introduction"><name>Introduction</name>

<t>Vulnerabilities with Internet of Things (IoT) devices have raised the
need for a reliable and secure firmware update mechanism that is also
suitable for constrained devices. To protect firmware images the SUIT manifest
format was developed <xref target="I-D.ietf-suit-manifest"/>. The SUIT manifest provides a
bundle of metadata about the firmware for an IoT device, where to find 
the firmware image, and the devices to which it applies.</t>

<t>The SUIT information model <xref target="RFC9124"/> details the
information that has to be offered by the SUIT manifest format. In addition to
offering protection against modification, which is provided by a digital
signature or a message authentication code, the firmware image may also
be afforded confidentiality using encryption.</t>

<t>Encryption prevents third parties, including attackers, from gaining access to
the firmware binary. Hackers typically need intimate knowledge of the target
firmware to mount their attacks. For example, return-oriented programming (ROP)
<xref target="ROP"/> requires access to the binary and encryption makes it much more difficult
to write exploits.</t>

<t>The SUIT manifest provides the data needed for authorized recipients
of the firmware image to decrypt it. The firmware image is encrypted using a
symmetric key.</t>

<t>A symmetric key can be established using a variety of mechanisms; this document
defines two approaches for use with the IETF SUIT manifest, namely:</t>

<t><list style="symbols">
  <t>Ephemeral-Static (ES) Diffie-Hellman (DH), and</t>
  <t>AES Key Wrap (AES-KW) with a pre-shared key-encryption key (KEK).</t>
</list></t>

<t>The former relies on asymmetric key cryptography while the latter uses symmetric key
cryptography for content key distribution.</t>

<t>Our goal was to reduce the number of content key distribution options and thereby
increase interoperability between different SUIT manifest parser implementations.</t>

<t>While the original motivating use case of this document was firmware encryption,
SUIT manifests may require payloads other than firmware images to experience
confidentiality protection, such as</t>

<t><list style="symbols">
  <t>software packages,</t>
  <t>personalization data,</t>
  <t>configuration data, and</t>
  <t>machine learning models.</t>
</list></t>

<t>Hence, the term payload is used to generically refer to those objects that may be subject to
encryption.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This document assumes familiarity with the IETF SUIT manifest <xref target="I-D.ietf-suit-manifest"/>,
the SUIT information model <xref target="RFC9124"/> and the SUIT architecture <xref target="RFC9019"/>.</t>

<t>The terms sender and recipient have the following meaning:</t>

<t><list style="symbols">
  <t>Sender: Role of the entity that sends an encrypted payload.</t>
  <t>Recipient: Role of the entity that receives an encrypted payload.</t>
</list></t>

<t>Additionally, we introduce the term "distribution system" (or distributor)
to refer to an entity that knows the recipients of the firmware images.
For use of encryption it therefore either knows the public key of the
recipient (for ES-DH), or the KEK (for AES-KW). The author on the other
hand does not know the recipients, which is responsible for creating the
firmware image. It is important to note that the distribution system is
far more than a file server.</t>

<t>Finally, the following abbreviations are used in this document:</t>

<t><list style="symbols">
  <t>Key Wrap (KW), defined in <xref target="RFC3394"/> (for use with AES)</t>
  <t>Key-Encryption Key (KEK) <xref target="RFC3394"/></t>
  <t>Content-Encryption Key (CEK) <xref target="RFC5652"/></t>
  <t>Ephemeral-Static (ES) Diffie-Hellman (DH) <xref target="RFC9052"/></t>
</list></t>

</section>
<section anchor="arch"><name>Architecture</name>

<t><xref target="RFC9019"/> describes the architecture for distributing payloads and
manifests from an author to devices. It does, however, not detail the
use of payload encryption.</t>

<t>This document enhances this architecture to support encryption. The author
and the distribution system are logical roles. In some deployments these
roles are separated in different physical entities and in others they are
co-located.</t>

<t><xref target="arch-fig"/> shows the distribution system, which represents the firmware
server and the device management infrastructure.</t>

<t>To apply encryption the sender (author) needs to know the recipient (device).
For AES-KW the KEK needs to be known and, in case of ES-DH, the sender needs
to be in possession of the public key of the recipient. The public key and
parameters may be in the recipient's X.509 certificate <xref target="RFC5280"/>.
Furthermore, for ES-DH the recipients must be provisioned with a public key
(or certificate) for digital signature verification of the manifest.</t>

<t>With encryption the author cannot just create a manifest for the firmware
image and sign it since the subsequent encryption step by the distribution
system would invalidate the signature over the manifest. (The content key
distribution information is embedded inside the COSE_Encrypt structure,
which is included in the SUIT manifest.) Hence, the author has to
collaborate with the distribution system. The varying degree of
collaboration is discussed below.</t>

<figure title="Firmware Encryption Architecture." anchor="arch-fig"><artwork><![CDATA[
                                           +----------+
                                           |  Author  |
 +----------+                              +----------+
 |  Device  |---+                               |
 |          |   |                               | Firmware +
 |          |   |                               | Manifest
 +----------+   |                               |
                |                               |
                |                               |
                |                        +--------------+
 +----------+   |  Firmware + Manifest   | Distribution |
 |  Device  |---+------------------------|    System    |
 |          |   |                        +--------------+
 |          |   |
 +----------+   |
                |
                |
 +----------+   |
 |  Device  +---+
 |          |
 |          |
 +----------+
]]></artwork></figure>

<t>The author has several deployment options, namely</t>

<t><list style="symbols">
  <t>The author, as the sender, obtains information about the recipients
and their keys from the distribution system. Then, it performs the necessary
steps to encrypt the payload. As a last step it creates one or more manifests.
The device(s)perform decryption and act as recipients.</t>
  <t>The author treats the distribution system as the initial recipient. Then,
the distribution system decrypts and re-encrypts the payload for consumption
by the device (or the devices). Delegating the task of re-encrypting
the payload to the distribution system offers flexiblity when the number
of devices that need to receive encrypted payloads changes dynamically
or when updates to KEKs or recipient public keys are necessary. As a downside,
the author needs to trust the distribution system with performing the
re-encryption of the payload.</t>
</list></t>

<t>If the author and distributor are separate entities, then the author must delegate
encryption rights to the distributor. By the principle of least privilege, this
should only grant the distributor decryption and re-encryption rights. There are
two models:</t>

<t><list style="numbers">
  <t>The distributor replaces the COSE_Encrypt in the manifest and then signs the
manifest again. However, the COSE_Encrypt structure is contained
within a signed container, which presents a problem: replacing the COSE_Encrypt with a new one
will cause the digest of the manifest to change, thereby changing the signature. This means that
the distributor must be able to sign the new manifest. If this is the case, then the distributor
gains the ability to construct and sign manifests, which allows the distributor the authority
to sign code, effectively presenting the distributor with full control over the recipient.</t>
  <t>The alternative is to use a two-manifest system, where the distributor constructs
a new manifest that overrides the COSE_Encrypt using the dependency system defined in
<xref target="I-D.ietf-suit-trust-domains"/>. This incurrs additional overhead: one additional signature
verification and one additional manifest, as well as the additional machinery in the recipient
needed for dependency processing.</t>
</list></t>

<t>These two models also present different threat profiles for the distributor. If the
distributor only has encryption rights, then an attacker who breaches the distributor can only
mount a limited attack: they can encrypt a modified binary, but the recipients will identify
the attack as soon as they perform the required image digest check and revert back to a correct
image immediately.</t>

<t>However, if the distributor has the authority to sign a single manifest, this threat profile is
substantially degraded: a successful breach of the distributor grants the attacker the ability
to distribute whatever code they like to recipient devices. The recipient will validate the
signature of the code and run it without identifying the attack. Because distributors typically
must perform their re-encryption online in order to handle a large number of devices in a timely
fashion, it is not possible to air-gap the distributor's signing operations. This degrades
the recommendations in <xref target="RFC9124"/>, Section 4.3.17.</t>

<t>It is strongly RECOMMENDED that distributors are implemented using a two-manifest system in order
to distribute encryption keys without requiring re-signing of the manifest, despite the increase
in complexity and greater number of signature verifications that this imposes on the recipient.</t>

</section>
<section anchor="parameters"><name>Encryption Extensions</name>

<t>This specification introduces a new extension to the SUIT_Parameters structure.</t>

<t>The SUIT encryption info parameter (called suit-parameter-encryption-info),
see <xref target="parameter-fig"/>, contains key distribution information. It is carried
inside the suit-directive-override-parameters or the suit-directive-set-parameters
structure. The content of the SUIT_Encryption_Info structure is explained in
<xref target="AES-KW"/> (for AES-KW) and <xref target="ES-DH"/> (for ES-DH). An implementation claiming
conformance with this specification must implement support for this parameter.
A device may, however, support only one of the available key distribution techniques.</t>

<figure title="CDDL of the SUIT_Parameters Extension." anchor="parameter-fig"><artwork><![CDATA[
SUIT_Parameters //= (suit-parameter-encryption-info
    => bstr .cbor SUIT_Encryption_Info)

suit-parameter-encryption-info   = [TBD1: Proposed 19]
]]></artwork></figure>

</section>
<section anchor="extended-directives"><name>Extended Directives</name>

<t>This specification extends these directives:</t>

<t><list style="symbols">
  <t>Directive Write (suit-directive-write) to decrypt the content specified by
suit-parameter-content with suit-parameter-encryption-info.</t>
  <t>Directive Copy (suit-directive-copy) to decrypt the content of the component
specified by suit-parameter-source-component with suit-parameter-encryption-info.</t>
</list></t>

<t>Examples of the two directives are shown below.</t>

<t><xref target="encryption-info-consumed-with-write"/> illustrates the Directive Write.</t>

<figure title="Example showing the Extended suit-directive-write." anchor="encryption-info-consumed-with-write"><artwork><![CDATA[
/ directive-override-parameters / 20, {
  / parameter-content / 18: h'EA1CED',
  / parameter-encryption-info / 19: h'D860E1A1F0'
},
/ directive-write / 18, 15
/ NOTE: decrypt h'EA1CED' using h'D860E1A1F0' /
/ NOTE: plaintext payload is stored into component #0 /
]]></artwork></figure>

<t><xref target="encryption-info-consumed-with-copy"/> illustrates the Directive Copy.</t>

<figure title="Example showing the Extended suit-directive-copy." anchor="encryption-info-consumed-with-copy"><artwork><![CDATA[
/ directive-set-component-index / 12, 1,
/ directive-override-parameters / 20, {
  / parameter-uri / 21: "http://example.com/encrypted.bin",
},
/ directive-fetch / 21, 15,
/ NOTE: encrypted payload is stored into component #1 /
/ directive-set-component-index / 12, 0,
/ directive-override-parameters / 20, {
  / parameter-source-component / 22: 1,
  / parameter-encryption-info / 19: h'D860E1A1F0'
},
/ directive-copy / 22, 15
/ NOTE: decrypt component #1 using h'D860E1A1F0' /
/ NOTE: plaintext payload is stored into component #0 /
]]></artwork></figure>

<t>The payload to be encrypted may be detached and, in that case, it is not covered by a digital
signature or a MAC of the manifest. (To be more precise, the suit-authentication-wrapper found in
the envelope contains a digest of the manifest in the SUIT Digest Container.) The lack of
authentication and integrity protection of the payload is particularly a concern when a cipher
without integrity protection is used. To authenticate the payload in the attached payload case a
SUIT Digest Container with the digest of the encrypted and/or plaintext payload MUST be included
in the manifest.</t>

<t>An attacker may, of example, swaps detached payloads and thereby force the device to process a
wrong payload. This can lead to battery exhaustion attacks where an adversary expends energy and
flash cycles of the device.</t>

<t>Including the digest of the encrypted payload allows the device to detect incorrectly encrypted
before decryption took place. Including the digest of the plaintext payload is adequate when
battery exhaustion attacks are not a concern.</t>

</section>
<section anchor="content-key-distribution-methods"><name>Content Key Distribution Methods</name>

<t>The sub-sections below describe two content key distribution mechanisms,
namely AES Key Wrap (AES-KW) and Ephemeral-Static Diffie-Hellman (ES-DH).
Other mechanisms are supported by COSE and may be supported via enhancements
to this specification.</t>

<t>When an encrypted firmware image is sent to multiple recipients, there
are different deployment options. To explain these options we use the
following notation:</t>

<t><list style="symbols">
  <t>KEK(R1,S) refers to a KEK shared between recipient R1 and the sender S.
The KEK, as a concept, is used by AES Key Wrap.</t>
  <t>CEK(R1,S) refers to a CEK shared between R1 and S.</t>
  <t>CEK(<em>,S) or KEK(</em>,S) are used when a single CEK or a single KEK is shared
with all authorized recipients by a given sender S in a certain context.</t>
  <t>ENC(plaintext, k) refers to the encryption of plaintext with a key k.</t>
  <t>KEK_i or CEK_i refers to the i-th instance of the KEK or CEK, respectively.</t>
</list></t>

<section anchor="AES-KW"><name>Content Key Distribution with AES Key Wrap</name>

<section anchor="introduction-1"><name>Introduction</name>

<t>The AES Key Wrap (AES-KW) algorithm is described in RFC 3394 <xref target="RFC3394"/>, and
can be used to encrypt a randomly generated content-encryption key (CEK)
with a pre-shared key-encryption key (KEK). The COSE conventions for using
AES-KW are specified in Section 8.5.2 of <xref target="RFC9052"/> and in Section 6.2.1 of
<xref target="RFC9053"/>. The encrypted CEK is carried in the COSE_recipient structure
alongside the information needed for AES-KW. The COSE_recipient structure,
which is a substructure of the COSE_Encrypt structure, contains the CEK
encrypted by the KEK.</t>

<t>The COSE_Encrypt structure conveys information for encrypting the payload,
which includes information like the algorithm and the IV, even though the
payload is not embedded in the COSE_Encrypt.ciphertext itself since it
conveyed as detached content.</t>

</section>
<section anchor="deployment-options"><name>Deployment Options</name>

<t>There are three deployment options for use with AES Key Wrap for payload
encryption:</t>

<t><list style="symbols">
  <t>If all authorized recipients have access to the KEK, a single
COSE_recipient structure contains the encrypted CEK. The sender executes
the following steps:</t>
</list></t>

<figure><artwork><![CDATA[
      Fetch KEK(*,S)
      Generate CEK
      ENC(CEK,KEK)
      ENC(payload,CEK)
]]></artwork></figure>

<t><list style="symbols">
  <t>If recipients have different KEKs, then multiple COSE_recipient structures
are included but only a single CEK is used. Each COSE_recipient structure
contains the CEK encrypted with the KEKs appropriate for a given recipient.
The benefit of this approach is that the payload is encrypted only once with
a CEK while there is no sharing of the KEK across recipients. Hence, authorized
recipients still use their individual KEK to decrypt the CEK and to subsequently
obtain the plaintext. The steps taken by the sender are:</t>
</list></t>

<figure><artwork><![CDATA[
      Generate CEK
      for i=1 to n {
         Fetch KEK_i(Ri, S)
         ENC(CEK, KEK_i)
      }
      ENC(payload,CEK)
]]></artwork></figure>

<t><list style="symbols">
  <t>The third option is to use different CEKs encrypted with KEKs of
authorized recipients. Assume there are n recipients with their unique KEKs -
KEK_1(R1, S),..., KEK_n(Rn, S). The sender needs to make the following steps:</t>
</list></t>

<figure><artwork><![CDATA[
      for i=1 to n {
         Fetch KEK_i(Ri, S)
         Generate CEK_i
         ENC(CEK_i, KEK_i)
         ENC(payload,CEK_i)
      }
]]></artwork></figure>

<t>This approach is appropriate when no benefits can be gained from encrypting
and transmitting payloads only once.</t>

</section>
<section anchor="cddl"><name>CDDL</name>

<t>The CDDL for the COSE_Encrypt_Tagged structure is shown in <xref target="cddl-aeskw"/>.
empty_or_serialized_map and header_map are structures defined in <xref target="RFC9052"/>.</t>

<figure title="CDDL for AES-KW-based Content Key Distribution" anchor="cddl-aeskw"><artwork><![CDATA[
outer_header_map_protected = empty_or_serialized_map
outer_header_map_unprotected = header_map

SUIT_Encryption_Info_AESKW = [
  protected   : bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : bstr / nil,
  recipients  : [ + COSE_recipient_AESKW .within COSE_recipient ]
]

COSE_recipient_AESKW = [
  protected   : bstr .size 0 / bstr .cbor empty_map,
  unprotected : recipient_header_unpr_map_aeskw,
  ciphertext  : bstr        ; CEK encrypted with KEK
]
empty_map = {}

recipient_header_unpr_map_aeskw =
{
    1 => int,         ; algorithm identifier
  ? 4 => bstr,        ; identifier of the recipient public key
  * label => values   ; extension point
}
]]></artwork></figure>

<t>Note that the AES-KW algorithm, as defined in Section 2.2.3.1 of <xref target="RFC3394"/>,
does not have public parameters that vary on a per-invocation basis. Hence,
the protected header in the COSE_recipient structure is a byte string
of zero length.</t>

<t>For use with AEAD ciphers the COSE specification requires a consistent byte
stream for the authenticated data structure to be created. This structure
is shown in <xref target="cddl-enc-aeskw"/> and defined in Section 5.3 of <xref target="RFC9052"/>.</t>

<figure title="CDDL for Enc_structure Data Structure" anchor="cddl-enc-aeskw"><artwork><![CDATA[
 Enc_structure = [
   context : "Encrypt",
   protected : empty_or_serialized_map,
   external_aad : bstr
 ]
]]></artwork></figure>

<t>This Enc_structure needs to be populated as follows:</t>

<t>The protected field in the Enc_structure from <xref target="cddl-enc-aeskw"/> refers
to the content of the protected field from the COSE_Encrypt structure.
It is important to note that there are two protected fields shown
in <xref target="cddl-aeskw"/>:</t>

<t><list style="symbols">
  <t>one in the COSE_Encrypt structure, and</t>
  <t>a second one in the COSE_recipient structure.</t>
</list></t>

<t>The value of the external_aad MUST be set to a null value (major type 7,
value 22).</t>

<t>For use with ciphers that do not provide integrity protection, such as
AES-CTR and AES-CBC (see <xref target="I-D.ietf-cose-aes-ctr-and-cbc"/> ),
Enc_structure shown in <xref target="cddl-enc-aeskw"/> MUST NOT be used
because the Enc_structure represents the Additional Authenticated Data
(AAD) byte string consumable only by AEAD ciphers. The protected header
in the SUIT_Encryption_Info_AESKW structure MUST be a zero-length byte string.</t>

</section>
<section anchor="example"><name>Example</name>

<t>This example uses the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm for payload encryption: AES-GCM-128</t>
  <t>Algorithm id for key wrap: A128KW</t>
  <t>IV: h'11D40BB56C3836AD44B39835B3ABC7FC'</t>
  <t>KEK: "aaaaaaaaaaaaaaaa"</t>
  <t>KID: "kid-1"</t>
  <t>Plaintext firmware (txt): "This is a real firmware image."
(in hex): 546869732069732061207265616C206669726D7761726520696D6167652E</t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608443A10101A1054C26682306D4FB28CA01B43B80F68340A2012204456B69642D
315818AF09622B4F40F17930129D18D0CEA46F159C49E7F68B644D
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="aeskw-example"/>.</t>

<figure title="COSE_Encrypt Example for AES Key Wrap" anchor="aeskw-example"><artwork><![CDATA[
96([
  / protected: / << {
    / alg / 1: 1 / AES-GCM-128 /
  } >>,
  / unprotected: / {
    / IV / 5: h'11D40BB56C3836AD44B39835B3ABC7FC'
  },
  / payload: / null / detached ciphertext /,
  / recipients: / [
    [
      / protected: / << {
      } >>,
      / unprotected: / {
        / alg / 1: -3 / A128KW /,
        / kid / 4: 'kid-1'
      },
      / payload: / h'E01F4443C88CA89DF93A9C7E6D79D1C9BC330757C7D2D75A'
        / CEK encrypted with KEK /
    ]
  ]
])
]]></artwork></figure>

<t>The encrypted firmware (with a line feed added) was:</t>

<figure><artwork><![CDATA[
CE9AB65E7591EE38669C4CCA7A58FA324C1A0DBFDBC2C7C057376AFB805D
660048310E8DAB045A2BE0A93F014FC9
]]></artwork></figure>

</section>
</section>
<section anchor="ES-DH"><name>Content Key Distribution with Ephemeral-Static Diffie-Hellman</name>

<section anchor="introduction-2"><name>Introduction</name>

<t>Ephemeral-Static Diffie-Hellman (ES-DH) is a scheme that provides public key
encryption given a recipient's public key. There are multiple variants
of this scheme; this document re-uses the variant specified in Section 8.5.5
of <xref target="RFC9052"/>.</t>

<t>The following two layer structure is used:</t>

<t><list style="symbols">
  <t>Layer 0: Has a content encrypted with the CEK. The content may be detached.</t>
  <t>Layer 1: Uses the AES Key Wrap algorithm to encrypt a randomly generated
CEK with the KEK derived with ES-DH whereby the resulting symmetric
key is fed into the HKDF-based key derivation function.</t>
</list></t>

<t>As a result, the two layers combine ES-DH with AES-KW and HKDF. An example is
given in <xref target="esdh-example"/>.</t>

</section>
<section anchor="deployment-options-1"><name>Deployment Options</name>

<t>There are two deployment options with this approach. We assume that recipients
are always configured with a device-unique public / private key pair.</t>

<t><list style="symbols">
  <t>A sender wants to transmit a payload to multiple recipients. All recipients
shall receive the same encrypted payload, i.e. the same CEK is used.
One COSE_recipient structure per recipient is used and it contains the
CEK encrypted with the KEK. To generate the KEK each COSE_recipient structure
contains a COSE_recipient_inner structure to carry the sender's emphemeral key
and an identifier for the recipients public key.</t>
</list></t>

<t>The steps taken by the sender are:</t>

<figure><artwork><![CDATA[
      Generate CEK
      for i=1 to n {
         Generate KEK_i(Ri, S) using ES-DH
         ENC(CEK, KEK_i)
      }
      ENC(payload,CEK)
]]></artwork></figure>

<t><list style="symbols">
  <t>The alternative is to encrypt a payload with a different CEK for each
recipient. Assume there are KEK_1(R1, S),..., KEK_n(Rn, S) have been generated
for the different recipients using ES-DH. The following steps needs to be made
by the sender:</t>
</list></t>

<figure><artwork><![CDATA[
      for i=1 to n {
         Generate KEK_i(Ri, S) using ES-DH
         Generate CEK_i
         ENC(CEK_i, KEK_i)
         ENC(payload,CEK_i)
      }
]]></artwork></figure>

<t>This results in n-manifests. This approach is useful when payloads contain
information unique to a device. The encryption operation effectively becomes
ENC(payload_i,CEK_i).</t>

</section>
<section anchor="cddl-1"><name>CDDL</name>

<t>The CDDL for the COSE_Encrypt_Tagged structure is shown in <xref target="cddl-esdh"/>.
Only the minimum number of parameters are shown. empty_or_serialized_map
and header_map are structures defined in <xref target="RFC9052"/>.</t>

<figure title="CDDL for ES-DH-based Content Key Distribution" anchor="cddl-esdh"><artwork><![CDATA[
outer_header_map_protected = empty_or_serialized_map
outer_header_map_unprotected = header_map

SUIT_Encryption_Info_ESDH = [
  protected   : bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : bstr / nil,
  recipients  : [ + COSE_recipient_ESDH .within COSE_recipient ]
]

COSE_recipient_ESDH = [
  protected   : bstr .cbor recipient_header_map_esdh,
  unprotected : recipient_header_unpr_map_esdh,
  ciphertext  : bstr        ; CEK encrypted with KEK
]

recipient_header_map_esdh =
{
    1 => int,         ; algorithm identifier
  * label => values   ; extension point
}

recipient_header_unpr_map_esdh =
{
   -1 => COSE_Key,    ; ephemeral public key for the sender
  ? 4 => bstr,        ; identifier of the recipient public key
  * label => values   ; extension point
}
]]></artwork></figure>

</section>
<section anchor="context-information-structure"><name>Context Information Structure</name>

<t>The context information structure is used to ensure that the derived keying material
is "bound" to the context of the transaction. This specification re-uses the structure
defined in Section 5.2 of RFC 9053 and tailors it accordingly.</t>

<t>The following information elements are bound to the context:</t>

<t><list style="symbols">
  <t>the protocol employing the key-derivation method,</t>
  <t>information about the utilized AES Key Wrap algorithm,and the key length.</t>
  <t>the protected header field, which contains the content key encryption algorithm.</t>
</list></t>

<t>The sender and recipient identities are left empty.</t>

<t>The following fields in <xref target="cddl-context-info"/> require an explantation:</t>

<t><list style="symbols">
  <t>The COSE_KDF_Context.AlgorithmID field contains the algorithm identifier for
A128KW (value -4), A192KW (value -4), or A256KW (value -5).</t>
  <t>The COSE_KDF_Context.SuppPubInfo.keyDataLength field contains the key length
of the algorithm in the COSE_KDF_Context.AlgorithmID field expressed as the number
of bits. For A128KW the value is 128, for A192KW the value is 192, and for A256KW
the value 256.</t>
  <t>The COSE_KDF_Context.SuppPubInfo.other field captures the protocol in
which the ES-DH content key distribution algorithm is used and MUST be set to
the constant string "SUIT Payload Encryption".</t>
  <t>The COSE_KDF_Context.SuppPubInfo.protected field serializes the content
of the recipient_header_pr_map field, which (among other fields) contains the
content key distribution algorithm identifier.</t>
</list></t>

<figure title="CDDL for COSE_KDF_Context Structure" anchor="cddl-context-info"><artwork><![CDATA[
PartyInfoSender = (
    identity : bstr .size 0,
    nonce : nil,
    other : bstr .size 0
)

PartyInfoRecipient = (
    identity : bstr .size 0,
    nonce : nil,
    other : bstr .size 0
)

COSE_KDF_Context = [
    AlgorithmID : int,
    PartyUInfo : [ PartyInfoSender ],
    PartyVInfo : [ PartyInfoRecipient ],
    SuppPubInfo : [
        keyDataLength : uint,
        protected : bstr .cbor recipient_header_pr_map,
        other: bstr "SUIT Payload Encryption"
    ],
    SuppPrivInfo : bstr .size 0
]
]]></artwork></figure>

<t>The HKDF-based key derivaction function may optionally contain a salt value,
as described in Section 5.1 of <xref target="RFC9053"/>. This optional value is used to
change the key generation process. This specification does not mandate the
use of a salt value. If the salt is public and carried in the message, then
the "salt" algorithm header parameter is used. See discussion in <xref target="RFC5869"/>
and NIST SP800-56 <xref target="SP800-56"/> for reasons for sending or not sending a salt.
The purpose of the salt is to provide extra randomness in the KDF context.
If the salt sent in the "salt" algorithm header parameter, then the receiver
MUST be able to process a salt and MUST pass it into the key derivation
function.</t>

<t>Profiles of this specification MAY specify an extended version of the
context information structure or MAY utilize a different context information
structure.</t>

<t>For use with ciphers that do not provide integrity protection, such as
AES-CTR and AES-CBC (see <xref target="I-D.ietf-cose-aes-ctr-and-cbc"/>), Enc_structure
MUST NOT be used and the protected header in the SUIT_Encryption_Info_ESDH
structure MUST be a zero-length byte string.</t>

</section>
<section anchor="example-1"><name>Example</name>

<t>This example uses the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm for payload encryption: AES-GCM-128</t>
  <t>IV: h'3517CE3E78AC2BF3D1CDFDAF955E8600'</t>
  <t>Algorithm for content key distribution: ECDH-ES + A128KW</t>
  <t>KID: "kid-2"</t>
  <t>Plaintext: "This is a real firmware image."</t>
  <t>Firmware (hex):
546869732069732061207265616C206669726D7761726520696D6167652E</t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608443A10101A105503517CE3E78AC2BF3D1CDFDAF955E8600F6818344
A101381CA220A401022001215820AAE9A733DEF11E9160A66BD81CC8215F
045ACAC3F8490C7749D58A627323624A22582008A7B88B7F00762BA0919C
A065ABF45C2A303B483E86D674E50B015122F8E51504456B69642D325818
0A44E77C3DBBB0780F2DB42C64FD325D18FBE13A25A9369D
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="esdh-example"/>. Note that the COSE_Encrypt structure also needs to
protected by a COSE_Sign1, which is not shown below.</t>

<figure title="COSE_Encrypt Example for ES-DH" anchor="esdh-example"><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'4C56CA660A5D1414BC04C835025D52CC
                          A9AE6101202E127329AD2465B38A1C89'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: /
        h'ACC8962628B78BF30DD74BDEEA9305D7
          3BFA302D82B280A7E2FCE8331C363F27
          9ECCABE920DA97F9074DF5B3B2AAD170
          9D844B8DE1D33F80FA99AC806B9778D0'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 1,
    / common / 3: << {
      / components / 2: [
        ['decrypted-firmware']
      ]
    } >>,
    / install / 17: << [
      / directive-set-component-index / 12, 0
        / ['plaintext-firmware'] /,
      / directive-override-parameters / 20, {
        / parameter-content / 18:
          h'B94272BD7C7E9A144D12CF46D9CEE6318753574A6F7808
            29B87911BE1CF2B24477BA4E7D1337541F308010088920',
        / parameter-encryption-info / 19: << 96([
          / protected: / << {
            / alg / 1: 1 / AES-GCM-128 /
          } >>,
          / unprotected: / {
            / IV / 5: h'3517CE3E78AC2BF3D1CDFDAF955E8600'
          },
          / payload: / null / detached ciphertext /,
          / recipients: / [
            [
              / protected: / << {
                / alg / 1: -29 / ECDH-ES + A128KW /
              } >>,
              / unprotected: / {
                / ephemeral key / -1: {
                  / kty / 1: 2 / EC2 /,
                  / crv / -1: 1 / P-256 /,
                  / x / -2: h'AAE9A733DEF11E9160A66BD81CC8215F
                              045ACAC3F8490C7749D58A627323624A',
                  / y / -3: h'08A7B88B7F00762BA0919CA065ABF45C
                              2A303B483E86D674E50B015122F8E515'
                },
                / kid / 4: 'kid-2'
              },
              / payload: /
                h'0A44E77C3DBBB0780F2DB42C64FD325D18FBE13A25A9369D'
                / CEK encrypted with KEK /
            ]
          ]
        ]) >>
      },
      / directive-write / 18, 15
        / consumes the SUIT_Encryption_Info above /
    ] >>
  } >>
})
]]></artwork></figure>

<t>The encrypted firmware (with a line feed added) was:
~~~
B94272BD7C7E9A144D12CF46D9CEE6318753574A6F780829B87911BE1CF2
B24477BA4E7D1337541F308010088920
~~~</t>

</section>
</section>
</section>
<section anchor="firmware-updates-on-iot-devices-with-flash-memory"><name>Firmware Updates on IoT Devices with Flash Memory</name>

<t>Flash memory on microcontrollers is a type of non-volatile memory that erases
data in units called blocks, pages or sectors and re-writes data at byte level
(often 4-bytes).
Flash memory is furthermore segmented into different memory regions, which store
the bootloader, different versions of firmware images (in so-called slots),
and configuration data. <xref target="image-layout"/> shows an example layout of a
microcontroller flash area. The primary slot contains the firmware image to be
executed by the bootloader, which is a common deployment on devices that do
not offer the concept of position independent code.</t>

<t>When the encrypted firmware image has been transferred to the device, it will
typically be stored in a staging area, in the secondary slot in our example.</t>

<t>At the next boot, the bootloader will recognize a new firmware image in the
secondary slot and will start decrypting the downloaded image sector-by-sector
and will swap it with the image found in the primary slot.</t>

<t>The swap should only take place after the signature on the plaintext is verified.
Note that the plaintext firmware image is available in the primary slot only after
the swap has been completed, unless "dummy decrypt" is used to compute the hash
over the plaintext prior to executing the decrypt operation during a swap.
Dummy decryption here refers to the decryption of the firmware image found in
the secondary slot sector-by-sector and computing a rolling hash over the resulting
plaintext firmware image (also sector-by-sector) without performing the swap operation.
While there are performance optimizations possible, such as conveying hashes for
each sector in the manifest rather than a hash of the entire firmware image,
such optimizations are not described in this specification.</t>

<t>This approach of swapping the newly downloaded image with the previously valid
image is often referred as A/B approach. A/B refers to the two slots involved.
Two slots are used to allow the update to be reversed in case the newly obtained
firmware image fails to boot. This approach adds robustness to the firmware
update procedure.</t>

<t>Since the image in primary slot is available in cleartext it may need to
re-encrypted it before copying it to the secondary slot. This may be necessary
when the secondary slot has different access permissions or when the staging
area is located in an off-chip flash memory and therefore more vulnerable to
physical attacks. Note that this description assumes that the processor does
not execute encrypted memory (i.e. using on-the-fly decryption in hardware).</t>

<figure title="Example Flash Area Layout" anchor="image-layout"><artwork><![CDATA[
+--------------------------------------------------+
| Bootloader                                       |
+--------------------------------------------------+
| Primary Slot                                     |
|                                        (sector 1)|
|..................................................|
|                                                  |
|                                        (sector 2)|
|..................................................|
|                                                  |
|                                        (sector 3)|
|..................................................|
|                                                  |
|                                        (sector 4)|
+--------------------------------------------------+
| Secondary Slot                                   |
|                                        (sector 1)|
|..................................................|
|                                                  |
|                                        (sector 2)|
|..................................................|
|                                                  |
|                                        (sector 3)|
|..................................................|
|                                                  |
|                                        (sector 4)|
+--------------------------------------------------+
| Swap Area                                        |
|                                                  |
+--------------------------------------------------+
| Configuration Data                               |
+--------------------------------------------------+
]]></artwork></figure>

<t>The ability to restart an interrupted firmware update is often a requirement
for low-end IoT devices. To fulfill this requirement it is necessary to chunk
a firmware image into sectors and to encrypt each sector individually
using a cipher that does not increase the size of the resulting ciphertext
(i.e., by not adding an authentication tag after each encrypted block).</t>

<t>When an update gets aborted while the bootloader is decrypting the newly obtained
image and swapping the sectors, the bootloader can restart where it left off. This
technique offers robustness and better performance.</t>

<t>For this purpose ciphers without integrity protection are used to encrypt the
firmware image. Integrity protection for the firmware image must, however, be
provided and the suit-parameter-image-digest, defined in Section 8.4.8.6 of
<xref target="I-D.ietf-suit-manifest"/>, MUST be used.</t>

<t><xref target="I-D.ietf-cose-aes-ctr-and-cbc"/> registers AES Counter mode (AES-CTR) and
AES Cipher Block Chaining (AES-CBC) ciphers that do not offer integrity protection.
These ciphers are useful for the use cases that require firmware encryption on IoT
devices. For many other use cases where software packages, configuration information
or personalization data needs to be encrypted, the use of Authenticated Encryption
with Additional Data (AEAD) ciphers is preferred.</t>

<t>The following sub-sections provide further information about the initialization vector
(IV) selection for use with AES-CBC and AES-CTR in the firmware encryption context. An
IV MUST NOTE be re-used when the same key is used. For this application, the IVs are
not random but rather based on the slot/sector-combination in flash memory. The
text below assumes that the block-size of AES is (much) smaller than sector size. The
typical sector-size of flash memory is in the order of KiB. Hence, multiple AES blocks
need to be decrypted until an entire sector is completed.</t>

<section anchor="aes-cbc"><name>AES-CBC</name>

<t>In AES-CBC a single IV is used for encryption of firmware belonging to a single sector
since individual AES blocks are chained toghether, as shown in <xref target="aes-cbc-fig"/>. The
numbering  of sectors in a slot MUST start with zero (0) and MUST increase by one with
every sector till the end of the slot is reached. The IV follows this numbering.</t>

<t>For example, let us assume the slot size of a specific flash controller on an IoT device
is 64 KiB, the sector size 4096 bytes (4 KiB) and AES-128-CBC uses an AES-block size of
128 bit (16 bytes). Hence, sector 0 needs 4096/16=256 AES-128-CBC operations using IV 0.
If the firmware image fills the entire slot then that slot contains 16 sectors, i.e. IVs
ranging from 0 to 15.</t>

<figure title="AES-CBC Operation" anchor="aes-cbc-fig"><artwork><![CDATA[
       P1              P2
        |              |
   IV--(+)    +-------(+)
        |     |        |
        |     |        |
    +-------+ |    +-------+
    |       | |    |       |
    |       | |    |       |
 k--|  E    | | k--|  E    |
    |       | |    |       |
    +-------+ |    +-------+
        |     |        |
        +-----+        |
        |              |
        |              |
        C1             C2

Legend: 
  Pi = Plaintext blocks
  Ci = Ciphertext blocks
  E = Encryption function
  k = Symmetric key
  (+) = XOR operation
]]></artwork></figure>

</section>
<section anchor="aes-ctr"><name>AES-CTR</name>

<t>Unlike AES-CBC, AES-CTR uses an IV per AES operation, as shown in <xref target="aes-ctr-fig"/>.
Hence, when an image is encrypted using AES-CTR-128 or AES-CTR-256, the IV MUST
start with zero (0) and MUST be incremented by one for each 16-byte plaintext block
within the entire slot.</t>

<t>Using the previous example with a slot size of 64 KiB, the sector size 4096 bytes and
the AES plaintext block size of 16 byte requires IVs from 0 to 255 in the first sector
and 16 * 256 IVs for the remaining sectors in the slot.</t>

<figure title="AES-CTR Operation" anchor="aes-ctr-fig"><artwork><![CDATA[
         IV1            IV2
          |              |
          |              |
          |              |
      +-------+      +-------+
      |       |      |       |
      |       |      |       |
   k--|  E    |   k--|  E    |
      |       |      |       |
      +-------+      +-------+
          |              |
     P1--(+)        P2--(+)
          |              |
          |              |
          C1             C2

Legend: 
  See previous diagram.
]]></artwork></figure>

</section>
</section>
<section anchor="complete-examples"><name>Complete Examples</name>

<t>The following manifests examplify how to deliver encrypted firmware and its
encryption info to devices.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA-256 as the digest function.</t>

<section anchor="example-AES-KW-write"><name>AES Key Wrap Example with Write Directive</name>

<t>The following SUIT manifest requests a parser to write and to decrypt the
encrypted payload into a component with the suit-directive-write
directive.</t>

<t>The SUIT manifest in diagnostic notation (with line breaks added
for readability) is shown here:</t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'5DEFDDB7F175FA20778FFE24BE7B9C36
                          9BD8ED06AA4654F28794CD134CDBA932'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: / h'4C4A5FB50738699649BA439237D20ADC
                       ADD6EC634A800A8E093733FC1C64984B
                       F2BFEC583C124B5546BF0CDAC543AB09
                       95589543B434951A29A40000EC56CBE7'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 1,
    / common / 3: << {
      / components / 2: [
        ['plaintext-firmware'],
      ]
    } >>,
    / install / 17: << [
      / fetch encrypted firmware /
      / directive-override-parameters / 20, {
        / parameter-content / 18:
          h'CE9AB65E7591EE38669C4CCA7A58FA324C1A0DBFDBC2C7
            C057376AFB805D660048310E8DAB045A2BE0A93F014FC9',
        / parameter-encryption-info / 19: << 96([
          / protected: / << {
            / alg / 1: 1 / AES-GCM-128 /
          } >>,
          / unprotected: / {
            / IV / 5: h'11D40BB56C3836AD44B39835B3ABC7FC'
          },
          / payload: / null / detached ciphertext /,
          / recipients: / [
            [
              / protected: / << {
              } >>,
              / unprotected: / {
                / alg / 1: -3 / A128KW /,
                / kid / 4: 'kid-1'
              },
              / payload: /
                h'E01F4443C88CA89DF93A9C7E6D79D1C9BC330757C7D2D75A'
                / CEK encrypted with KEK /
            ]
          ]
        ]) >>
      },

      / decrypt encrypted firmware /
      / directive-write / 18, 15
        / consumes the SUIT_Encryption_Info above /
    ] >>
  } >>
})
]]></artwork></figure>

<t>In hex format, the SUIT manifest is this:</t>

<figure><artwork><![CDATA[
D86BA2025873825824822F58205DEFDDB7F175FA20778FFE24BE7B9C369B
D8ED06AA4654F28794CD134CDBA932584AD28443A10126A0F658404C4A5F
B50738699649BA439237D20ADCADD6EC634A800A8E093733FC1C64984BF2
BFEC583C124B5546BF0CDAC543AB0995589543B434951A29A40000EC56CB
E703589DA4010102010357A102818152706C61696E746578742D6669726D
7761726511587C8414A212582ECE9AB65E7591EE38669C4CCA7A58FA324C
1A0DBFDBC2C7C057376AFB805D660048310E8DAB045A2BE0A93F014FC913
5843D8608443A10101A1055011D40BB56C3836AD44B39835B3ABC7FCF681
8341A0A2012204456B69642D315818E01F4443C88CA89DF93A9C7E6D79D1
C9BC330757C7D2D75A120F
]]></artwork></figure>

</section>
<section anchor="example-AES-KW-copy"><name>AES Key Wrap Example with Fetch + Copy Directives</name>

<t>The following SUIT manifest requests a parser to fetch the encrypted
payload and to stores it. Then, the payload is decrypt and stored into
another component with the suit-directive-copy directive. This approach
works well on constrained devices with execute-in-place flash memory.</t>

<t>The SUIT manifest in diagnostic notation (with line breaks added for
readability) is shown here:</t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'C6A66263CCF4C6FF5992AE4074B30DDD
                          34520AA099F6BAD96B2F60FE79F07EC4'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: / h'DA08C3A6455FF30865A97A7F4FBC3BA1
                       5F954E39B57167DEA9FE16EBA12CFE33
                       D58790DB64CB70A08F89513B15CFF995
                       1222868195224E1AB87D46FA37F58864'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 1,
    / common / 3: << {
      / components / 2: [
        ['plaintext-firmware'],
        ['encrypted-firmware']
      ]
    } >>,
    / install / 17: << [
      / fetch encrypted firmware /
      / directive-set-component-index / 12, 1
        / ['encrypted-firmware'] /,
      / directive-override-parameters / 20, {
        / parameter-image-size / 14: 46,
        / parameter-uri / 21: "https://example.com/encrypted-firmware"
      },
      / directive-fetch / 21, 15,

      / decrypt encrypted firmware /
      / directive-set-component-index / 12, 0
        / ['plaintext-firmware'] /,
      / directive-override-parameters / 20, {
        / parameter-encryption-info / 19: << 96([
          / protected: / << {
            / alg / 1: 1 / AES-GCM-128 /
          } >>,
          / unprotected: / {
            / IV / 5: h'11D40BB56C3836AD44B39835B3ABC7FC'
          },
          / payload: / null / detached ciphertext /,
          / recipients: / [
            [
              / protected: / << {
              } >>,
              / unprotected: / {
                / alg / 1: -3 / A128KW /,
                / kid / 4: 'kid-1'
              },
              / payload: /
                h'E01F4443C88CA89DF93A9C7E6D79D1C9BC330757C7D2D75A'
                / CEK encrypted with KEK /
            ]
          ]
        ]) >>,
        / parameter-source-component / 22: 1 / ['encrypted-firmware'] /
      },
      / directive-copy / 22, 15
        / consumes the SUIT_Encryption_Info above /
    ] >>
  } >>
})
]]></artwork></figure>

<t>In hex format, the SUIT manifest is this:</t>

<figure><artwork><![CDATA[
D86BA2025873825824822F5820C6A66263CCF4C6FF5992AE4074B30DDD34
520AA099F6BAD96B2F60FE79F07EC4584AD28443A10126A0F65840DA08C3
A6455FF30865A97A7F4FBC3BA15F954E39B57167DEA9FE16EBA12CFE33D5
8790DB64CB70A08F89513B15CFF9951222868195224E1AB87D46FA37F588
640358E5A40101020103582BA102828152706C61696E746578742D666972
6D776172658152656E637279707465642D6669726D776172651158AF900C
0114A20E182E15782668747470733A2F2F6578616D706C652E636F6D2F65
6E637279707465642D6669726D77617265150F0C0014A2135843D8608443
A10101A1055011D40BB56C3836AD44B39835B3ABC7FCF6818341A0A20122
04456B69642D315818E01F4443C88CA89DF93A9C7E6D79D1C9BC330757C7
D2D75A1601160F14A2035824822F582036921488FE6680712F734E11F58D
87EEB66D4B21A8A1AD3441060814DA16D50F0E181E030F
]]></artwork></figure>

</section>
</section>
<section anchor="sec-cons"><name>Security Considerations</name>

<t>The algorithms described in this document assume that the party performing payload encryption</t>

<t><list style="symbols">
  <t>shares a key-encryption key (KEK) with the recipient (for use with the AES Key Wrap scheme), or</t>
  <t>is in possession of the public key of the recipient (for use with ES-DH).</t>
</list></t>

<t>Both cases require some upfront communication interaction to distribute these keys to the involved
communication parties. This interaction may be provided by an device management solution,
as described in <xref target="RFC9019"/>, or may be executed earlier in the lifecycle of the device, for example
during manufacturing or during commissioning. In addition to the keying material key identifiers
and algorithm information needs to be provisioned. This specification places no requirements
on the structure of the key identifier.</t>

<t>To provide high security for AES Key Wrap it is important that the KEK is of high entropy,
and that implementations protect the KEK from disclosure. Compromise of the KEK may result
in the disclosure of all key data protected with that KEK.</t>

<t>Since the CEK is randomly generated, it must be ensured that the guidelines for random number
generation in <xref target="RFC8937"/> are followed.</t>

<t>In some cases third party companies analyse binaries for known security vulnerabilities. With
encrypted payloads this type of analysis is prevented. Consequently, these third party
companies either need to be given access to the plaintext binary before encryption or they need
to become authorized recipients of the encrypted payloads. In either case, it is necessary to
explicitly consider those third parties in the software supply chain when such a binary analysis
is desired.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>IANA is asked to add two values to the SUIT_Parameters registry established by 
<xref target="I-D.ietf-suit-manifest"/>.</t>

<figure><artwork><![CDATA[
Label      Name                 Reference
-----------------------------------------
TBD1       Encryption Info      Section 4
]]></artwork></figure>

<t>[Editor's Note: 
 - TBD1: Proposed 19
]</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC3394">
  <front>
    <title>Advanced Encryption Standard (AES) Key Wrap Algorithm</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <date month="September" year="2002"/>
  </front>
  <seriesInfo name="RFC" value="3394"/>
  <seriesInfo name="DOI" value="10.17487/RFC3394"/>
</reference>

<reference anchor="RFC9052">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
      <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="96"/>
  <seriesInfo name="RFC" value="9052"/>
  <seriesInfo name="DOI" value="10.17487/RFC9052"/>
</reference>

<reference anchor="RFC9053">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052).</t>
      <t>This document, along with RFC 9052, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9053"/>
  <seriesInfo name="DOI" value="10.17487/RFC9053"/>
</reference>

<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>


<reference anchor="I-D.ietf-suit-manifest">
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname="Brendan Moran" initials="B." surname="Moran">
         <organization>Arm Limited</organization>
      </author>
      <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         <organization>Arm Limited</organization>
      </author>
      <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
         <organization>Inria</organization>
      </author>
      <author fullname="Ãyvind RÃ¸nningstad" initials="O." surname="RÃ¸nningstad">
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day="27" month="February" year="2023"/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-22"/>
   
</reference>


<reference anchor="I-D.ietf-cose-aes-ctr-and-cbc">
   <front>
      <title>CBOR Object Signing and Encryption (COSE): AES-CTR and AES-CBC</title>
      <author fullname="Russ Housley" initials="R." surname="Housley">
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         <organization>Arm Limited</organization>
      </author>
      <date day="25" month="May" year="2023"/>
      <abstract>
	 <t>   The Concise Binary Object Representation (CBOR) data format is
   designed for small code size and small message size.  CBOR Object
   Signing and Encryption (COSE) is specified in RFC 9052 to provide
   basic security services using the CBOR data format.  This document
   specifies the conventions for using AES-CTR and AES-CBC as Content
   Encryption algorithms with COSE.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-cose-aes-ctr-and-cbc-06"/>
   
</reference>


<reference anchor="I-D.ietf-suit-trust-domains">
   <front>
      <title>SUIT Manifest Extensions for Multiple Trust Domains</title>
      <author fullname="Brendan Moran" initials="B." surname="Moran">
         <organization>Arm Limited</organization>
      </author>
      <author fullname="Ken Takayama" initials="K." surname="Takayama">
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day="7" month="July" year="2023"/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT Manifest format
   (as defined in [I-D.ietf-suit-manifest]) for use in deployments with
   multiple trust domains.  A device has more than one trust domain when
   it enables delegation of different rights to mutually distrusting
   entities for use for different purposes or Components in the context
   of firmware or software update.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-trust-domains-04"/>
   
</reference>




    </references>

    <references title='Informative References'>



<reference anchor="RFC9019">
  <front>
    <title>A Firmware Update Architecture for Internet of Things</title>
    <author fullname="B. Moran" initials="B." surname="Moran"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="D. Brown" initials="D." surname="Brown"/>
    <author fullname="M. Meriac" initials="M." surname="Meriac"/>
    <date month="April" year="2021"/>
    <abstract>
      <t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t>
      <t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9019"/>
  <seriesInfo name="DOI" value="10.17487/RFC9019"/>
</reference>

<reference anchor="RFC9124">
  <front>
    <title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
    <author fullname="B. Moran" initials="B." surname="Moran"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
    <date month="January" year="2022"/>
    <abstract>
      <t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t>
      <t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9124"/>
  <seriesInfo name="DOI" value="10.17487/RFC9124"/>
</reference>

<reference anchor="RFC8937">
  <front>
    <title>Randomness Improvements for Security Protocols</title>
    <author fullname="C. Cremers" initials="C." surname="Cremers"/>
    <author fullname="L. Garratt" initials="L." surname="Garratt"/>
    <author fullname="S. Smyshlyaev" initials="S." surname="Smyshlyaev"/>
    <author fullname="N. Sullivan" initials="N." surname="Sullivan"/>
    <author fullname="C. Wood" initials="C." surname="Wood"/>
    <date month="October" year="2020"/>
    <abstract>
      <t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols. Weak or predictable "cryptographically secure" pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t>
      <t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8937"/>
  <seriesInfo name="DOI" value="10.17487/RFC8937"/>
</reference>

<reference anchor="RFC5652">
  <front>
    <title>Cryptographic Message Syntax (CMS)</title>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <date month="September" year="2009"/>
    <abstract>
      <t>This document describes the Cryptographic Message Syntax (CMS). This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="70"/>
  <seriesInfo name="RFC" value="5652"/>
  <seriesInfo name="DOI" value="10.17487/RFC5652"/>
</reference>

<reference anchor="RFC5280">
  <front>
    <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
    <author fullname="D. Cooper" initials="D." surname="Cooper"/>
    <author fullname="S. Santesson" initials="S." surname="Santesson"/>
    <author fullname="S. Farrell" initials="S." surname="Farrell"/>
    <author fullname="S. Boeyen" initials="S." surname="Boeyen"/>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <author fullname="W. Polk" initials="W." surname="Polk"/>
    <date month="May" year="2008"/>
    <abstract>
      <t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet. An overview of this approach and model is provided as an introduction. The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms. Standard certificate extensions are described and two Internet-specific extensions are defined. A set of required certificate extensions is specified. The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions. An algorithm for X.509 certification path validation is described. An ASN.1 module and examples are provided in the appendices. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5280"/>
  <seriesInfo name="DOI" value="10.17487/RFC5280"/>
</reference>

<reference anchor="RFC5869">
  <front>
    <title>HMAC-based Extract-and-Expand Key Derivation Function (HKDF)</title>
    <author fullname="H. Krawczyk" initials="H." surname="Krawczyk"/>
    <author fullname="P. Eronen" initials="P." surname="Eronen"/>
    <date month="May" year="2010"/>
    <abstract>
      <t>This document specifies a simple Hashed Message Authentication Code (HMAC)-based key derivation function (HKDF), which can be used as a building block in various protocols and applications. The key derivation function (KDF) is intended to support a wide range of applications and requirements, and is conservative in its use of cryptographic hash functions. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5869"/>
  <seriesInfo name="DOI" value="10.17487/RFC5869"/>
</reference>


<reference anchor="iana-suit" target="TBD">
  <front>
    <title>IANA SUIT Manifest Registry</title>
    <author >
      <organization>Internet Assigned Numbers Authority</organization>
    </author>
    <date year="2023"/>
  </front>
</reference>
<reference anchor="ROP" target="https://en.wikipedia.org/wiki/Return-oriented_programming">
  <front>
    <title>Return-Oriented Programming</title>
    <author >
      <organization>Wikipedia</organization>
    </author>
    <date year="2023" month="March"/>
  </front>
</reference>
<reference anchor="SP800-56" target="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Ar3.pdf">
  <front>
    <title>Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography, NIST Special Publication 800-56A Revision 3</title>
    <author >
      <organization>NIST</organization>
    </author>
    <date year="2018" month="April"/>
  </front>
</reference>


    </references>


<?line 1309?>

<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank Henk Birkholz for his feedback on the CDDL description in this document.
Additionally, we would like to thank Michael Richardson, Ãyvind RÃ¸nningstad, Dave Thaler, Laurence
Lundblade, and Carsten Bormann for their review feedback. Finally, we would like to thank Dick Brooks for
making us aware of the challenges firmware encryption imposes on binary analysis.</t>

</section>
<section anchor="full-cddl"><name>A. Full CDDL</name>
<t>The following CDDL MUST be appended to the SUIT Manifest CDDL. The SUIT CDDL is defined in Appendix A of <xref target="I-D.ietf-suit-manifest"/></t>

<figure><sourcecode type="CDDL"><![CDATA[
; Define SUIT_Encryption_Info_* as a subset of COSE_Encrypt

SUIT_Encryption_Info_Value = #6.96(
    SUIT_Encryption_Info_AESKW .within COSE_Encrypt /
    SUIT_Encryption_Info_ESDH .within COSE_Encrypt)

SUIT_Encryption_Info_AESKW = [
  protected   : bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : bstr / nil,
  recipients  : [ + COSE_recipient_AESKW .within COSE_recipient ]
]

COSE_recipient_AESKW = [
  protected   : bstr .size 0 / bstr .cbor empty_map,
  unprotected : recipient_header_unpr_map_aeskw,
  ciphertext  : bstr        ; CEK encrypted with KEK
]
empty_map = {}

recipient_header_unpr_map_aeskw =
{
    1 => int,         ; algorithm identifier
  ? 4 => bstr,        ; identifier of the recipient public key
  * label => values   ; extension point
}

SUIT_Encryption_Info_ESDH = [
  protected   : bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : bstr / nil,
  recipients  : [ + COSE_recipient_ESDH .within COSE_recipient ]
]

COSE_recipient_ESDH = [
  protected   : bstr .cbor recipient_header_map_esdh,
  unprotected : recipient_header_unpr_map_esdh,
  ciphertext  : bstr        ; CEK encrypted with KEK
]

recipient_header_map_esdh =
{
    1 => int,         ; algorithm identifier
  * label => values   ; extension point
}

recipient_header_unpr_map_esdh =
{
   -1 => COSE_Key,    ; ephemeral public key for the sender
  ? 4 => bstr,        ; identifier of the recipient public key
  * label => values   ; extension point
}

; common definitions
outer_header_map_protected =
{
    1 => int,         ; algorithm identifier
  * label => values   ; extension point
}

outer_header_map_unprotected =
{
    5 => bstr,        ; IV
  * label => values   ; extension point
}


; Extends SUIT Manifest

$$SUIT_Parameters //= (suit-parameter-encryption-info =>
    bstr .cbor SUIT_Encryption_Info_Value)

suit-parameter-encryption-info = 19
]]></sourcecode></figure>

</section>


  </back>

<!-- ##markdown-source:
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
9tolkBMpSsSoQwAijAeC5CbKaF/HsdzSMgKy9zEOJddCUylnCi+JEImgRtoD
fGqCdQ96m0gBHV9AMEcl5cMnq5fa1i3d94XSAuym+F7Acnbr3UC/i+4pfvfB
OosiVW6IzNovEfJjpGt6YtG05niMUCXSv7SRnSwSJS5JMBmRSmo77gjjEWmS
0qaEvUYcqgngeGAIZDXCJjagGDskziu5VZE4ZdYYJbDxZMDhz6XJwqD5eoUo
ZXdhoTc7QvahF2IFCDGUkiIDxpKTYZanSzQaQQPfLKURE+VIZPgGtckj0GXC
ghHEqDugkuXUF/GDOGJhCa8QceVSQGSkT9QXKYZMmDV9/IirqoMqAHuDYiLf
N2VFflkE4itXs7P8PkwYFdsXxQYQIftykssshH7XBEEGNynYIMcsFoSNJa8/
YlAek5FBqtE2XxBHPNKx5GnSZaO4j245YQstwQmiOaj1OmJZNXtYakOsliS2
WKU56MO57depMkIzH8YB6wVCXtw1UKZxL6TaEyfldk9y8ddG2+mLaQQmK1nd
Uhqiu5ik4Xid4XYiS6oJzW2rHH+5BiENA5CphpNWzqbQmtXhAYoWa6hjSX5k
ywtjysOWaheAWqt21pECjV1Xtk8SJhhiSH0/4ISIRUfoFrAcEhUMYrOPfE0w
PsoiMNukkAQtMQctmqlSDwaIuVLuDhtn0UwkOrtN1wskhBtQgcldRX0ZR8VN
lJWXJI5w+yzDBNQ4mxhsvQYNVDBlZjMixxzUdOoreHM++iBZrdD4XkPdTcov
dkYomVCxsRvHwlKyJSjZyYPku1iEkxRZgFHSdlArYyGYuxtkpLMIHaqwfXYH
cgXQeLrOUUBNIhBgtKf/9V//pYNlD/l7Wtd/Tz+r4S9CRi7gIzS0+/msEaGf
IfMb8cv9jWmsX0qzsL/umelYqRVPv6T1K+3IrK7y3rbbEP07N7EWoDZge00G
XCb4hA+GNrL+smPv6nv+aDrnTNbi8/Zwx4SrTXesYQdEdv+0o6G1qKc7Rtz+
WkZoIsCPp+Kxks4crXr2SEPVUuVstavx6JOymizOkaMqBGzdqBbKw6IcVqyL
mmZkNhqRCAr9pECfcIn/GYe57e4TSgWIM+SfUl27i0+BBQu8fhVl2DUPm0To
0Qw5Tolcnh0jkqmSCJYGlvAxNLMAxYKlQaxkDXq9yBVNKrzWHikqfaEVlKP8
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
4AlfA8XFSZFbbxTAClYdEKdnOnFVel34HsUZxxEATLKoFeOrnp2WSvo6AoA+
wNMcZpc9KoQItV9N4oYVvaArISwVh846dVqIJDVL5HJfLaffoRgQYCi9cqyp
1vV6tMuU1xjyrtN+qFkcHmBOwQTk8pErOznWaCgHcSTHw3FO3M4zjE/bnZvr
9KRzBGDkmPzdqucMIK0q/jLKIlBkwi5QXzlAA5PS2gW5X4AdHB5k8gpZqvHl
ICq6bau4Gv+9dcv671vPREgrqjrfgH72vl4/enqMPyhFGb5WG/1SbnTHE9XJ
U37y1GjU9tu/8Kdfym3veHpNl8aP1FP760N6vntWd6/zqWy5DwLis54E5Q0K
PNzBl9EcSPBU4GtvY/HMqgKlGCG8ig8Ck2ZinozggXXFoMrVxkfX8OhcVddQ
hyZxv5+Jv755Z7C4XMtGsSNl7yi++Ua9rk5BKimJ375OqIK4fLemBagiQyAQ
zElE7qiH3ckKC3mzICC3pMlbqdVrj7nR/Zn45FiUKySLTuJXIFolT4kpYt70
HSxzIi+GlNFhyThVCQIgS4ovW2Ei2gJ97XSFvIk2v9Z3BSv/v47kyqSAEnt8
ALcjJRWfIyArU9H9SLZmakWiQmEYh9duW3pNXmhZhqCAtn/AI2rcRteoWEot
2JJFirtvcSFkKyU8P3vv2Rkf+8njy54Z8i5/Vc9/Kbf/pdr+zucl1iN2sJ77
+79vfnes7a2r+TN99Sr8+cuBeS8nwkM0GmsxTxoMuUaVURTZFqMAmq8yCrC4
WDET+vK/bR1fF52QJILnR64wdoVVdBZ4oGVXTgAXg8lLBZ/4VFaqXSU6N0cN
TuUY+I54c5u3mckoGJ5jrZzpCuggc5FvmmR82rrB6Kuz1+Ltu7P3Pqj7L0bf
0q+HB6/Ovnruz0f+q8GrrwabH786f9Xqw/evgkB+vh09H3zl3Ia3ZwP/L3+Z
+6v//PaH/wy+/urlq7bzHhXV4Idvz4u/PnX6P3y1TDZ/fputhi8vfj65iv/6
5uqd/zrw/fPRIh2F2Xz944/9P1+9/ymOuq/T5c2PP77svStuDg/ePgXV5ptv
plezGz+7yC9fXBd58O3op9sXr4vs9fO/xv03g+brp7eJ/3WR/7x85zVftYoX
8TdyaaPXwx0LsxLr6YalfJXyKSjreH/lKhLKA6BEktyAfjccvx68PAtsMI6v
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
F/j+f3jTAAA=

-->

</rfc>

