<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.1 (Ruby 3.0.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-firmware-encryption-19" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="Encrypted Payloads in SUIT Manifests">Encrypted Payloads in SUIT Manifests</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security">Vigil Security, LLC</organization>
      <address>
        <email>housley@vigilsec.com</email>
      </address>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="D." surname="Brown" fullname="David Brown">
      <organization>Linaro</organization>
      <address>
        <email>david.brown@linaro.org</email>
      </address>
    </author>
    <author initials="K." surname="Takayama" fullname="Ken Takayama">
      <organization>SECOM CO., LTD.</organization>
      <address>
        <email>ken.takayama.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2023" month="December" day="31"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 93?>

<t>This document specifies techniques for encrypting software, firmware,
machine learning models, and personalization data by utilizing the IETF
SUIT manifest. Key agreement is provided by ephemeral-static (ES)
Diffie-Hellman (DH) and AES Key Wrap (AES-KW). ES-DH uses public key
cryptography while AES-KW uses a pre-shared key. Encryption of the
plaintext is accomplished with conventional symmetric key cryptography.</t>



    </abstract>



  </front>

  <middle>


<?line 102?>

<section anchor="introduction"><name>Introduction</name>

<t>Vulnerabilities with Internet of Things (IoT) devices have raised the
need for a reliable and secure firmware update mechanism that is also
suitable for constrained devices. To protect firmware images, the SUIT manifest
format was developed <xref target="I-D.ietf-suit-manifest"/>. It provides a bundle of
metadata, including where to find the payload, the devices to which it
applies and a security wrapper.</t>

<t><xref target="RFC9124"/> details the information that has to be provided by the SUIT
manifest format. In addition to offering protection against modification,
via a digital signature or a message authentication code,
confidentiality may also be afforded.</t>

<t>Encryption prevents third parties, including attackers, from gaining
access to the payload. Attackers typically need intimate knowledge
of a binary, such as a firmware image, to mount their attacks.
For example, return-oriented programming (ROP) <xref target="ROP"/> requires access
to the binary and encryption makes it much more difficult to write exploits.
Beside confidentiality of the binary, confidentiality of the sources
(e.g. in case of open source software) may be required as well to prevent
reverse engineering and/or reproduction of the binary firmware.</t>

<t>While the original motivating use case of this document was firmware
encryption, the use of SUIT manifests has been extended to other use cases
requiring integrity and confidentiality protection, such as:</t>

<t><list style="symbols">
  <t>software packages,</t>
  <t>personalization data,</t>
  <t>configuration data, and</t>
  <t>machine learning models.</t>
</list></t>

<t>Hence, we use the term payload to generically refer to all those objects.</t>

<t>The payload is encrypted using a symmetric content encryption
key, which can be established using a variety of mechanisms; this
document defines two content key distribution methods for use with
the IETF SUIT manifest, namely:</t>

<t><list style="symbols">
  <t>Ephemeral-Static (ES) Diffie-Hellman (DH), and</t>
  <t>AES Key Wrap (AES-KW).</t>
</list></t>

<t>The former method relies on asymmetric key cryptography while the
latter uses symmetric key cryptography.</t>

<t>Our design aims to reduce the number of content key distribution methods
for use with payload encryption and thereby increase interoperability
between different SUIT manifest parser implementations.</t>

<t>The goal of this specification is to protect payloads during transportation
end-to-end, and at rest when stored inside a device. Since many of the
devices today do not offer hardware-based, on-the-fly decryption of
code stored in flash memory, it may be necessary to decrypt and store
firmware images in on-chip flash before code can be executed. Since
devices with hardware-based, on-the-fly decryption become more common,
the goal of accomplishing confidentiality at rest may be better accomplished.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This document assumes familiarity with the IETF SUIT manifest <xref target="I-D.ietf-suit-manifest"/>,
the SUIT information model <xref target="RFC9124"/>, and the SUIT architecture <xref target="RFC9019"/>.</t>

<t>The following abbreviations are used in this document:</t>

<t><list style="symbols">
  <t>Key Wrap (KW), defined in <xref target="RFC3394"/> (for use with AES)</t>
  <t>Key-Encryption Key (KEK) <xref target="RFC3394"/></t>
  <t>Content-Encryption Key (CEK) <xref target="RFC5652"/></t>
  <t>Ephemeral-Static (ES) Diffie-Hellman (DH) <xref target="RFC9052"/></t>
</list></t>

<t>The terms sender and recipient have the following meaning:</t>

<t><list style="symbols">
  <t>Sender: Entity that sends an encrypted payload.</t>
  <t>Recipient: Entity that receives an encrypted payload.</t>
</list></t>

<t>Additionally, we introduce the term "distribution system" (or distributor)
to refer to an entity that knows the recipients of payloads. It is important
to note that the distribution system is far more than a file server. For
use of encryption, the distribution system either knows the public key
of the recipient (for ES-DH), or the KEK (for AES-KW).</t>

<t>The author, which is responsible for creating the payload, does not
know the recipients.</t>

<t>The author and the distribution system are logical roles. In some
deployments these roles are separated in different physical entities
and in others they are co-located.</t>

</section>
<section anchor="arch"><name>Architecture</name>

<t><xref target="RFC9019"/> describes the architecture for distributing payloads and
manifests from an author to devices. It does, however, not detail the
use of payload encryption. This document enhances the architecture to
support encryption.</t>

<t><xref target="arch-fig"/> shows the distribution system, which represents a file
server and the device management infrastructure.</t>

<t>The sender (author) needs to know the recipient (device) to use encryption.
For AES-KW, the KEK needs to be known and, in case of ES-DH, the sender needs
to be in possession of the public key of the recipient. The public key and
parameters may be in the recipient's X.509 certificate <xref target="RFC5280"/>. For
authentication of the sender and for integrity protection the recipients
must be provisioned with a trust anchor when a manifest is protected using
a digital signature. When a MAC is used to protect the manifest then a
symmetric key must be shared by the recipient and the sender.</t>

<t>With encryption, the author cannot just create a manifest for the payload
and sign it, since the subsequent encryption step by the distribution
system would invalidate the signature over the manifest. (The content key
distribution information is embedded inside the COSE_Encrypt structure,
which is included in the SUIT manifest.) Hence, the author has to
collaborate with the distribution system. The varying degree of
collaboration is discussed below.</t>

<figure title="Architecture for the distribution of Encrypted Payloads." anchor="arch-fig"><artset><artwork  type="svg"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="384" width="472" viewBox="0 0 472 384" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 8,160 L 8,224" fill="none" stroke="black"/>
<path d="M 8,288 L 8,352" fill="none" stroke="black"/>
<path d="M 96,32 L 96,96" fill="none" stroke="black"/>
<path d="M 96,160 L 96,224" fill="none" stroke="black"/>
<path d="M 96,288 L 96,352" fill="none" stroke="black"/>
<path d="M 128,64 L 128,320" fill="none" stroke="black"/>
<path d="M 328,160 L 328,208" fill="none" stroke="black"/>
<path d="M 344,48 L 344,80" fill="none" stroke="black"/>
<path d="M 384,88 L 384,152" fill="none" stroke="black"/>
<path d="M 432,48 L 432,80" fill="none" stroke="black"/>
<path d="M 448,160 L 448,208" fill="none" stroke="black"/>
<path d="M 8,32 L 96,32" fill="none" stroke="black"/>
<path d="M 344,48 L 432,48" fill="none" stroke="black"/>
<path d="M 104,64 L 128,64" fill="none" stroke="black"/>
<path d="M 344,80 L 432,80" fill="none" stroke="black"/>
<path d="M 8,96 L 96,96" fill="none" stroke="black"/>
<path d="M 8,160 L 96,160" fill="none" stroke="black"/>
<path d="M 328,160 L 448,160" fill="none" stroke="black"/>
<path d="M 104,192 L 320,192" fill="none" stroke="black"/>
<path d="M 328,208 L 448,208" fill="none" stroke="black"/>
<path d="M 8,224 L 96,224" fill="none" stroke="black"/>
<path d="M 8,288 L 96,288" fill="none" stroke="black"/>
<path d="M 104,320 L 128,320" fill="none" stroke="black"/>
<path d="M 8,352 L 96,352" fill="none" stroke="black"/>
<polygon class="arrowhead" points="392,152 380,146.4 380,157.6 " fill="black" transform="rotate(90,384,152)"/>
<polygon class="arrowhead" points="112,320 100,314.4 100,325.6 " fill="black" transform="rotate(180,104,320)"/>
<polygon class="arrowhead" points="112,192 100,186.4 100,197.6 " fill="black" transform="rotate(180,104,192)"/>
<polygon class="arrowhead" points="112,64 100,58.4 100,69.6 " fill="black" transform="rotate(180,104,64)"/>
<g class="text">
<text x="52" y="52">Device</text>
<text x="48" y="68">1</text>
<text x="388" y="68">Author</text>
<text x="424" y="116">Payload</text>
<text x="464" y="116">+</text>
<text x="428" y="132">Manifest</text>
<text x="52" y="180">Device</text>
<text x="176" y="180">Payload</text>
<text x="216" y="180">+</text>
<text x="260" y="180">Manifest</text>
<text x="388" y="180">Distribution</text>
<text x="48" y="196">2</text>
<text x="388" y="196">System</text>
<text x="56" y="260">...</text>
<text x="52" y="308">Device</text>
<text x="48" y="324">n</text>
</g>
</svg>
</artwork><artwork  type="ascii-art"><![CDATA[
 +----------+
 |  Device  |                              +----------+
 |    1     |<--+                          |  Author  |
 |          |   |                          +----------+
 +----------+   |                               |
                |                               | Payload +
                |                               | Manifest
                |                               v
 +----------+   |                        +--------------+
 |  Device  |   |  Payload + Manifest    | Distribution |
 |    2     |<--+------------------------|    System    |
 |          |   |                        +--------------+
 +----------+   |
                |
      ...       |
                |
 +----------+   |
 |  Device  |   |
 |    n     |<--+
 |          |
 +----------+
]]></artwork></artset></figure>

<t>The author has several deployment options, namely:</t>

<t><list style="symbols">
  <t>The author, as the sender, obtains information about the recipients
and their keys from the distribution system. There are proprietary as well as
standardized device management solutions available providing this functionality,
as discussed in <xref target="RFC9019"/>. Then, it performs the necessary
steps to encrypt the payload. As a last step it creates one or more manifests.
The device(s) perform decryption and act as recipients.</t>
  <t>The author treats the distribution system as the initial recipient. The
author typically uses REST APIs or web user interfaces to interact with the
distribution system. Then, the distribution system decrypts and re-encrypts the
payload for consumption by the device (or the devices). Delegating the task of
re-encrypting the payload to the distribution system offers flexibility when the
number of devices that need to receive encrypted payloads changes dynamically
or when updates to KEKs or recipient public keys are necessary. As a downside,
the author needs to trust the distribution system with performing the
re-encryption of the payload.</t>
</list></t>

<t>If the author delegates encryption rights to the distributor two models are possible:</t>

<t><list style="numbers">
  <t>The distributor replaces the COSE_Encrypt in the manifest and then signs the
manifest again. However, the COSE_Encrypt structure is contained within a signed
container, which presents a problem: replacing the COSE_Encrypt with a new one
will cause the digest of the manifest to change, thereby changing the signature.
This means that the distributor must be able to sign the new manifest. If this
is the case, then the distributor gains the ability to construct and sign
manifests, which allows the distributor the authority to sign code, effectively
presenting the distributor with full control over the recipient. Because
distributors typically perform their re-encryption online in order to handle
a large number of devices in a timely fashion, it is not possible to air-gap
the distributor's signing operations. This impacts the recommendations in
Section 4.3.17 of <xref target="RFC9124"/>. This model nevertheless represent the current
state of firmware updates for IoT devices.</t>
  <t>The distributor uses a two-manifest system. More precisely, the distributor
constructs a new manifest that overrides the COSE_Encrypt using the dependency
system defined in <xref target="I-D.ietf-suit-trust-domains"/>. This incurs additional
overhead: one additional signature verification and one additional manifest,
as well as the additional machinery in the recipient needed for dependency
processing. This extra complexity offers extra security.</t>
</list></t>

<t>These two models also present different threat profiles for the distributor.
If the distributor only has encryption rights, then an attacker who breaches
the distributor can only mount a limited attack: they can encrypt a modified
binary, but the recipients will identify the attack as soon as they perform
the required image digest check and revert back to a correct image immediately.</t>

<t>It is RECOMMENDED that distributors are implemented using a two-manifest
system in order to distribute content encryption keys without requiring
re-signing of the manifest, despite the increase in complexity and greater
number of signature verifications that this imposes on the recipient.</t>

</section>
<section anchor="parameters"><name>Encryption Extensions</name>

<t>This specification introduces a new extension to the SUIT_Parameters structure.</t>

<t>The SUIT_Encryption_Info structure (called suit-parameter-encryption-info in
<xref target="parameter-fig"/>) contains the content key distribution information. The
content of the SUIT_Encryption_Info structure is explained in <xref target="AES-KW"/>
(for AES-KW) and in <xref target="ES-DH"/> (for ES-DH).</t>

<t>Once a CEK is available, the steps described in <xref target="content-enc"/> are applicable.
These steps apply to both content key distribution methods described in this
section.</t>

<t>The SUIT_Encryption_Info structure is either carried inside the
suit-directive-override-parameters or the suit-directive-set-parameters
parameters used in the "Directive Write" and "Directive Copy" directives.
An implementation claiming conformance with this specification
must implement support for these two parameters. Since a device will
typically only support one of the content key distribution methods,
the distribution system needs to know which of two specified methods
wis supported. Mandating only a single content key distribution
method for a constrained device also reduces the code size.</t>

<figure title="CDDL of the SUIT_Parameters Extension." anchor="parameter-fig"><artwork><![CDATA[
SUIT_Parameters //= (suit-parameter-encryption-info
    => bstr .cbor SUIT_Encryption_Info)

suit-parameter-encryption-info = 19
]]></artwork></figure>

<t>RFC Editor's Note (TBD19): The value for the suit-parameter-encryption-info
parameter is set to 19, as the proposed value.</t>

</section>
<section anchor="extended-directives"><name>Extended Directives</name>

<t>This specification extends these directives:</t>

<t><list style="symbols">
  <t>Directive Write (suit-directive-write) to decrypt the content specified by
suit-parameter-content with suit-parameter-encryption-info.</t>
  <t>Directive Copy (suit-directive-copy) to decrypt the content of the component
specified by suit-parameter-source-component with suit-parameter-encryption-info.</t>
</list></t>

<t>Examples of the two directives are shown below.</t>

<t><xref target="encryption-info-consumed-with-write"/> illustrates the Directive Write.
The encrypted payload specified with parameter-content, namely
h'EA1...CED' in the example, is decrypted using the SUIT_Encryption_Info
structure referred to by parameter-encryption-info, i.e., h'D86...1F0'.
The resulting plaintext payload is stored into component #0.</t>

<figure title="Example showing the extended suit-directive-write." anchor="encryption-info-consumed-with-write"><artwork><![CDATA[
/ directive-override-parameters / 20, {
  / parameter-content / 18: h'EA1...CED',
  / parameter-encryption-info / 19: h'D86...1F0'
},
/ directive-write / 18, 15
]]></artwork></figure>

<t><xref target="encryption-info-consumed-with-copy"/> illustrates the Directive Copy.
In this example the encrypted payload is found at the URI indicated
by the parameter-uri, i.e. "http://example.com/encrypted.bin". The
encrypted payload will be downloaded and stored in component #1.
Then, the information in the SUIT_Encryption_Info structure of the
parameter-encryption-info, i.e. h'D86...1F0', will be used to
decrypt the content in component #1 and the resulting plaintext
payload will be stored into component #0.</t>

<figure title="Example showing the extended suit-directive-copy." anchor="encryption-info-consumed-with-copy"><artwork><![CDATA[
/ directive-set-component-index / 12, 1,
/ directive-override-parameters / 20, {
  / parameter-uri / 21: "http://example.com/encrypted.bin",
},
/ directive-fetch / 21, 15,
/ directive-set-component-index / 12, 0,
/ directive-override-parameters / 20, {
  / parameter-encryption-info / 19: h'D86...1F0',
  / parameter-source-component / 22: 1
},
/ directive-copy / 22, 15
]]></artwork></figure>

<t>The payload to be encrypted may be detached and, in that case, it is
not covered by the digital signature or the MAC protecting the manifest.
(To be more precise, the suit-authentication-wrapper found in the envelope
contains a digest of the manifest in the SUIT Digest Container.)</t>

<t>The lack of authentication and integrity protection of the payload is
particularly a concern when a cipher without integrity protection is
used.</t>

<t>To provide authentication and integrity protection of the payload
in the detached payload case a SUIT Digest Container with the hash
of the encrypted and/or plaintext payload MUST be included in the
manifest. See suit-parameter-image-digest parameter in Section
8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>.</t>

<t>Once a CEK is available, the steps described in <xref target="content-enc"/> are applicable.
These steps apply to both content key distribution methods.</t>

</section>
<section anchor="content-key-distribution"><name>Content Key Distribution</name>

<t>The sub-sections below describe two content key distribution methods,
namely AES Key Wrap (AES-KW) and Ephemeral-Static Diffie-Hellman (ES-DH).
Many other methods are specified in the literature, and even supported
by COSE. AES-KW and ES-DH cover the popular methods used in the market
today and they were selected due to their maturity, different
security properties, and because of their interoperability properties.</t>

<t>The two content key distribution methods require the CEKs to be
randomly generated. The guidelines for random number generation
in <xref target="RFC8937"/> MUST be followed.</t>

<t>When an encrypted payload is sent to multiple recipients, there
are different deployment options. To explain these options we use the
following notation:</t>

<figure><artwork><![CDATA[
   - KEK(R1, S) refers to a KEK shared between recipient R1 and
     the sender S. The KEK, as a concept, is used by AES Key Wrap
     but not by ES-DH.
   - CEK(R1, S) refers to a CEK shared between R1 and S.
   - CEK(*, S) or KEK(*, S) are used when a single CEK or a single
     KEK is shared with all authorized recipients by a given sender
     S in a certain context.
   - ENC(plaintext, k) refers to the encryption of plaintext with
     a key k.
]]></artwork></figure>

<section anchor="AES-KW"><name>Content Key Distribution with AES Key Wrap</name>

<section anchor="introduction-1"><name>Introduction</name>

<t>The AES Key Wrap (AES-KW) algorithm is described in <xref target="RFC3394"/>, and
can be used to encrypt a randomly generated content-encryption key (CEK)
with a pre-shared key-encryption key (KEK). The COSE conventions for using
AES-KW are specified in Section 8.5.2 of <xref target="RFC9052"/> and in Section 6.2.1 of
<xref target="RFC9053"/>. The encrypted CEK is carried in the COSE_recipient structure
alongside the information needed for AES-KW. The COSE_recipient structure,
which is a substructure of the COSE_Encrypt structure, contains the CEK
encrypted by the KEK.</t>

<t>To provide high security for AES Key Wrap, it is important that the
KEK is of high entropy, and that implementations protect the KEK
from disclosure. Compromise of the KEK may result in the disclosure
of all data protected with that KEK, including binaries, and configuration data.</t>

<t>The COSE_Encrypt structure conveys information for encrypting the payload,
which includes information like the algorithm and the IV, even though the
payload may not be embedded in the COSE_Encrypt.ciphertext if it is
conveyed as detached content.</t>

</section>
<section anchor="deployment-options"><name>Deployment Options</name>

<t>There are three deployment options for use with AES Key Wrap for payload
encryption:</t>

<t><list style="symbols">
  <t>If all recipients (typically of the same product family) share the same KEK,
a single COSE_recipient structure contains the encrypted CEK. The sender executes
the following steps:</t>
</list></t>

<figure><artwork><![CDATA[
     1. Fetch KEK(*, S)
     2. Generate CEK
     3. ENC(CEK, KEK)
     4. ENC(payload, CEK)
]]></artwork></figure>

<t>This deployment option is strongly discouraged. An attacker gaining access to
the KEK will be able to encrypt and send payloads to all recipients configured
to use this KEK.</t>

<t><list style="symbols">
  <t>If recipients have different KEKs, then multiple COSE_recipient structures
are included but only a single CEK is used. Each COSE_recipient structure
contains the CEK encrypted with the KEKs appropriate for a given recipient.
The benefit of this approach is that the payload is encrypted only once with
a CEK while there is no sharing of the KEK across recipients. Hence, authorized
recipients still use their individual KEK to decrypt the CEK and to subsequently
obtain the plaintext. The steps taken by the sender are:</t>
</list></t>

<figure><artwork><![CDATA[
    1.  Generate CEK
    2.  for i=1 to n
        {
    2a.    Fetch KEK(Ri, S)
    2b.    ENC(CEK, KEK(Ri, S))
        }
    3.  ENC(payload, CEK)
]]></artwork></figure>

<t><list style="symbols">
  <t>The third option is to use different CEKs encrypted with KEKs of
authorized recipients. This approach is appropriate when no benefits can
be gained from encrypting and transmitting payloads only once. Assume there
are n recipients with their unique KEKs - KEK(R1, S), ..., KEK(Rn, S).
The sender needs to execute the following steps:</t>
</list></t>

<figure><artwork><![CDATA[
    1.  for i=1 to n
        {
    1a.    Fetch KEK(Ri, S)
    1b.    Generate CEK(Ri, S)
    1c.    ENC(CEK(Ri, S), KEK(Ri, S))
    1d.    ENC(payload, CEK(Ri, S))
    2.  }
]]></artwork></figure>

</section>
<section anchor="cddl"><name>CDDL</name>

<t>The CDDL for the COSE_Encrypt_Tagged structure is shown in <xref target="cddl-aeskw"/>.
empty_or_serialized_map and header_map are structures defined in <xref target="RFC9052"/>.</t>

<figure title="CDDL for AES-KW-based Content Key Distribution" anchor="cddl-aeskw"><artwork><![CDATA[
outer_header_map_protected = empty_or_serialized_map
outer_header_map_unprotected = header_map

SUIT_Encryption_Info_AESKW = [
  protected   : bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : bstr / nil,
  recipients  : [ + COSE_recipient_AESKW .within COSE_recipient ]
]

COSE_recipient_AESKW = [
  protected   : bstr .size 0 / bstr .cbor empty_map,
  unprotected : recipient_header_unpr_map_aeskw,
  ciphertext  : bstr        ; CEK encrypted with KEK
]

empty_map = {}

recipient_header_unpr_map_aeskw =
{
    1 => int,         ; algorithm identifier
  ? 4 => bstr,        ; identifier of the KEK pre-shared with the recipient
  * label => values   ; extension point
}
]]></artwork></figure>

<t>Note that the AES-KW algorithm, as defined in Section 2.2.3.1 of <xref target="RFC3394"/>,
does not have public parameters that vary on a per-invocation basis. Hence,
the protected header in the COSE_recipient structure is a byte string
of zero length.</t>

</section>
</section>
<section anchor="ES-DH"><name>Content Key Distribution with Ephemeral-Static Diffie-Hellman</name>

<section anchor="introduction-2"><name>Introduction</name>

<t>Ephemeral-Static Diffie-Hellman (ES-DH) is a scheme that provides public key
encryption given a recipient's public key. There are multiple variants
of this scheme; this document re-uses the variant specified in Section 8.5.5
of <xref target="RFC9052"/>.</t>

<t>The following two layer structure is used:</t>

<t><list style="symbols">
  <t>Layer 0: Has a content encrypted with the CEK. The content may be detached.</t>
  <t>Layer 1: Uses the AES Key Wrap algorithm to encrypt the randomly generated
CEK with the KEK derived with ES-DH, whereby the resulting symmetric
key is fed into the HKDF-based key derivation function.</t>
</list></t>

<t>As a result, the two layers combine ES-DH with AES-KW and HKDF,
and it is called ECDH-ES + AES-KW.
An example is given in <xref target="esdh-aesgcm-example"/>.</t>

<t>ECDH-ES + HKDF, another version of ES-DH algorithm which doesn't use AES Key Wrap
can be also used for Content Key Distribution.</t>

</section>
<section anchor="deployment-options-1"><name>Deployment Options</name>

<t>There are two deployment options with this approach. We assume that recipients
are always configured with a device-unique public / private key pair.</t>

<t><list style="symbols">
  <t>A sender wants to transmit a payload to multiple recipients. All recipients
shall receive the same encrypted payload, i.e. the same CEK is used.
One COSE_recipient structure per recipient is used and it contains the
CEK encrypted with the KEK. To generate the KEK each COSE_recipient structure
contains a COSE_recipient_inner structure to carry the sender's ephemeral key
and an identifier for the recipients public key.</t>
</list></t>

<t>The steps taken by the sender are:</t>

<figure><artwork><![CDATA[
    1.  Generate CEK
    2.  for i=1 to n
        {
    2a.     Generate KEK(Ri, S) using ES-DH
    2b.     ENC(CEK, KEK(Ri, S))
        }
    3.  ENC(payload,CEK)
]]></artwork></figure>

<t><list style="symbols">
  <t>The alternative is to encrypt a payload with a different CEK for each
recipient. This results in n-manifests. This approach is useful when payloads contain
information unique to a device. The encryption operation then effectively becomes
ENC(payload_i, CEK(Ri, S)). Assume that KEK(R1, S),..., KEK(Rn, S) have been generated
for the different recipients using ES-DH. The following steps need to be made
by the sender:</t>
</list></t>

<figure><artwork><![CDATA[
    1.  for i=1 to n
        {
    1a.     Generate KEK(Ri, S) using ES-DH
    1b.     Generate CEK(Ri, S)
    1c.     ENC(CEK(Ri, S), KEK(Ri, S))
    1d.     ENC(payload, CEK(Ri, S))
        }
]]></artwork></figure>

</section>
<section anchor="cddl-1"><name>CDDL</name>

<t>The CDDL for the COSE_Encrypt_Tagged structure is shown in <xref target="cddl-esdh"/>.
Only the minimum number of parameters is shown. empty_or_serialized_map
and header_map are structures defined in <xref target="RFC9052"/>.</t>

<figure title="CDDL for ES-DH-based Content Key Distribution" anchor="cddl-esdh"><artwork><![CDATA[
outer_header_map_protected = empty_or_serialized_map
outer_header_map_unprotected = header_map

SUIT_Encryption_Info_ESDH = [
  protected   : bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : bstr / nil,
  recipients  : [ + COSE_recipient_ESDH .within COSE_recipient ]
]

COSE_recipient_ESDH = [
  protected   : bstr .cbor recipient_header_map_esdh,
  unprotected : recipient_header_unpr_map_esdh,
  ciphertext  : bstr        ; CEK encrypted with KEK
]

recipient_header_map_esdh =
{
    1 => int,         ; algorithm identifier
  * label => values   ; extension point
}

recipient_header_unpr_map_esdh =
{
   -1 => COSE_Key,    ; ephemeral public key for the sender
  ? 4 => bstr,        ; identifier of the recipient public key
  * label => values   ; extension point
}
]]></artwork></figure>

<t>See <xref target="content-enc"/> for a description on how to encrypt the payload.</t>

</section>
<section anchor="context-information-structure"><name>Context Information Structure</name>

<t>The context information structure is used to ensure that the derived keying material
is "bound" to the context of the transaction. This specification re-uses the structure
defined in Section 5.2 of <xref target="RFC9053"/> and tailors it accordingly.</t>

<t>The following information elements are bound to the context:</t>

<t><list style="symbols">
  <t>the protocol employing the key-derivation method,</t>
  <t>information about the utilized AES Key Wrap algorithm, and the key length.</t>
  <t>the protected header field, which contains the content key encryption algorithm.</t>
</list></t>

<t>The sender and recipient identities are left empty.</t>

<t>The following fields in <xref target="cddl-context-info"/> require an explanation:</t>

<t><list style="symbols">
  <t>The COSE_KDF_Context.AlgorithmID field MUST contain the algorithm identifier
for AES Key Wrap algorithm utilized. This specification uses the following
values: A128KW (value -3), A192KW (value -4), or A256KW (value -5)</t>
  <t>The COSE_KDF_Context.SuppPubInfo.keyDataLength field MUST contain the key length
of the algorithm in the COSE_KDF_Context.AlgorithmID field expressed as the number
of bits. For A128KW the value is 128, for A192KW the value is 192, and for A256KW
the value 256.</t>
  <t>The COSE_KDF_Context.SuppPubInfo.other field captures the protocol in
which the ES-DH content key distribution algorithm is used and MUST be set to
the constant string "SUIT Payload Encryption".</t>
  <t>The COSE_KDF_Context.SuppPubInfo.protected field MUST contain the serialized
content of the recipient_header_map_esdh field, which contains (among other fields)
the identifier of the content key distribution method.</t>
</list></t>

<figure title="CDDL for COSE_KDF_Context Structure" anchor="cddl-context-info"><sourcecode type="CDDL"><![CDATA[
COSE_KDF_Context = [
    AlgorithmID : int,
    PartyUInfo : [ PartyInfoSender ],
    PartyVInfo : [ PartyInfoRecipient ],
    SuppPubInfo : [
        keyDataLength : uint,
        protected : bstr .cbor recipient_header_map_esdh,
        other: 'SUIT Payload Encryption'
    ],
    ? SuppPrivInfo : bstr
]

PartyInfoSender = (
    identity : nil,
    nonce : nil,
    other : nil
)

PartyInfoRecipient = (
    identity : nil,
    nonce : nil,
    other : nil
)
]]></sourcecode></figure>

<t>The HKDF-based key derivation function MAY contain a salt value,
as described in Section 5.1 of <xref target="RFC9053"/>. This optional value is used to
influence the key generation process. This specification does not mandate the
use of a salt value. If the salt is public and carried in the message, then
the "salt" algorithm header parameter MUST be used. The purpose of the salt
is to provide extra randomness in the KDF context. If the salt is sent
in the 'salt' algorithm header parameter, then the receiver MUST be able to
process the salt and MUST pass it into the key derivation function.
For more information about the salt, see <xref target="RFC5869"/> and NIST
SP800-56 <xref target="SP800-56"/>.</t>

<t>Profiles of this specification MAY specify an extended version of the
context information structure or MAY utilize a different context information
structure.</t>

</section>
</section>
</section>
<section anchor="content-enc"><name>Content Encryption</name>

<t>This section summarizes the steps taken for content encryption, which
applies to both content key distribution methods.</t>

<t>For use with AEAD ciphers such as AES-GCM and ChaCha20/Poly1305,
the COSE specification requires a consistent byte
stream for the authenticated data structure to be created. This structure
is shown in <xref target="cddl-enc-aeskw"/> and is defined in Section 5.3 of <xref target="RFC9052"/>.</t>

<figure title="CDDL for Enc_structure Data Structure" anchor="cddl-enc-aeskw"><artwork><![CDATA[
 Enc_structure = [
   context : "Encrypt",
   protected : empty_or_serialized_map,
   external_aad : bstr
 ]
]]></artwork></figure>

<t>This Enc_structure needs to be populated as follows:</t>

<t>The protected field in the Enc_structure from <xref target="cddl-enc-aeskw"/> refers
to the content of the protected field from the COSE_Encrypt structure.</t>

<t>The value of the external_aad MUST be set to a zero-length byte string,
i.e., h'' in diagnostic notation and encoded as 0x40.</t>

<t>Some ciphers provide confidentiality witout integrity protection, such
as AES-CTR and AES-CBC (see <xref target="RFC9459"/>). For these ciphers the
Enc_structure, shown in <xref target="cddl-enc-aeskw"/>, MUST NOT be used because
the Additional Authenticated Data (AAD) byte string is only consumable
by AEAD ciphers. Hence, the AAD structure is not supplied to the 
API of those ciphers and the protected header in the SUIT_Encryption_Info_AESKW
or SUIT_Encryption_Info_ESDH structure MUST be a zero-length byte string,
respectively.</t>

<section anchor="aes-gcm"><name>AES-GCM</name>

<section anchor="introduction-3"><name>Introduction</name>

<t>AES-GCM is an AEAD cipher, provides confidentiality and integrity protection.</t>

<t>Examples in this section uses the following parameters:
- Algorithm for payload encryption: AES-GCM-128
  - k: h'15F785B5C931414411B4B71373A9C0F7'
  - IV: h'93702C81590F845D9EC866CCAC767BD1'
- Plaintext: "This is a real firmware image."
  - in hex: 546869732069732061207265616C206669726D7761726520696D6167652E</t>

</section>
<section anchor="aes-kw-aes-gcm-example"><name>AES-KW + AES-GCM Example</name>

<t>This example uses the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm id for key wrap: A128KW</t>
  <t>KEK COSE_Key (Secret Key):
  <list style="symbols">
      <t>kty: Symmetric</t>
      <t>k: 'aaaaaaaaaaaaaaaa'</t>
      <t>kid: 'kid-1'</t>
    </list></t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608443A10101A10550F14AAB9D81D51F7AD943FE87AF4F70CDF6818341
A0A2012204456B69642D31581875603FFC9518D794713C8CA8A115A7FB32
565A6D59534D62
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="aeskw-aesgcm-example"/>.</t>

<figure title="COSE_Encrypt Example for AES Key Wrap" anchor="aeskw-aesgcm-example"><artwork><![CDATA[
96([
  / protected: / << {
    / alg / 1: 1 / AES-GCM-128 /
  } >>,
  / unprotected: / {
    / IV / 5: h'F14AAB9D81D51F7AD943FE87AF4F70CD'
  },
  / payload: / null / detached ciphertext /,
  / recipients: / [
    [
      / protected: / << {
      } >>,
      / unprotected: / {
        / alg / 1: -3 / A128KW /,
        / kid / 4: 'kid-1'
      },
      / payload: /
        h'75603FFC9518D794713C8CA8A115A7FB32565A6D59534D62'
        / CEK encrypted with KEK /
    ]
  ]
])
]]></artwork></figure>

<t>The encrypted payload (with a line feed added) was:</t>

<figure><artwork><![CDATA[
2F59C3A34D9570FB99A5382E66466A3221A8AD85CE508BA306FB431A60EF
A5AAAA078355070205A4B196832DF17F
]]></artwork></figure>

</section>
<section anchor="ecdh-esaes-kw-aes-gcm-example"><name>ECDH-ES+AES-KW + AES-GCM Example</name>

<t>This example uses the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm for content key distribution: ECDH-ES + A128KW</t>
  <t>KEK COSE_Key (Receiver's Private Key):
  <list style="symbols">
      <t>kty: EC2</t>
      <t>crv: P-256</t>
      <t>x: h'5886CD61DD875862E5AAA820E7A15274C968A9BC96048DDCACE32F50C3651BA3'</t>
      <t>y: h'9EED8125E932CD60C0EAD3650D0A485CF726D378D1B016ED4298B2961E258F1B'</t>
      <t>d: h'60FE6DD6D85D5740A5349B6F91267EEAC5BA81B8CB53EE249E4B4EB102C476B3'</t>
      <t>kid: 'kid-2'</t>
    </list></t>
  <t>KDF Context
  <list style="symbols">
      <t>ALgorithm ID: -3 (A128KW)</t>
      <t>SuppPubInfo
      <list style="symbols">
          <t>keyDataLength: 128</t>
          <t>protected = &lt;&lt; { / alg / 1: -3 / A128KW / } &gt;&gt;</t>
          <t>other = 'SUIT Payload Encryption'</t>
        </list></t>
    </list></t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608443A10101A10550DAE613B2E0DC55F4322BE38BDBA9DC68F6818344
A101381CA220A401022001215820FF6E266DABAF51B7207569E31CF72646
183E94CEE64FCDC8695AD9A505AEFDEA2258205FBC4A29844450B3AC22AB
30C7F7004BB59D8BD60D7997734A9FA0124B65089504456B69642D325818
B0E21628283F3E409F8158D8FFCA567F340E379AC39E49C9
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="esdh-aesgcm-example"/>.</t>

<figure title="COSE_Encrypt Example for ES-DH" anchor="esdh-aesgcm-example"><artwork><![CDATA[
96([
  / protected: / << {
    / alg / 1: 1 / AES-GCM-128 /
  } >>,
  / unprotected: / {
    / IV / 5: h'DAE613B2E0DC55F4322BE38BDBA9DC68'
  },
  / payload: / null / detached ciphertext /,
  / recipients: / [
    [
      / protected: / << {
        / alg / 1: -29 / ECDH-ES + A128KW /
      } >>,
      / unprotected: / {
        / ephemeral key / -1: {
          / kty / 1: 2 / EC2 /,
          / crv / -1: 1 / P-256 /,
          / x / -2: h'FF6E266DABAF51B7207569E31CF72646
                      183E94CEE64FCDC8695AD9A505AEFDEA',
          / y / -3: h'5FBC4A29844450B3AC22AB30C7F7004B
                      B59D8BD60D7997734A9FA0124B650895'
        },
        / kid / 4: 'kid-2'
      },
      / payload:
        / h'B0E21628283F3E409F8158D8FFCA567F340E379AC39E49C9'
        / CEK encrypted with KEK /
    ]
  ]
])
]]></artwork></figure>

<t>The encrypted payload (with a line feed added) was:</t>

<figure><artwork><![CDATA[
344FA2D5AD2F43F6F363DA6FF2C337FE69E33E3D63714D23985BF02499EB
0E8B231D45C378245DA3611C160CC511
]]></artwork></figure>

</section>
</section>
<section anchor="aes-ctr"><name>AES-CTR</name>

<section anchor="introduction-4"><name>Introduction</name>

<t>AES-CTR is a non AEAD cipher, provides confidentiality but no integrity protection.
Unlike AES-CBC, AES-CTR uses an IV per AES operation, as shown in <xref target="aes-ctr-fig"/>.
Hence, when an image is encrypted using AES-CTR-128 or AES-CTR-256, the IV MUST
start with zero (0) and MUST be incremented by one for each 16-byte plaintext block
within the entire slot.</t>

<t>Using the previous example with a slot size of 64 KiB, the sector size 4096 bytes and
the AES plaintext block size of 16 byte requires IVs from 0 to 255 in the first sector
and 16 * 256 IVs for the remaining sectors in the slot.</t>

<figure title="AES-CTR Operation" anchor="aes-ctr-fig"><artset><artwork  type="svg"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="320" width="248" viewBox="0 0 248 320" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 56,96 L 56,176" fill="none" stroke="black"/>
<path d="M 88,48 L 88,88" fill="none" stroke="black"/>
<path d="M 88,184 L 88,240" fill="none" stroke="black"/>
<path d="M 120,96 L 120,176" fill="none" stroke="black"/>
<path d="M 176,96 L 176,176" fill="none" stroke="black"/>
<path d="M 208,48 L 208,88" fill="none" stroke="black"/>
<path d="M 208,184 L 208,240" fill="none" stroke="black"/>
<path d="M 240,96 L 240,176" fill="none" stroke="black"/>
<path d="M 56,96 L 120,96" fill="none" stroke="black"/>
<path d="M 176,96 L 240,96" fill="none" stroke="black"/>
<path d="M 56,176 L 120,176" fill="none" stroke="black"/>
<path d="M 176,176 L 240,176" fill="none" stroke="black"/>
<path d="M 64,208 L 96,208" fill="none" stroke="black"/>
<path d="M 184,208 L 216,208" fill="none" stroke="black"/>
<g class="text">
<text x="88" y="36">IV1</text>
<text x="208" y="36">IV2</text>
<text x="40" y="148">k--</text>
<text x="80" y="148">E</text>
<text x="160" y="148">k--</text>
<text x="200" y="148">E</text>
<text x="52" y="212">P1</text>
<text x="172" y="212">P2</text>
<text x="92" y="260">C1</text>
<text x="212" y="260">C2</text>
<text x="32" y="292">Legend:</text>
<text x="32" y="308">See</text>
<text x="84" y="308">previous</text>
<text x="156" y="308">diagram.</text>
</g>
</svg>
</artwork><artwork  type="ascii-art"><![CDATA[
         IV1            IV2
          |              |
          |              |
          |              |
      +-------+      +-------+
      |       |      |       |
      |       |      |       |
   k--|  E    |   k--|  E    |
      |       |      |       |
      +-------+      +-------+
          |              |
     P1--(+)        P2--(+)
          |              |
          |              |
          C1             C2

Legend: 
  See previous diagram.
]]></artwork></artset></figure>

<t>Examples in this section uses the following parameters:
- Algorithm for payload encryption: AES-CTR-128
  - k: h'261DE6165070FB8951EC5D7B92A065FE'
  - IV: h'DAE613B2E0DC55F4322BE38BDBA9DC68'
- Plaintext: "This is a real firmware image."
  - in hex: 546869732069732061207265616C206669726D7761726520696D6167652E</t>

</section>
<section anchor="aes-kw-aes-ctr-example"><name>AES-KW + AES-CTR Example</name>

<t>This example uses the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm id for key wrap: A128KW</t>
  <t>KEK COSE_Key (Secret Key):
  <list style="symbols">
      <t>kty: Symmetric</t>
      <t>k: 'aaaaaaaaaaaaaaaa'</t>
      <t>kid: 'kid-1'</t>
    </list></t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608445A10139FFFDA1055093702C81590F845D9EC866CCAC767BD1F681
8341A0A2012204456B69642D315818CE34035CE5C2E2666E46D4C131FC56
1DD190A6D26CFA1990
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="aeskw-aesctr-example"/>.</t>

<figure title="COSE_Encrypt Example for AES Key Wrap" anchor="aeskw-aesctr-example"><artwork><![CDATA[
96([
  / protected: / << {
    / alg / 1: -65534 / A128CTR /
  } >>,
  / unprotected: / {
    / IV / 5: h'93702C81590F845D9EC866CCAC767BD1'
  },
  / payload: / null / detached ciphertext /,
  / recipients: / [
    [
      / protected: / << {
      } >>,
      / unprotected: / {
        / alg / 1: -3 / A128KW /,
        / kid / 4: 'kid-1'
      },
      / payload: /
        h'CE34035CE5C2E2666E46D4C131FC561DD190A6D26CFA1990'
        / CEK encrypted with KEK /
    ]
  ]
])
]]></artwork></figure>

<t>The encrypted payload (with a line feed added) was:</t>

<figure><artwork><![CDATA[
B74188DE68CD904873C7D4AB265A7F5608AC63F68DBBCE7773ADCB38DA07
]]></artwork></figure>

</section>
<section anchor="ecdh-esaes-kw-aes-ctr-example"><name>ECDH-ES+AES-KW + AES-CTR Example</name>

<t>This example uses the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm for content key distribution: ECDH-ES + A128KW</t>
  <t>KEK COSE_Key (Receiver's Private Key):
  <list style="symbols">
      <t>kty: EC2</t>
      <t>crv: P-256</t>
      <t>x: h'5886CD61DD875862E5AAA820E7A15274C968A9BC96048DDCACE32F50C3651BA3'</t>
      <t>y: h'9EED8125E932CD60C0EAD3650D0A485CF726D378D1B016ED4298B2961E258F1B'</t>
      <t>d: h'60FE6DD6D85D5740A5349B6F91267EEAC5BA81B8CB53EE249E4B4EB102C476B3'</t>
      <t>kid: 'kid-2'</t>
    </list></t>
  <t>KDF Context
  <list style="symbols">
      <t>ALgorithm ID: -3 (A128KW)</t>
      <t>SuppPubInfo
      <list style="symbols">
          <t>keyDataLength: 128</t>
          <t>protected = &lt;&lt; { / alg / 1: -3 / A128KW / } &gt;&gt;</t>
          <t>other = 'SUIT Payload Encryption'</t>
        </list></t>
    </list></t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608445A10139FFFDA10550DAE613B2E0DC55F4322BE38BDBA9DC68F681
8344A101381CA120A401022001215820CB2A8EEAF7E260F02AD5C29E4608
939A6487E2172D239562819E5F52C6D34674225820FB6F870883864A9B14
828501FE47A4E9282A7065CD1C234E8A3BCE46F49A1A9F581818DC08054C
462C7977EE90FA2B9DE62FF6D42E398CEE8168
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="esdh-aesctr-example"/>.</t>

<figure title="COSE_Encrypt Example for ES-DH" anchor="esdh-aesctr-example"><artwork><![CDATA[
96([
  / protected: / << {
    / alg / 1: -65534 / A128CTR /
  } >>,
  / unprotected: / {
    / IV / 5: h'DAE613B2E0DC55F4322BE38BDBA9DC68'
  },
  / payload: / null / detached ciphertext /,
  / recipients: / [
    [
      / protected: / << {
        / alg / 1: -29 / ECDH-ES + A128KW /
      } >>,
      / unprotected: / {
        / ephemeral key / -1: {
          / kty / 1: 2 / EC2 /,
          / crv / -1: 1 / P-256 /,
          / x / -2: h'CB2A8EEAF7E260F02AD5C29E4608939A6487E2172D239562819E5F52C6D34674',
          / y / -3: h'FB6F870883864A9B14828501FE47A4E9282A7065CD1C234E8A3BCE46F49A1A9F'
        }
      },
      / payload: / h'18DC08054C462C7977EE90FA2B9DE62FF6D42E398CEE8168'
        / CEK encrypted with KEK /
    ]
  ]
])
]]></artwork></figure>

<t>The encrypted payload (with a line feed added) was:</t>

<figure><artwork><![CDATA[
2BB8DB522AE978246CC775C3B0241BD4B0333FFDD2DB70C7EE7A4966E3B7
]]></artwork></figure>

</section>
</section>
<section anchor="aes-cbc"><name>AES-CBC</name>

<section anchor="introduction-5"><name>Introduction</name>

<t>AES-CBC is a non AEAD cipher, provides confidentiality but no integrity protection.
In AES-CBC, a single IV is used for encryption of firmware belonging to a single sector,
since individual AES blocks are chained together, as shown in <xref target="aes-cbc-fig"/>. The
numbering  of sectors in a slot MUST start with zero (0) and MUST increase by one with
every sector till the end of the slot is reached. The IV follows this numbering.</t>

<t>For example, let us assume the slot size of a specific flash controller on an IoT device
is 64 KiB, the sector size 4096 bytes (4 KiB) and AES-128-CBC uses an AES-block size of
128 bit (16 bytes). Hence, sector 0 needs 4096/16=256 AES-128-CBC operations using IV 0.
If the firmware image fills the entire slot, then that slot contains 16 sectors, i.e. IVs
ranging from 0 to 15.</t>

<figure title="AES-CBC Operation" anchor="aes-cbc-fig"><artset><artwork  type="svg"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="400" width="232" viewBox="0 0 232 400" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 40,112 L 40,192" fill="none" stroke="black"/>
<path d="M 72,48 L 72,104" fill="none" stroke="black"/>
<path d="M 72,200 L 72,256" fill="none" stroke="black"/>
<path d="M 104,112 L 104,192" fill="none" stroke="black"/>
<path d="M 120,64 L 120,224" fill="none" stroke="black"/>
<path d="M 160,112 L 160,192" fill="none" stroke="black"/>
<path d="M 192,48 L 192,104" fill="none" stroke="black"/>
<path d="M 192,200 L 192,256" fill="none" stroke="black"/>
<path d="M 224,112 L 224,192" fill="none" stroke="black"/>
<path d="M 48,64 L 80,64" fill="none" stroke="black"/>
<path d="M 120,64 L 200,64" fill="none" stroke="black"/>
<path d="M 40,112 L 104,112" fill="none" stroke="black"/>
<path d="M 160,112 L 224,112" fill="none" stroke="black"/>
<path d="M 40,192 L 104,192" fill="none" stroke="black"/>
<path d="M 160,192 L 224,192" fill="none" stroke="black"/>
<path d="M 72,224 L 120,224" fill="none" stroke="black"/>
<path d="M 24,384 L 40,384" fill="none" stroke="black"/>
<g class="text">
<text x="68" y="36">P1</text>
<text x="196" y="36">P2</text>
<text x="36" y="68">IV</text>
<text x="24" y="164">k--</text>
<text x="64" y="164">E</text>
<text x="144" y="164">k--</text>
<text x="184" y="164">E</text>
<text x="76" y="276">C1</text>
<text x="196" y="276">C2</text>
<text x="32" y="308">Legend:</text>
<text x="28" y="324">Pi</text>
<text x="48" y="324">=</text>
<text x="96" y="324">Plaintext</text>
<text x="164" y="324">blocks</text>
<text x="28" y="340">Ci</text>
<text x="48" y="340">=</text>
<text x="100" y="340">Ciphertext</text>
<text x="172" y="340">blocks</text>
<text x="24" y="356">E</text>
<text x="40" y="356">=</text>
<text x="92" y="356">Encryption</text>
<text x="172" y="356">function</text>
<text x="24" y="372">k</text>
<text x="40" y="372">=</text>
<text x="88" y="372">Symmetric</text>
<text x="144" y="372">key</text>
<text x="56" y="388">=</text>
<text x="80" y="388">XOR</text>
<text x="136" y="388">operation</text>
</g>
</svg>
</artwork><artwork  type="ascii-art"><![CDATA[
       P1              P2
        |              |
   IV--(+)    +-------(+)
        |     |        |
        |     |        |
    +-------+ |    +-------+
    |       | |    |       |
    |       | |    |       |
 k--|  E    | | k--|  E    |
    |       | |    |       |
    +-------+ |    +-------+
        |     |        |
        +-----+        |
        |              |
        |              |
        C1             C2

Legend: 
  Pi = Plaintext blocks
  Ci = Ciphertext blocks
  E = Encryption function
  k = Symmetric key
  (+) = XOR operation
]]></artwork></artset></figure>

<t>Examples in this section uses the following parameters:
- Algorithm for payload encryption: AES-CTR-128
  - k: h'627FCF0EA82C967D5ED8981EB325F303'
  - IV: h'93702C81590F845D9EC866CCAC767BD1'
- Plaintext: "This is a real firmware image."
  - in hex: 546869732069732061207265616C206669726D7761726520696D6167652E</t>

</section>
<section anchor="aes-kw-aes-cbc-example"><name>AES-KW + AES-CBC Example</name>

<t>This example uses the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm id for key wrap: A128KW</t>
  <t>KEK COSE_Key (Secret Key):
  <list style="symbols">
      <t>kty: Symmetric</t>
      <t>k: 'aaaaaaaaaaaaaaaa'</t>
      <t>kid: 'kid-1'</t>
    </list></t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608445A10139FFFAA1055093702C81590F845D9EC866CCAC767BD1F681
8341A0A2012204456B69642D315818E198FF269626EC43299D33586FC7B2
646B13292261160422
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="aeskw-aescbc-example"/>.</t>

<figure title="COSE_Encrypt Example for AES Key Wrap" anchor="aeskw-aescbc-example"><artwork><![CDATA[
96([
  / protected: / << {
    / alg / 1: -65531 / A128CBC /
  } >>,
  / unprotected: / {
    / IV / 5: h'93702C81590F845D9EC866CCAC767BD1'
  },
  / payload: / null / detached ciphertext /,
  / recipients: / [
    [
      / protected: / << {
      } >>,
      / unprotected: / {
        / alg / 1: -3 / A128KW /,
        / kid / 4: 'kid-1'
      },
      / payload: /
        h'E198FF269626EC43299D33586FC7B2646B13292261160422'
        / CEK encrypted with KEK /
    ]
  ]
])
]]></artwork></figure>

<t>The encrypted payload (with a line feed added) was:</t>

<figure><artwork><![CDATA[
9C09156CF4ACE0401086D98586E0B09FA5B5CF78F2BCCBF6C914DDB42BF0
E21E
]]></artwork></figure>

</section>
<section anchor="ecdh-esaes-kw-aes-cbc-example"><name>ECDH-ES+AES-KW + AES-CBC Example</name>

<t>This example uses the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm for content key distribution: ECDH-ES + A128KW</t>
  <t>KEK COSE_Key (Receiver's Private Key):
  <list style="symbols">
      <t>kty: EC2</t>
      <t>crv: P-256</t>
      <t>x: h'5886CD61DD875862E5AAA820E7A15274C968A9BC96048DDCACE32F50C3651BA3'</t>
      <t>y: h'9EED8125E932CD60C0EAD3650D0A485CF726D378D1B016ED4298B2961E258F1B'</t>
      <t>d: h'60FE6DD6D85D5740A5349B6F91267EEAC5BA81B8CB53EE249E4B4EB102C476B3'</t>
      <t>kid: 'kid-2'</t>
    </list></t>
  <t>KDF Context
  <list style="symbols">
      <t>ALgorithm ID: -3 (A128KW)</t>
      <t>SuppPubInfo
      <list style="symbols">
          <t>keyDataLength: 128</t>
          <t>protected = &lt;&lt; { / alg / 1: -3 / A128KW / } &gt;&gt;</t>
          <t>other = 'SUIT Payload Encryption'</t>
        </list></t>
    </list></t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608445A10139FFFAA10550DAE613B2E0DC55F4322BE38BDBA9DC68F681
8344A101381CA120A401022001215820BE4FB61E951F0378F453B610C91D
DD29EF00CD36A0957F9686AC7D693E8880A32258200DF7D9253B34FC0247
A11E15F20281680447896BE91B65E1D1E06D3E5FC57B0A581832970E4511
E3709F118B838C5EDD62A05A1421558CE56C20
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="esdh-aescbc-example"/>.</t>

<figure title="COSE_Encrypt Example for ES-DH" anchor="esdh-aescbc-example"><artwork><![CDATA[
96([
  / protected: / << {
    / alg / 1: -65531 / A128CBC /
  } >>,
  / unprotected: / {
    / IV / 5: h'DAE613B2E0DC55F4322BE38BDBA9DC68'
  },
  / payload: / null / detached ciphertext /,
  / recipients: / [
    [
      / protected: / << {
        / alg / 1: -29 / ECDH-ES + A128KW /
      } >>,
      / unprotected: / {
        / ephemeral key / -1: {
          / kty / 1: 2 / EC2 /,
          / crv / -1: 1 / P-256 /,
          / x / -2: h'BE4FB61E951F0378F453B610C91DDD29EF00CD36A0957F9686AC7D693E8880A3',
          / y / -3: h'0DF7D9253B34FC0247A11E15F20281680447896BE91B65E1D1E06D3E5FC57B0A'
        }
      },
      / payload: / h'32970E4511E3709F118B838C5EDD62A05A1421558CE56C20'
        / CEK encrypted with KEK /
    ]
  ]
])
]]></artwork></figure>

<t>The encrypted payload (with a line feed added) was:</t>

<figure><artwork><![CDATA[
9C09156CF4ACE0401086D98586E0B09FA5B5CF78F2BCCBF6C914DDB42BF0
E21E
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="integrity-check-on-encrypted-and-decrypted-payloads"><name>Integrity Check on Encrypted and Decrypted Payloads</name>

<t>In addition to suit-condition-image-match (Section 8.4.9.2 of 
<xref target="I-D.ietf-suit-manifest"/>),
AEAD algorithms used for content encryption provides another way
to validate the integrity of components.
This section provides a guideline to construct secure but not redundant
SUIT Manifest for encrypted payloads.</t>

<section anchor="validating-payload-integrity"><name>Validating Payload Integrity</name>

<t>With encrypted payloads, validating them is also a way
to validate the integrity of components.
This sub-section explains three way to do it.</t>

<section anchor="image-match-after-decryption"><name>Image Match after Decryption</name>

<t>This is the basic one, that conducts suit-condition-image-match on plaintext payload after decryption.
Example command sequences are shown in <xref target="_figure-image-match-after-decryption"/>.</t>

<figure title="Check Image Match After Decryption" anchor="_figure-image-match-after-decryption"><artwork><![CDATA[
/ directive-set-component-index / 12, 1,
/ directive-override-parameters / 20, {
  / parameter-uri / 21: "http://example.com/encrypted.bin"
},
/ directive-fetch / 21, 15,

/ directive-set-component-index / 12, 0,
/ directive-override-parameters / 20, {
  / parameter-image-digest / 3: << {
    / algorithm-id: / -16 / SHA256 /,
    / digest-bytes: / h'3B1...92A' / digest of plaintext payload /
  } >>,
  / parameter-image-size / 14: 30 / size of plaintext payload /,
  / parameter-encryption-info / 19: h'369...50F',
  / parameter-source-component / 22: 1
},
/ directive-copy / 22, 15,
/ condition-image-match / 3, 15 / integrity check on decrypted payload /,
]]></artwork></figure>

</section>
<section anchor="image-match-before-decryption"><name>Image Match before Decryption</name>

<t>With encrypted payloads, suit-condition-image-match on encrypted payload
before decryption is also available if it is stored in a component.
Example command sequences are shown in <xref target="_figure-image-match-before-decryption"/>.
This option mitigates battery exhaustion attacks (See <xref target="sec-cons"/>).</t>

<figure title="Check Image Match Before Decryption" anchor="_figure-image-match-before-decryption"><artwork><![CDATA[
/ directive-set-component-index / 12, 1,
/ directive-override-parameters / 20, {
  / parameter-image-digest / 3: << {
    / algorithm-id: / -16 / SHA256 /,
    / digest-bytes: / h'8B4...D34' / digest of encrypted payload /
  } >>,
  / parameter-image-size / 14: 30 / size of encrypted payload /,
  / parameter-uri / 21: "http://example.com/encrypted.bin"
},
/ directive-fetch / 21, 15,
/ condition-image-match / 3, 15 / integrity check on encrypted payload /,

/ directive-set-component-index / 12, 0,
/ directive-override-parameters / 20, {
  / parameter-encryption-info / 19: h'D86...1F0',
  / parameter-source-component / 22: 1
},
/ directive-copy / 22, 15,
]]></artwork></figure>

</section>
<section anchor="checking-authentication-tag-while-decryption"><name>Checking Authentication Tag while Decryption</name>

<t>AEAD encryption algorithms such as AES-GCM and ChaCha20/Poly1305 provide authenticated tags.
Recipients can authenticate that the tag is created by the sender
and validate the integrity of decrypted payload with it.
With AEAD encryption algorithm, validating integrity after decryption is redundant and not required.</t>

</section>
</section>
<section anchor="payload-integrity-in-suit-manifest"><name>Payload Integrity in SUIT Manifest</name>

<t>This sub-section provides a guideline to decide
how to validate the integrity of the payloads with SUIT Manifest.
Figure <xref target="payload-integrity-classification-tree"/> illustrates a classification tree
to decide how to establish payload integrity.</t>

<figure title="Classification Tree: Appropriate Location of Image Match" anchor="payload-integrity-classification-tree"><artset><artwork  type="svg"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="400" width="408" viewBox="0 0 408 400" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,64" fill="none" stroke="black"/>
<path d="M 8,352 L 8,368" fill="none" stroke="black"/>
<path d="M 24,64 L 24,328" fill="none" stroke="black"/>
<path d="M 64,240 L 64,272" fill="none" stroke="black"/>
<path d="M 80,272 L 80,328" fill="none" stroke="black"/>
<path d="M 96,352 L 96,368" fill="none" stroke="black"/>
<path d="M 136,128 L 136,176" fill="none" stroke="black"/>
<path d="M 136,352 L 136,368" fill="none" stroke="black"/>
<path d="M 152,176 L 152,232" fill="none" stroke="black"/>
<path d="M 192,272 L 192,328" fill="none" stroke="black"/>
<path d="M 208,240 L 208,272" fill="none" stroke="black"/>
<path d="M 248,352 L 248,368" fill="none" stroke="black"/>
<path d="M 288,352 L 288,368" fill="none" stroke="black"/>
<path d="M 384,64 L 384,120" fill="none" stroke="black"/>
<path d="M 384,176 L 384,328" fill="none" stroke="black"/>
<path d="M 400,32 L 400,64" fill="none" stroke="black"/>
<path d="M 400,128 L 400,176" fill="none" stroke="black"/>
<path d="M 400,352 L 400,368" fill="none" stroke="black"/>
<path d="M 8,32 L 400,32" fill="none" stroke="black"/>
<path d="M 8,64 L 400,64" fill="none" stroke="black"/>
<path d="M 136,128 L 400,128" fill="none" stroke="black"/>
<path d="M 136,176 L 400,176" fill="none" stroke="black"/>
<path d="M 64,240 L 208,240" fill="none" stroke="black"/>
<path d="M 64,272 L 208,272" fill="none" stroke="black"/>
<path d="M 24,336 L 80,336" fill="none" stroke="black"/>
<path d="M 152,336 L 232,336" fill="none" stroke="black"/>
<path d="M 304,336 L 384,336" fill="none" stroke="black"/>
<path d="M 24,384 L 80,384" fill="none" stroke="black"/>
<path d="M 152,384 L 232,384" fill="none" stroke="black"/>
<path d="M 304,384 L 384,384" fill="none" stroke="black"/>
<path d="M 24,336 C 15.16936,336 8,343.16936 8,352" fill="none" stroke="black"/>
<path d="M 80,336 C 88.83064,336 96,343.16936 96,352" fill="none" stroke="black"/>
<path d="M 152,336 C 143.16936,336 136,343.16936 136,352" fill="none" stroke="black"/>
<path d="M 232,336 C 240.83064,336 248,343.16936 248,352" fill="none" stroke="black"/>
<path d="M 304,336 C 295.16936,336 288,343.16936 288,352" fill="none" stroke="black"/>
<path d="M 384,336 C 392.83064,336 400,343.16936 400,352" fill="none" stroke="black"/>
<path d="M 24,384 C 15.16936,384 8,376.83064 8,368" fill="none" stroke="black"/>
<path d="M 80,384 C 88.83064,384 96,376.83064 96,368" fill="none" stroke="black"/>
<path d="M 152,384 C 143.16936,384 136,376.83064 136,368" fill="none" stroke="black"/>
<path d="M 232,384 C 240.83064,384 248,376.83064 248,368" fill="none" stroke="black"/>
<path d="M 304,384 C 295.16936,384 288,376.83064 288,368" fill="none" stroke="black"/>
<path d="M 384,384 C 392.83064,384 400,376.83064 400,368" fill="none" stroke="black"/>
<polygon class="arrowhead" points="392,328 380,322.4 380,333.6 " fill="black" transform="rotate(90,384,328)"/>
<polygon class="arrowhead" points="392,120 380,114.4 380,125.6 " fill="black" transform="rotate(90,384,120)"/>
<polygon class="arrowhead" points="200,328 188,322.4 188,333.6 " fill="black" transform="rotate(90,192,328)"/>
<polygon class="arrowhead" points="160,232 148,226.4 148,237.6 " fill="black" transform="rotate(90,152,232)"/>
<polygon class="arrowhead" points="88,328 76,322.4 76,333.6 " fill="black" transform="rotate(90,80,328)"/>
<polygon class="arrowhead" points="32,328 20,322.4 20,333.6 " fill="black" transform="rotate(90,24,328)"/>
<g class="text">
<text x="136" y="52">Q1.</text>
<text x="184" y="52">Payload</text>
<text x="252" y="52">Delivery</text>
<text x="44" y="100">in</text>
<text x="88" y="100">Content</text>
<text x="348" y="100">others</text>
<text x="200" y="148">Q2.</text>
<text x="252" y="148">Mitigate</text>
<text x="320" y="148">Battery</text>
<text x="236" y="164">Exhaustion</text>
<text x="312" y="164">Attacks</text>
<text x="172" y="212">No</text>
<text x="360" y="212">Yes</text>
<text x="88" y="260">Q3.</text>
<text x="124" y="260">AEAD</text>
<text x="172" y="260">cipher</text>
<text x="104" y="308">Yes</text>
<text x="172" y="308">No</text>
<text x="48" y="356">NOT</text>
<text x="192" y="356">AFTER</text>
<text x="340" y="356">BEFORE</text>
<text x="52" y="372">Required</text>
<text x="188" y="372">Decryption</text>
<text x="340" y="372">Decryption</text>
</g>
</svg>
</artwork><artwork  type="ascii-art"><![CDATA[
+------------------------------------------------+
|              Q1. Payload Delivery              |
+-+--------------------------------------------+-+
  |                                            |
  | in Content                          others |
  |                                            v
  |             +--------------------------------+
  |             |      Q2. Mitigate Battery      |
  |             |       Exhaustion Attacks       |
  |             +-+----------------------------+-+
  |               |                            |
  |               | No                     Yes |
  |               v                            |
  |    +-----------------+                     |
  |    | Q3. AEAD cipher |                     |
  |    +-+-------------+-+                     |
  |      |             |                       |
  |      | Yes      No |                       |
  v      v             v                       v
 .+------+.      .-----+-----.      .----------+.
|   NOT    |    |    AFTER    |    |   BEFORE    |
| Required |    | Decryption  |    | Decryption  |
 '--------'      '-----------'      '-----------'
]]></artwork></artset></figure>

<t>There are mainly three conditions:</t>

<t><list style="symbols">
  <t>Q1. How does Recipient Get the Encrypted Payload?
If the encrypted payload are in the content,
its integrity is already validated with suit-authentication-wrapper,
so additional integrity check is not required.</t>
  <t>Q2. Does Sender want to Mitigate Battery Exhaustion Attacks?
If yes, the encrypted payload can be validated before decryption to mitigate 
battery exhaustion attacks.</t>
  <t>Q3. Does Sender encrypt the plaintext payload with AEAD cipher?
If yes, additional integrity check is not required because Recipient validates
integrity of the payload while decrypting it. If no, validating its integrity
is RECOMMENDED after/before decryption.</t>
</list></t>

</section>
</section>
<section anchor="flash"><name>Firmware Updates on IoT Devices with Flash Memory</name>

<t>There are many flavors of embedded devices, the market is large and fragmented.
Hence, it is likely that some implementations and deployments implement their
firmware update procedure differently than described below. On a positive note,
the SUIT manifest allows different deployment scenarios to be supported easily
thanks to the "scripting" functionality offered by the commands.</t>

<t>This section is specific to firmware images on microcontrollers and does
not apply to generic software, configuration data, and machine learning models. 
The differences are the result of two aspects:</t>

<t><list style="symbols">
  <t>Use of flash memory: Flash memory on microcontrollers is a type of non-volatile
memory that erases data in larger units called blocks, pages, or sectors and
re-writes data at the byte level (often 4-bytes) or larger units. Flash memory
is furthermore segmented into different memory regions, which store the
bootloader, different versions of firmware images (in so-called slots), and
configuration data. <xref target="image-layout"/> shows an example layout of a microcontroller
flash area.</t>
  <t>Microcontroller Design: Code on microcontrollers cannot be executed from an
arbitrary place in flash memory, execute-in-place, without extra software
development and design efforts. Hence, developers often compile firmware such
that the bootloader can execute the code from a specific location in flash
memory. Often, the primary slot is used for this purpose.</t>
</list></t>

<t>When the encrypted firmware image has been transferred to the device, it will
typically be stored in a staging area, in the secondary slot in our example.</t>

<t>At the next boot, the bootloader will recognize a new firmware image and will
start decrypting the downloaded image sector-by-sector and will swap it with
the image found in the primary slot. This approach of swapping the newly
downloaded image with the previously valid image requires two slots to allow
the update to be reversed in case the newly obtained firmware image fails to
boot. This adds robustness to the firmware update procedure.</t>

<t>The swap will only take place after the signature on the plaintext is verified.
Note that the plaintext firmware image is available in the primary slot only after
the swap has been completed, unless "dummy decrypt" is used to compute the hash
over the plaintext prior to executing the decrypt operation during a swap.
Dummy decryption here refers to the decryption of the firmware image found in
the secondary slot sector-by-sector and computing a rolling hash over the resulting
plaintext firmware image (also sector-by-sector) without performing the swap operation.
While there are performance optimizations possible, such as conveying hashes for
each sector in the manifest rather than a hash of the entire firmware image,
such optimizations are not described in this specification.</t>

<t>Without support for hardware-based, on-the-fly decryption the image in primary
slot is available in cleartext, it may need to be re-encrypted before copying it
to the secondary slot. This may be necessary when the secondary slot has different
access permissions or when the staging area is located in off-chip flash memory and
is therefore more vulnerable to physical attacks.</t>

<figure title="Example Flash Area Layout" anchor="image-layout"><artset><artwork  type="svg"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="544" width="424" viewBox="0 0 424 544" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,528" fill="none" stroke="black"/>
<path d="M 416,32 L 416,528" fill="none" stroke="black"/>
<path d="M 8,32 L 416,32" fill="none" stroke="black"/>
<path d="M 8,64 L 416,64" fill="none" stroke="black"/>
<path d="M 8,256 L 416,256" fill="none" stroke="black"/>
<path d="M 8,448 L 416,448" fill="none" stroke="black"/>
<path d="M 8,496 L 416,496" fill="none" stroke="black"/>
<path d="M 8,528 L 416,528" fill="none" stroke="black"/>
<g class="text">
<text x="60" y="52">Bootloader</text>
<text x="48" y="84">Primary</text>
<text x="100" y="84">Slot</text>
<text x="360" y="100">(sector</text>
<text x="404" y="100">1)</text>
<text x="212" y="116">..................................................</text>
<text x="360" y="148">(sector</text>
<text x="404" y="148">2)</text>
<text x="212" y="164">..................................................</text>
<text x="360" y="196">(sector</text>
<text x="404" y="196">3)</text>
<text x="212" y="212">..................................................</text>
<text x="360" y="244">(sector</text>
<text x="404" y="244">4)</text>
<text x="56" y="276">Secondary</text>
<text x="116" y="276">Slot</text>
<text x="360" y="292">(sector</text>
<text x="404" y="292">1)</text>
<text x="212" y="308">..................................................</text>
<text x="360" y="340">(sector</text>
<text x="404" y="340">2)</text>
<text x="212" y="356">..................................................</text>
<text x="360" y="388">(sector</text>
<text x="404" y="388">3)</text>
<text x="212" y="404">..................................................</text>
<text x="360" y="436">(sector</text>
<text x="404" y="436">4)</text>
<text x="36" y="468">Swap</text>
<text x="76" y="468">Area</text>
<text x="72" y="516">Configuration</text>
<text x="148" y="516">Data</text>
</g>
</svg>
</artwork><artwork  type="ascii-art"><![CDATA[
+--------------------------------------------------+
| Bootloader                                       |
+--------------------------------------------------+
| Primary Slot                                     |
|                                        (sector 1)|
|..................................................|
|                                                  |
|                                        (sector 2)|
|..................................................|
|                                                  |
|                                        (sector 3)|
|..................................................|
|                                                  |
|                                        (sector 4)|
+--------------------------------------------------+
| Secondary Slot                                   |
|                                        (sector 1)|
|..................................................|
|                                                  |
|                                        (sector 2)|
|..................................................|
|                                                  |
|                                        (sector 3)|
|..................................................|
|                                                  |
|                                        (sector 4)|
+--------------------------------------------------+
| Swap Area                                        |
|                                                  |
+--------------------------------------------------+
| Configuration Data                               |
+--------------------------------------------------+
]]></artwork></artset></figure>

<t>The ability to restart an interrupted firmware update is often a requirement
for low-end IoT devices. To fulfill this requirement it is necessary to chunk
a firmware image into sectors and to encrypt each sector individually
using a cipher that does not increase the size of the resulting ciphertext
(i.e., by not adding an authentication tag after each encrypted block).</t>

<t>When an update gets aborted while the bootloader is decrypting the newly obtained
image and swapping the sectors, the bootloader can restart where it left off. This
technique offers robustness and better performance.</t>

<t>For this purpose, ciphers without integrity protection are used to encrypt the
firmware image. Integrity protection of the firmware image MUST be provided
and the suit-parameter-image-digest, defined in Section 8.4.8.6 of
<xref target="I-D.ietf-suit-manifest"/>, MUST be used.</t>

<t><xref target="RFC9459"/> registers AES Counter (AES-CTR) mode and AES Cipher Block Chaining
(AES-CBC) ciphers that do not offer integrity protection. These ciphers are useful
for use cases that require firmware encryption on IoT devices. For many other use
cases where software packages, configuration information or personalization data
need to be encrypted, the use of Authenticated Encryption with Associated Data
(AEAD) ciphers is RECOMMENDED.</t>

<t>The following sub-sections provide further information about the initialization vector
(IV) selection for use with AES-CBC and AES-CTR in the firmware encryption context. An
IV MUST NOT be re-used when the same key is used. For this application, the IVs are
not random but rather based on the slot/sector-combination in flash memory. The
text below assumes that the block-size of AES is (much) smaller than the sector size. The
typical sector-size of flash memory is in the order of KiB. Hence, multiple AES blocks
need to be decrypted until an entire sector is completed.</t>

</section>
<section anchor="complete-examples"><name>Complete Examples</name>

<t>The following manifests exemplify how to deliver encrypted payload and its
encryption info to devices.</t>

<t>HMAC-256 MAC are added in AES-KW examples using the following secret key:</t>

<figure><artwork><![CDATA[
  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
  (616161... in hex, and its length is 32)
]]></artwork></figure>

<t>ES-DH examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA-256 as the digest function.</t>

<section anchor="example-AES-KW-write"><name>AES Key Wrap Example with Write Directive</name>

<t>The following SUIT manifest requests a parser
to authenticate the manifest with COSE_Mac0 HMAC256,
and to write and to decrypt the
encrypted payload into a component with the suit-directive-write
directive.</t>

<t>The SUIT manifest in diagnostic notation (with line breaks added
for readability) is shown here:</t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'536EC695E423342FF57FA89B3E3C12C0
                          F9257992F7D96F017281782D2DF1C50F'
    ] >>,
    << / COSE_Mac0_Tagged / 17([
      / protected: / << {
        / algorithm-id / 1: 5 / HMAC256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / tag: / h'3B70571169B0FEE5E6220BF86E5E973F
                 7F32875495908EDAA91EC994BCA44B29'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 1,
    / common / 3: << {
      / components / 2: [
        ['plaintext-firmware']
      ]
    } >>,
    / install / 17: << [
      / fetch encrypted firmware /
      / directive-override-parameters / 20, {
        / parameter-content / 18:
          h'2F59C3A34D9570FB99A5382E66466A3221A8AD85CE508B
            A306FB431A60EFA5AAAA078355070205A4B196832DF17F',
        / parameter-encryption-info / 19: << 96([
          / protected: / << {
            / alg / 1: 1 / AES-GCM-128 /
          } >>,
          / unprotected: / {
            / IV / 5: h'F14AAB9D81D51F7AD943FE87AF4F70CD'
          },
          / payload: / null / detached ciphertext /,
          / recipients: / [
            [
              / protected: / << {
              } >>,
              / unprotected: / {
                / alg / 1: -3 / A128KW /,
                / kid / 4: 'kid-1'
              },
              / payload: /
                h'75603FFC9518D794713C8CA8A115A7FB32565A6D59534D62'
                / CEK encrypted with KEK /
            ]
          ]
        ]) >>
      },

      / decrypt encrypted firmware /
      / directive-write / 18, 15
        / consumes the SUIT_Encryption_Info above /
    ] >>
  } >>
})
]]></artwork></figure>

<t>In hex format, the SUIT manifest is this:</t>

<figure><artwork><![CDATA[
D86BA2025853825824822F5820536EC695E423342FF57FA89B3E3C12C0F9
257992F7D96F017281782D2DF1C50F582AD18443A10105A0F658203B7057
1169B0FEE5E6220BF86E5E973F7F32875495908EDAA91EC994BCA44B2903
589DA4010102010357A102818152706C61696E746578742D6669726D7761
726511587C8414A212582E2F59C3A34D9570FB99A5382E66466A3221A8AD
85CE508BA306FB431A60EFA5AAAA078355070205A4B196832DF17F135843
D8608443A10101A10550F14AAB9D81D51F7AD943FE87AF4F70CDF6818341
A0A2012204456B69642D31581875603FFC9518D794713C8CA8A115A7FB32
565A6D59534D62120F
]]></artwork></figure>

</section>
<section anchor="example-AES-KW-copy"><name>AES Key Wrap Example with Fetch + Copy Directives</name>

<t>The following SUIT manifest requests a parser to fetch the encrypted
payload and to stores it. Then, the payload is decrypted and stored into
another component with the suit-directive-copy directive. This approach
works well on constrained devices with execute-in-place flash memory.</t>

<t>The SUIT manifest in diagnostic notation (with line breaks added for
readability) is shown here:</t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'AAB6A7868C4E43D5983BDE019EF22779
                          21F6F8EF1FCAF9403CA97255BED2CD30'
    ] >>,
    << / COSE_Mac0_Tagged / 17([
      / protected: / << {
        / algorithm-id / 1: 5 / HMAC256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / tag: / h'93B4B774A5D0421ED6FB5EBF890A284C
                 DAC7816CBC048BF47EE7FA7FF3BC02C3'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 1,
    / common / 3: << {
      / components / 2: [
        ['plaintext-firmware'],
        ['encrypted-firmware']
      ]
    } >>,
    / install / 17: << [
      / fetch encrypted firmware /
      / directive-set-component-index / 12, 1 / ['encrypted-firmware'] /,
      / directive-override-parameters / 20, {
        / parameter-image-size / 14: 46,
        / parameter-uri / 21: "https://example.com/encrypted-firmware"
      },
      / directive-fetch / 21, 15,

      / decrypt encrypted firmware /
      / directive-set-component-index / 12, 0 / ['plaintext-firmware'] /,
      / directive-override-parameters / 20, {
        / parameter-encryption-info / 19: << 96([
          / protected: / << {
            / alg / 1: 1 / AES-GCM-128 /
          } >>,
          / unprotected: / {
            / IV / 5: h'F14AAB9D81D51F7AD943FE87AF4F70CD'
          },
          / payload: / null / detached ciphertext /,
          / recipients: / [
            [
              / protected: / << {
              } >>,
              / unprotected: / {
                / alg / 1: -3 / A128KW /,
                / kid / 4: 'kid-1'
              },
              / payload: /
                h'75603FFC9518D794713C8CA8A115A7FB32565A6D59534D62'
                / CEK encrypted with KEK /
            ]
          ]
        ]) >>,
        / parameter-source-component / 22: 1 / ['encrypted-firmware'] /
      },
      / directive-copy / 22, 15 / consumes the SUIT_Encryption_Info above /
    ] >>
  } >>
})
]]></artwork></figure>

<t>In hex format, the SUIT manifest is this:</t>

<figure><artwork><![CDATA[
D86BA2025853825824822F5820AAB6A7868C4E43D5983BDE019EF2277921
F6F8EF1FCAF9403CA97255BED2CD30582AD18443A10105A0F6582093B4B7
74A5D0421ED6FB5EBF890A284CDAC7816CBC048BF47EE7FA7FF3BC02C303
58B7A40101020103582BA102828152706C61696E746578742D6669726D77
6172658152656E637279707465642D6669726D776172651158818C0C0114
A20E182E15782668747470733A2F2F6578616D706C652E636F6D2F656E63
7279707465642D6669726D77617265150F0C0014A2135843D8608443A101
01A10550F14AAB9D81D51F7AD943FE87AF4F70CDF6818341A0A201220445
6B69642D31581875603FFC9518D794713C8CA8A115A7FB32565A6D59534D
621601160F
]]></artwork></figure>

</section>
<section anchor="example-ES-DH-write"><name>ES-DH Example with Write + Copy Directives</name>

<t>The following SUIT manifest requests a parser to authenticate
the manifest with COSE_Sign1 ES256,
and to write and to decrypt the
encrypted payload into a component with the suit-directive-write
directive.</t>

<t>The SUIT manifest in diagnostic notation (with line breaks added for
readability) is shown here:</t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'CEF034223D7F2C39D676876995B4ED4E
                          8221AC5BF184B6606EE62C41C149C266'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: /
        h'65E59AAB8A35BDE9547458316D1C769F
          FB2CEA304C9FB6151E5C8A88A002A292
          C5B8C63C81B5AC0AE31948B610834E12
          CBDBB2753EA221544B6733076A92EE20'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 1,
    / common / 3: << {
      / components / 2: [
        ['decrypted-firmware']
      ]
    } >>,
    / install / 17: << [
      / directive-set-component-index / 12, 0
        / ['plaintext-firmware'] /,
      / directive-override-parameters / 20, {
        / parameter-content / 18:
          h'344FA2D5AD2F43F6F363DA6FF2C337FE69E33E3D63714D
            23985BF02499EB0E8B231D45C378245DA3611C160CC511',
        / parameter-encryption-info / 19: << 96([
          / protected: / << {
            / alg / 1: 1 / AES-GCM-128 /
          } >>,
          / unprotected: / {
            / IV / 5: h'DAE613B2E0DC55F4322BE38BDBA9DC68'
          },
          / payload: / null / detached ciphertext /,
          / recipients: / [
            [
              / protected: / << {
                / alg / 1: -29 / ECDH-ES + A128KW /
              } >>,
              / unprotected: / {
                / ephemeral key / -1: {
                  / kty / 1: 2 / EC2 /,
                  / crv / -1: 1 / P-256 /,
                  / x / -2: h'FF6E266DABAF51B7207569E31CF72646
                              183E94CEE64FCDC8695AD9A505AEFDEA',
                  / y / -3: h'5FBC4A29844450B3AC22AB30C7F7004B
                              B59D8BD60D7997734A9FA0124B650895'
                },
                / kid / 4: 'kid-2'
              },
              / payload: /
                h'B0E21628283F3E409F8158D8FFCA567F340E379AC39E49C9'
                / CEK encrypted with KEK /
            ]
          ]
        ]) >>
      },
      / directive-write / 18, 15
        / consumes the SUIT_Encryption_Info above /
    ] >>
  } >>
})
]]></artwork></figure>

<t>In hex format, the SUIT manifest is this:</t>

<figure><artwork><![CDATA[
D86BA2025873825824822F5820CEF034223D7F2C39D676876995B4ED4E82
21AC5BF184B6606EE62C41C149C266584AD28443A10126A0F6584065E59A
AB8A35BDE9547458316D1C769FFB2CEA304C9FB6151E5C8A88A002A292C5
B8C63C81B5AC0AE31948B610834E12CBDBB2753EA221544B6733076A92EE
200358ECA4010102010357A1028181526465637279707465642D6669726D
776172651158CB860C0014A212582E344FA2D5AD2F43F6F363DA6FF2C337
FE69E33E3D63714D23985BF02499EB0E8B231D45C378245DA3611C160CC5
11135890D8608443A10101A10550DAE613B2E0DC55F4322BE38BDBA9DC68
F6818344A101381CA220A401022001215820FF6E266DABAF51B7207569E3
1CF72646183E94CEE64FCDC8695AD9A505AEFDEA2258205FBC4A29844450
B3AC22AB30C7F7004BB59D8BD60D7997734A9FA0124B65089504456B6964
2D325818B0E21628283F3E409F8158D8FFCA567F340E379AC39E49C9120F
]]></artwork></figure>

</section>
<section anchor="example-ES-DH-dependency"><name>ES-DH Example with Dependency</name>

<t>The following SUIT manifest requests a parser
to resolve the delegation chain and dependency respectively.
The parser validates the COSE_Key in the suit-delegation section using the key above,
and then dynamically trusts it.
The dependency manifest is embedded as an integrated-dependency
and referred by uri "#dependency-manifest" .</t>

<t>The SUIT manifest in diagnostic notation (with line breaks added for
readability) is shown here:</t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / delegation / 1: << [
    [
      / NOTE: signed by trust anchor /
      << 18([
        / protected: / << {
          / alg / 1: -7 / ES256 /
        } >>,
        / unprotected / {
        },
        / payload: / << {
          / cnf / 8: {
            / NOTE: public key of delegated authority /
            / COSE_Key / 1: {
              / kty / 1: 2 / EC2 /,
              / crv / -1: 1 / P-256 /,
              / x / -2: h'0E908AA8F066DB1F084E0C3652C63952
                          BD99F2A5BDB22F9E01367AAD03ABA68B',
              / y / -3: h'77DA1BD8AC4F0CB490BA210648BF79AB
                          164D49AD3551D71D314B2749EE42D29A'
            }
          }
        } >>,
        / signature: /
          h'FB2D5ACF66B9C8573CE92E13BFB8D113
            F798715CC10B5A0010B11925C155E724
            5A64E131073B87AC50CAC71650A21315
            B82D06CA2298CD1A95519AAE4C4B5315'
      ]) >>
    ]
  ] >>,
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'6A1D9F42E7B4047D2F54046019AE3ED4
                          3A8ACC467AC16576B17D6F8E633042D2'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: /
        h'DF493BDBF167EFFB40593C5910D33B66
          429721467DF05800EA66A88B91729CD5
          1007981F151FC324745FF43E6F75AAF5
          197DD5EC4AA6BCEFCE43E4B1E35C948E'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 1,
    / common / 3: << {
      / dependencies / 1: {
        / component-index / 1: {
          / dependency-prefix / 1: [
             'dependency-manifest.suit'
          ]
        }
      },
      / components / 2: [
        ['decrypted-firmware']
      ]
    } >>,
    / manifest-component-id / 5: [
      'dependent-manifest.suit'
    ],
    / install / 17: << [
      / NOTE: set SUIT_Encryption_Info /
      / directive-set-component-index / 12, 0
        / ['decrypted-firmware'] /,
      / directive-override-parameters / 20, {
        / parameter-content / 18:
          h'344FA2D5AD2F43F6F363DA6FF2C337FE69E33E3D63714D
            23985BF02499EB0E8B231D45C378245DA3611C160CC511',
        / parameter-encryption-info / 19: << 96([
          / protected: / << {
            / alg / 1: 1 / AES-GCM-128 /
          } >>,
          / unprotected: / {
            / IV / 5: h'DAE613B2E0DC55F4322BE38BDBA9DC68'
          },
          / payload: / null / detached ciphertext /,
          / recipients: / [
            [
              / protected: / << {
                / alg / 1: -29 / ECDH-ES + A128KW /
              } >>,
              / unprotected: / {
                / ephemeral key / -1: {
                  / kty / 1: 2 / EC2 /,
                  / crv / -1: 1 / P-256 /,
                  / x / -2: h'FF6E266DABAF51B7207569E31CF72646
                              183E94CEE64FCDC8695AD9A505AEFDEA',
                  / y / -3: h'5FBC4A29844450B3AC22AB30C7F7004B
                              B59D8BD60D7997734A9FA0124B650895'
                },
                / kid / 4: 'kid-2'
              },
              / payload: /
                h'B0E21628283F3E409F8158D8FFCA567F340E379AC39E49C9'
                / CEK encrypted with KEK /
            ]
          ]
        ]) >>
      },

      / NOTE: call dependency-manifest /
      / directive-set-component-index / 12, 1
        / ['dependenty-manifest.suit'] /,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / algorithm-id / -16 / SHA256 /,
          / digest-bytes / h'1051324059C5193317CAC9A099BBC0B6
                             AFB56184C04277F566A3A4131F4A1C25'
        ] >>,
        / parameter-image-size / 14: 247,
        / parameter-uri / 21: "#dependency-manifest"
      },
      / directive-fetch / 21, 15,
      / condition-dependency-integrity / 7, 15,
      / directive-process-dependency / 11, 15
    ] >>
  } >>,
  "#dependency-manifest": <<
    / SUIT_Envelope_Tagged / 107({
      / authentication-wrapper / 2: << [
        << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: / h'1051324059C5193317CAC9A099BBC0B6
                              AFB56184C04277F566A3A4131F4A1C25'
        ] >>,
        << / COSE_Sign1_Tagged / 18([
          / protected: / << {
            / algorithm-id / 1: -7 / ES256 /
          } >>,
          / unprotected: / {},
          / payload: / null,
          / signature: /
            h'55990F3745DC4F200FF946643A6DE30D
              DCE57B080B7D68DE9896D8190B9A63E2
              D60E7C3D9693B67221AA6D07BBF0AB45
              314C236827A242C22B5E688DDC467269'
        ]) >>
      ] >>,
      / manifest / 3: << {
        / manifest-version / 1: 1,
        / manifest-sequence-number / 2: 1,
        / common / 3: << {
          / components / 2: [
            ['decrypted-firmware']
          ],
          / shared-sequence / 4: << [
            / directive-set-componnt-index / 12, 0
              / ['decrypted-firmware'] /,
            / directive-override-parameters / 20, {
              / parameter-image-digest / 3: << [
                / algorithm-id / -16 / SHA256 /,
                / digest-bytes / h'36921488FE6680712F734E11F58D87EE
                                   B66D4B21A8A1AD3441060814DA16D50F'
              ] >>,
              / parameter-image-size / 14: 30
            }
          ] >>
        } >>,
        / manifest-component-id / 5: [
          'dependency-manifest.suit'
        ],
        / validate / 7: << [
          / condition-image-match / 3, 15
        ] >>,
        / install / 17: << [
          / directive-set-component-index / 12, 0
            / ['decrypted-firmware'] /,
          / directive-write / 18, 15
            / consumes the SUIT_Encryption_Info set by dependent /,
          / condition-image-match / 3, 15
            / check the integrity of the decrypted payload /
        ] >>
      } >>
    })
  >>
})
]]></artwork></figure>

<t>In hex format, the SUIT manifest is this:</t>

<figure><artwork><![CDATA[
D86BA401589E8181589AD28443A10126A0584FA108A101A4010220012158
200E908AA8F066DB1F084E0C3652C63952BD99F2A5BDB22F9E01367AAD03
ABA68B22582077DA1BD8AC4F0CB490BA210648BF79AB164D49AD3551D71D
314B2749EE42D29A5840FB2D5ACF66B9C8573CE92E13BFB8D113F798715C
C10B5A0010B11925C155E7245A64E131073B87AC50CAC71650A21315B82D
06CA2298CD1A95519AAE4C4B5315025873825824822F58206A1D9F42E7B4
047D2F54046019AE3ED43A8ACC467AC16576B17D6F8E633042D2584AD284
43A10126A0F65840DF493BDBF167EFFB40593C5910D33B66429721467DF0
5800EA66A88B91729CD51007981F151FC324745FF43E6F75AAF5197DD5EC
4AA6BCEFCE43E4B1E35C948E03590170A501010201035837A201A101A101
815818646570656E64656E63792D6D616E69666573742E73756974028181
526465637279707465642D6669726D77617265058157646570656E64656E
742D6D616E69666573742E73756974115901138E0C0014A212582E344FA2
D5AD2F43F6F363DA6FF2C337FE69E33E3D63714D23985BF02499EB0E8B23
1D45C378245DA3611C160CC511135890D8608443A10101A10550DAE613B2
E0DC55F4322BE38BDBA9DC68F6818344A101381CA220A401022001215820
FF6E266DABAF51B7207569E31CF72646183E94CEE64FCDC8695AD9A505AE
FDEA2258205FBC4A29844450B3AC22AB30C7F7004BB59D8BD60D7997734A
9FA0124B65089504456B69642D325818B0E21628283F3E409F8158D8FFCA
567F340E379AC39E49C90C0114A3035824822F58201051324059C5193317
CAC9A099BBC0B6AFB56184C04277F566A3A4131F4A1C250E18F715742364
6570656E64656E63792D6D616E6966657374150F070F0B0F742364657065
6E64656E63792D6D616E696665737458F7D86BA2025873825824822F5820
1051324059C5193317CAC9A099BBC0B6AFB56184C04277F566A3A4131F4A
1C25584AD28443A10126A0F6584055990F3745DC4F200FF946643A6DE30D
DCE57B080B7D68DE9896D8190B9A63E2D60E7C3D9693B67221AA6D07BBF0
AB45314C236827A242C22B5E688DDC46726903587BA601010201035849A2
028181526465637279707465642D6669726D7761726504582F840C0014A2
035824822F582036921488FE6680712F734E11F58D87EEB66D4B21A8A1AD
3441060814DA16D50F0E181E05815818646570656E64656E63792D6D616E
69666573742E73756974074382030F1147860C00120F030F
]]></artwork></figure>

</section>
</section>
<section anchor="operational-considerations"><name>Operational Considerations</name>

<t>The algorithms described in this document assume that the party
performing payload encryption</t>

<t><list style="symbols">
  <t>shares a key-encryption key (KEK) with the recipient
(for use with the AES Key Wrap scheme), or</t>
  <t>is in possession of the public key of the recipient
(for use with ES-DH).</t>
</list></t>

<t>Both cases require some upfront communication interaction
to distribute these keys to the involved communication parties.
This interaction may be provided by a device management protocol,
as described in <xref target="RFC9019"/>, or may be executed earlier in
the lifecycle of the device, for example during manufacturing
or during commissioning. In addition to the keying material
key identifiers and algorithm information need to be provisioned.
This specification places no requirements on the structure of the
key identifier.</t>

<t>In some cases third party companies analyse binaries for known
security vulnerabilities. With encrypted payloads, this type of
analysis is prevented. Consequently, these third party companies
either need to be given access to the plaintext binary before
encryption or they need to become authorized recipients of the
encrypted payloads. In either case, it is necessary to explicitly
consider those third parties in the software supply chain when
such a binary analysis is desired.</t>

</section>
<section anchor="sec-cons"><name>Security Considerations</name>

<t>This entire document is about security.</t>

<t>It is good security practise to use different keys for different purpose.
For example, the KEK used with an AES-KW-based content key distribution
method for encryption should be different from the long-term symmetric key
used for authentication in a communication security protocol.</t>

<t>To further reduce the attack surface it may be beneficial use different
long-term keys for the encryption of different types of payloads. For
example, KEK_1 may be used with an AES-KW content key distribution method
to encrypt a firmware image while KEK_2 would be used to encrypt
configuration data.</t>

<t>A large part of this document is focused on the content key distribution and
two methods are utilized, namely AES Key Wrap (AES-KW) and Ephemeral-Static
Diffie-Hellman (ES-DH). In this table we summarize the main properties with
respect to their deployment:</t>

<figure><artset><artwork  type="svg"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="464" width="520" viewBox="0 0 520 464" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,448" fill="none" stroke="black"/>
<path d="M 136,32 L 136,448" fill="none" stroke="black"/>
<path d="M 144,32 L 144,448" fill="none" stroke="black"/>
<path d="M 248,32 L 248,448" fill="none" stroke="black"/>
<path d="M 376,32 L 376,448" fill="none" stroke="black"/>
<path d="M 512,32 L 512,448" fill="none" stroke="black"/>
<path d="M 8,32 L 512,32" fill="none" stroke="black"/>
<path d="M 8,128 L 512,128" fill="none" stroke="black"/>
<path d="M 8,272 L 512,272" fill="none" stroke="black"/>
<path d="M 8,368 L 512,368" fill="none" stroke="black"/>
<path d="M 8,448 L 512,448" fill="none" stroke="black"/>
<path d="M 128,32 C 136.83064,32 144,39.16936 144,48" fill="none" stroke="black"/>
<path d="M 152,32 C 143.16936,32 136,39.16936 136,48" fill="none" stroke="black"/>
<path d="M 128,128 C 136.83064,128 144,135.16936 144,144" fill="none" stroke="black"/>
<path d="M 128,128 C 136.83064,128 144,120.83064 144,112" fill="none" stroke="black"/>
<path d="M 152,128 C 143.16936,128 136,135.16936 136,144" fill="none" stroke="black"/>
<path d="M 152,128 C 143.16936,128 136,120.83064 136,112" fill="none" stroke="black"/>
<path d="M 128,272 C 136.83064,272 144,279.16936 144,288" fill="none" stroke="black"/>
<path d="M 128,272 C 136.83064,272 144,264.83064 144,256" fill="none" stroke="black"/>
<path d="M 152,272 C 143.16936,272 136,279.16936 136,288" fill="none" stroke="black"/>
<path d="M 152,272 C 143.16936,272 136,264.83064 136,256" fill="none" stroke="black"/>
<path d="M 128,368 C 136.83064,368 144,375.16936 144,384" fill="none" stroke="black"/>
<path d="M 128,368 C 136.83064,368 144,360.83064 144,352" fill="none" stroke="black"/>
<path d="M 152,368 C 143.16936,368 136,375.16936 136,384" fill="none" stroke="black"/>
<path d="M 152,368 C 143.16936,368 136,360.83064 136,352" fill="none" stroke="black"/>
<path d="M 128,448 C 136.83064,448 144,440.83064 144,432" fill="none" stroke="black"/>
<path d="M 152,448 C 143.16936,448 136,440.83064 136,432" fill="none" stroke="black"/>
<g class="text">
<text x="52" y="68">Number</text>
<text x="92" y="68">of</text>
<text x="180" y="68">Same</text>
<text x="216" y="68">key</text>
<text x="280" y="68">One</text>
<text x="312" y="68">key</text>
<text x="408" y="68">One</text>
<text x="440" y="68">Key</text>
<text x="64" y="84">Long-Term</text>
<text x="176" y="84">for</text>
<text x="208" y="84">all</text>
<text x="280" y="84">per</text>
<text x="324" y="84">device</text>
<text x="408" y="84">per</text>
<text x="452" y="84">device</text>
<text x="44" y="100">Keys</text>
<text x="192" y="100">devices</text>
<text x="52" y="164">Number</text>
<text x="92" y="164">of</text>
<text x="188" y="164">Single</text>
<text x="292" y="164">Single</text>
<text x="408" y="164">One</text>
<text x="440" y="164">CEK</text>
<text x="56" y="180">Content</text>
<text x="176" y="180">CEK</text>
<text x="208" y="180">per</text>
<text x="280" y="180">CEK</text>
<text x="312" y="180">per</text>
<text x="408" y="180">per</text>
<text x="456" y="180">payload</text>
<text x="68" y="196">Encryption</text>
<text x="192" y="196">payload</text>
<text x="296" y="196">payload</text>
<text x="436" y="196">encryption</text>
<text x="44" y="212">Keys</text>
<text x="92" y="212">(CEKs)</text>
<text x="188" y="212">shared</text>
<text x="292" y="212">shared</text>
<text x="440" y="212">transaction</text>
<text x="180" y="228">with</text>
<text x="216" y="228">all</text>
<text x="284" y="228">with</text>
<text x="320" y="228">all</text>
<text x="408" y="228">per</text>
<text x="452" y="228">device</text>
<text x="188" y="244">devies</text>
<text x="292" y="244">devies</text>
<text x="40" y="308">Use</text>
<text x="76" y="308">Case</text>
<text x="188" y="308">Legacy</text>
<text x="304" y="308">Efficient</text>
<text x="432" y="308">Point-to-</text>
<text x="184" y="324">Usage</text>
<text x="296" y="324">Payload</text>
<text x="416" y="324">Point</text>
<text x="472" y="324">Payload</text>
<text x="316" y="340">Distribution</text>
<text x="444" y="340">Distribution</text>
<text x="76" y="404">Recommended?</text>
<text x="176" y="404">No,</text>
<text x="208" y="404">bad</text>
<text x="280" y="404">Yes</text>
<text x="408" y="404">Yes</text>
<text x="196" y="420">practice</text>
</g>
</svg>
</artwork><artwork  type="ascii-art"><![CDATA[
+---------------++------------+---------------+----------------+
|               ||            |               |                |
|  Number of    ||  Same key  |  One key      |  One Key       |
|  Long-Term    ||  for all   |  per device   |  per device    |
|  Keys         ||  devices   |               |                |
|               ||            |               |                |
+---------------++------------+---------------+----------------+
|               ||            |               |                |
|  Number of    ||  Single    |  Single       |  One CEK       |
|  Content      ||  CEK per   |  CEK per      |  per payload   |
|  Encryption   ||  payload   |  payload      |  encryption    |
|  Keys (CEKs)  ||  shared    |  shared       |  transaction   |
|               ||  with all  |  with all     |  per device    |
|               ||  devies    |  devies       |                |
|               ||            |               |                |
+---------------++------------+---------------+----------------+
|               ||            |               |                |
|  Use Case     ||  Legacy    |  Efficient    |  Point-to-     |
|               ||  Usage     |  Payload      |  Point Payload |
|               ||            |  Distribution |  Distribution  |
|               ||            |               |                |
+---------------++------------+---------------+----------------+
|               ||            |               |                |
|  Recommended? ||  No, bad   |  Yes          |  Yes           |
|               ||  practice  |               |                |
|               ||            |               |                |
+---------------++------------+---------------+----------------+
]]></artwork></artset></figure>

<t>The use of firmware encryption with IoT devices introduces an battery
exhaustion attack. This attack utilizes the fact that flash memory
operations are energy-expensive. To perform this attacker, the adversary
needs to be able to swap detached payloads and force the device to process
a wrong payload. Swapping the payloads is only possible when there is no
communication security protocol in place between the device and the
distribution system or when the distribution system itself is compromised.
The security features provided by the manifest will detect this attack and
the device will not boot the incorrectly provided payload. However, at this
time the energy-expensive flash operations have already been performed.
Consequently, these operations may reduce the lifetime of devices and
battery powered IoT devices are particularly vulnerable to such an attack.
See <xref target="flash"/> for further discussion about IoT devices using flash memory.</t>

<t>Including the digest of the encrypted payload in the manifest allows the
device to detect a battery exhaustion attack before energy consuming decryption
and flash memory copy or swap operations took place. When battery exhaustion
attacks are not a concern, it is adequate to use the digest of the plaintet
payload instead.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>IANA is asked to add the following value to the SUIT Parameters
registry established by Section 11.5 of <xref target="I-D.ietf-suit-manifest"/>:</t>

<figure><artwork><![CDATA[
Label      Name                 Reference
-----------------------------------------
TBD19      Encryption Info      Section 4
]]></artwork></figure>

<t>[Editor's Note: TBD19: Proposed 19]</t>

</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC3394">
  <front>
    <title>Advanced Encryption Standard (AES) Key Wrap Algorithm</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <date month="September" year="2002"/>
  </front>
  <seriesInfo name="RFC" value="3394"/>
  <seriesInfo name="DOI" value="10.17487/RFC3394"/>
</reference>

<reference anchor="RFC9052">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
      <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="96"/>
  <seriesInfo name="RFC" value="9052"/>
  <seriesInfo name="DOI" value="10.17487/RFC9052"/>
</reference>

<reference anchor="RFC9053">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052).</t>
      <t>This document, along with RFC 9052, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9053"/>
  <seriesInfo name="DOI" value="10.17487/RFC9053"/>
</reference>

<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>


<reference anchor="I-D.ietf-suit-manifest">
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname="Brendan Moran" initials="B." surname="Moran">
         <organization>Arm Limited</organization>
      </author>
      <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
      <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
         <organization>Inria</organization>
      </author>
      <author fullname="Ãyvind RÃ¸nningstad" initials="O." surname="RÃ¸nningstad">
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day="23" month="October" year="2023"/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-24"/>
   
</reference>

<reference anchor="RFC9459">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): AES-CTR and AES-CBC</title>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <date month="September" year="2023"/>
    <abstract>
      <t>The Concise Binary Object Representation (CBOR) data format is designed for small code size and small message size. CBOR Object Signing and Encryption (COSE) is specified in RFC 9052 to provide basic security services using the CBOR data format. This document specifies the conventions for using AES-CTR and AES-CBC as content encryption algorithms with COSE.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9459"/>
  <seriesInfo name="DOI" value="10.17487/RFC9459"/>
</reference>


<reference anchor="I-D.ietf-suit-trust-domains">
   <front>
      <title>SUIT Manifest Extensions for Multiple Trust Domains</title>
      <author fullname="Brendan Moran" initials="B." surname="Moran">
         <organization>Arm Limited</organization>
      </author>
      <author fullname="Ken Takayama" initials="K." surname="Takayama">
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day="11" month="September" year="2023"/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT Manifest format
   (as defined in [I-D.ietf-suit-manifest]) for use in deployments with
   multiple trust domains.  A device has more than one trust domain when
   it enables delegation of different rights to mutually distrusting
   entities for use for different purposes or Components in the context
   of firmware or software update.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-trust-domains-05"/>
   
</reference>




    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC9019">
  <front>
    <title>A Firmware Update Architecture for Internet of Things</title>
    <author fullname="B. Moran" initials="B." surname="Moran"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="D. Brown" initials="D." surname="Brown"/>
    <author fullname="M. Meriac" initials="M." surname="Meriac"/>
    <date month="April" year="2021"/>
    <abstract>
      <t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t>
      <t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9019"/>
  <seriesInfo name="DOI" value="10.17487/RFC9019"/>
</reference>

<reference anchor="RFC9124">
  <front>
    <title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
    <author fullname="B. Moran" initials="B." surname="Moran"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
    <date month="January" year="2022"/>
    <abstract>
      <t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t>
      <t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9124"/>
  <seriesInfo name="DOI" value="10.17487/RFC9124"/>
</reference>

<reference anchor="RFC8937">
  <front>
    <title>Randomness Improvements for Security Protocols</title>
    <author fullname="C. Cremers" initials="C." surname="Cremers"/>
    <author fullname="L. Garratt" initials="L." surname="Garratt"/>
    <author fullname="S. Smyshlyaev" initials="S." surname="Smyshlyaev"/>
    <author fullname="N. Sullivan" initials="N." surname="Sullivan"/>
    <author fullname="C. Wood" initials="C." surname="Wood"/>
    <date month="October" year="2020"/>
    <abstract>
      <t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols. Weak or predictable "cryptographically secure" pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t>
      <t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8937"/>
  <seriesInfo name="DOI" value="10.17487/RFC8937"/>
</reference>

<reference anchor="RFC5652">
  <front>
    <title>Cryptographic Message Syntax (CMS)</title>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <date month="September" year="2009"/>
    <abstract>
      <t>This document describes the Cryptographic Message Syntax (CMS). This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="70"/>
  <seriesInfo name="RFC" value="5652"/>
  <seriesInfo name="DOI" value="10.17487/RFC5652"/>
</reference>

<reference anchor="RFC5280">
  <front>
    <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
    <author fullname="D. Cooper" initials="D." surname="Cooper"/>
    <author fullname="S. Santesson" initials="S." surname="Santesson"/>
    <author fullname="S. Farrell" initials="S." surname="Farrell"/>
    <author fullname="S. Boeyen" initials="S." surname="Boeyen"/>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <author fullname="W. Polk" initials="W." surname="Polk"/>
    <date month="May" year="2008"/>
    <abstract>
      <t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet. An overview of this approach and model is provided as an introduction. The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms. Standard certificate extensions are described and two Internet-specific extensions are defined. A set of required certificate extensions is specified. The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions. An algorithm for X.509 certification path validation is described. An ASN.1 module and examples are provided in the appendices. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5280"/>
  <seriesInfo name="DOI" value="10.17487/RFC5280"/>
</reference>

<reference anchor="RFC5869">
  <front>
    <title>HMAC-based Extract-and-Expand Key Derivation Function (HKDF)</title>
    <author fullname="H. Krawczyk" initials="H." surname="Krawczyk"/>
    <author fullname="P. Eronen" initials="P." surname="Eronen"/>
    <date month="May" year="2010"/>
    <abstract>
      <t>This document specifies a simple Hashed Message Authentication Code (HMAC)-based key derivation function (HKDF), which can be used as a building block in various protocols and applications. The key derivation function (KDF) is intended to support a wide range of applications and requirements, and is conservative in its use of cryptographic hash functions. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5869"/>
  <seriesInfo name="DOI" value="10.17487/RFC5869"/>
</reference>


<reference anchor="iana-suit" target="TBD">
  <front>
    <title>IANA SUIT Manifest Registry</title>
    <author >
      <organization>Internet Assigned Numbers Authority</organization>
    </author>
    <date year="2023"/>
  </front>
</reference>
<reference anchor="ROP" target="https://en.wikipedia.org/wiki/Return-oriented_programming">
  <front>
    <title>Return-Oriented Programming</title>
    <author >
      <organization>Wikipedia</organization>
    </author>
    <date year="2023" month="March"/>
  </front>
</reference>
<reference anchor="SP800-56" target="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Ar3.pdf">
  <front>
    <title>Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography, NIST Special Publication 800-56A Revision 3</title>
    <author >
      <organization>NIST</organization>
    </author>
    <date year="2018" month="April"/>
  </front>
</reference>


    </references>


<?line 2152?>

<section anchor="full-cddl"><name>Full CDDL</name>

<t>The following CDDL must be appended to the SUIT Manifest CDDL. The SUIT CDDL is defined in
Appendix A of <xref target="I-D.ietf-suit-manifest"/></t>

<figure><sourcecode type="CDDL"><![CDATA[
; Define SUIT_Encryption_Info_* as a subset of COSE_Encrypt

SUIT_Encryption_Info = #6.96(
    SUIT_Encryption_Info_AESKW .within COSE_Encrypt /
    SUIT_Encryption_Info_ESDH .within COSE_Encrypt)

SUIT_Encryption_Info_AESKW = [
  protected   : bstr .size 0 / bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : bstr / nil,
  recipients  : [ + COSE_recipient_AESKW .within COSE_recipient ]
]

COSE_recipient_AESKW = [
  protected   : bstr .size 0 / bstr .cbor empty_map,
  unprotected : recipient_header_unpr_map_aeskw,
  ciphertext  : bstr        ; CEK encrypted with KEK
]
empty_map = {}

recipient_header_unpr_map_aeskw =
{
    1 => int,         ; algorithm identifier for non AEAD cipher
  ? 4 => bstr,        ; identifier of the recipient public key
  * label => values   ; extension point
}

SUIT_Encryption_Info_ESDH = [
  protected   : bstr .size 0 / bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : bstr / nil,
  recipients  : [ + COSE_recipient_ESDH .within COSE_recipient ]
]

COSE_recipient_ESDH = [
  protected   : bstr .size 0 / bstr .cbor recipient_header_map_esdh,
  unprotected : recipient_header_unpr_map_esdh,
  ciphertext  : bstr        ; CEK encrypted with KEK
]

recipient_header_map_esdh =
{
  ? 1 => int,         ; algorithm identifier for AEAD cipher
  * label => values   ; extension point
}

recipient_header_unpr_map_esdh =
{
   -1 => COSE_Key,    ; ephemeral public key for the sender
  ? 1 => int,         ; algorithm identifier for non AEAD
  ? 4 => bstr,        ; identifier of the recipient public key
  * label => values   ; extension point
}

; common definitions
outer_header_map_protected =
{
  ? 1 => int,         ; algorithm identifier for AEAD cipher
  * label => values   ; extension point
}

outer_header_map_unprotected =
{
  ? 1 => int,         ; algorithm identifier for non AEAD cipher
    5 => bstr,        ; IV
  * label => values   ; extension point
}


; Extends SUIT Manifest

$$SUIT_Parameters //= (suit-parameter-encryption-info =>
    bstr .cbor SUIT_Encryption_Info)

suit-parameter-encryption-info = 19
]]></sourcecode></figure>

</section>
<section numbered="no" anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank Henk Birkholz for his feedback on the CDDL description in this document.
Additionally, we would like to thank Michael Richardson, Ãyvind RÃ¸nningstad, Dave Thaler, Laurence
Lundblade, Christian AmsÃ¼ss, Ruud Derwig, and Carsten Bormann for their review feedback. Finally,
we would like to thank Dick Brooks for making us aware of the challenges encryption imposes on
binary analysis.</t>

</section>


  </back>

<!-- ##markdown-source:
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
+ZFrlokwKqBXRicB8qYzsnqLtAiCARWlHUmV/eLvhrptvgldqm49moqgERYq
E6E4Uw6IafL/onlnBRPUIILr/GUKO3GoJ8/9gG6xwL+E+HQ9AvdB3GxM5MTW
KjGsBvh8wxoAR68Nv3GduvF69bFr4f+BdCluqrXlpEWlU9yvnn2irlZwrU81
HzKfp1cLlVK3OrUoCM99nOASVpdb1TmSkDSKvjp7Ybx6ffaN/yYynkbf0a9H
rednXz3xryL/+ej5V6O77786f+548P2rIBCfb6Mno6/M2/j2bOT/7W9X/vI/
v/vnfwZff/Xsed/8BvO/BP/87nz19y9N759fzRd3f32VL8Nnb358dJ3+/eX1
a/9F4Pvn0SyL4vxq/f333l+vv/khTQYvsvnN998/G75e3Ry1Xn15ka6+/XZy
Pb3x8zfF5dP3qyL4Lvrh9umLVf7iyd9T7+Wo9+LL24X/9ar4cf7a7j13Vk/T
b8XSgFA1LEy7vDbJcixehBEIeBG1LKotnOmS25KhlTyKRaK2vnkfvx49Owv0
bRy/v41uv3vyNPvPsx//aQb+3747E59D/2+TEDYuuv5rPPrqe+fZ99/fnH/3
zeS7xfrH+K+5+336KLo4al38+Gju5N/MFmd/v7h9ag6e3C2fXfjz0fNJ8M+L
+MfXlnPz5mr642Xx19vxs4vn/ffT1Y8vn51ns6vHj/WNqM9MwhMJYfr13PMn
PuGCKI4rInS1GoUyzU9ZYVhK0kShv0WvnxHKgFDjwxei+w4jE7sFP26ieNVh
jAyW8D3GMNSCLNJZPZxSM1PS2HRF6nk8MQ1EacwjLSSazKBRpWQsDcwkP23S
DRKmtWDw0vdA8kwZ7EqdHrXUD4otVteypY4aX8sq76EWTHdY3sCYFKF+nJTX
JVFeKCHvkSzixR62d2/iq6sEr8Fb5uD4A4XwNgewYIAuhXPzHUT1QYvY3hPf
XW+uBXj3e24UuF4/cuxez7HH4/5g7A+9US/qBZYdmK1tap5hjD27P/A8G2/2
uWPTGthDazC0Q6zeEuDNCb42p646wsQflYeurX9wfPDtSrVKvvOIwdoCeA68
W9l8bRDvhJYPQOuRN1QGZn9gWa43MsdR1I9c2zZH46ELH71Bb7y5OYNxzx4O
+o7X98xhFPq+Z0WB5zmjwHeckS2S6r89gTm2yr15VEKfCt0XIfnyQUcW9+SK
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

-->

</rfc>

