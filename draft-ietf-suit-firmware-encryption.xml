<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.1 (Ruby 3.0.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-firmware-encryption-20" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="Encrypted Payloads in SUIT Manifests">Encrypted Payloads in SUIT Manifests</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security">Vigil Security, LLC</organization>
      <address>
        <email>housley@vigilsec.com</email>
      </address>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="D." surname="Brown" fullname="David Brown">
      <organization>Linaro</organization>
      <address>
        <email>david.brown@linaro.org</email>
      </address>
    </author>
    <author initials="K." surname="Takayama" fullname="Ken Takayama">
      <organization>SECOM CO., LTD.</organization>
      <address>
        <email>ken.takayama.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2024" month="July" day="05"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 93?>

<t>This document specifies techniques for encrypting software, firmware,
machine learning models, and personalization data by utilizing the IETF
SUIT manifest. Key agreement is provided by ephemeral-static (ES)
Diffie-Hellman (DH) and AES Key Wrap (AES-KW). ES-DH uses public key
cryptography while AES-KW uses a pre-shared key. Encryption of the
plaintext is accomplished with conventional symmetric key cryptography.</t>



    </abstract>



  </front>

  <middle>


<?line 102?>

<section anchor="introduction"><name>Introduction</name>

<t>Vulnerabilities with Internet of Things (IoT) devices have raised the
need for a reliable and secure firmware update mechanism that is also
suitable for constrained devices. To protect firmware images, the SUIT manifest
format was developed <xref target="I-D.ietf-suit-manifest"/>. It provides a bundle of
metadata, including where to find the payload, the devices to which it
applies and a security wrapper.</t>

<t><xref target="RFC9124"/> details the information that has to be provided by the SUIT
manifest format. In addition to offering protection against modification,
via a digital signature or a message authentication code,
confidentiality may also be afforded.</t>

<t>Encryption prevents third parties, including attackers, from gaining
access to the payload. Attackers typically need intimate knowledge
of a binary, such as a firmware image, to mount their attacks.
For example, return-oriented programming (ROP) <xref target="ROP"/> requires access
to the binary and encryption makes it much more difficult to write exploits.
Beside confidentiality of the binary, confidentiality of the sources
(e.g. in case of open source software) may be required as well to prevent
reverse engineering and/or reproduction of the binary firmware.</t>

<t>While the original motivating use case of this document was firmware
encryption, the use of SUIT manifests has been extended to other use cases
requiring integrity and confidentiality protection, such as:</t>

<t><list style="symbols">
  <t>software packages,</t>
  <t>personalization data,</t>
  <t>configuration data, and</t>
  <t>machine learning models.</t>
</list></t>

<t>Hence, we use the term payload to generically refer to all those objects.</t>

<t>The payload is encrypted using a symmetric content encryption
key, which can be established using a variety of mechanisms; this
document defines two content key distribution methods for use with
the IETF SUIT manifest, namely:</t>

<t><list style="symbols">
  <t>Ephemeral-Static (ES) Diffie-Hellman (DH), and</t>
  <t>AES Key Wrap (AES-KW).</t>
</list></t>

<t>The former method relies on asymmetric key cryptography while the
latter uses symmetric key cryptography.</t>

<t>Our design aims to reduce the number of content key distribution methods
for use with payload encryption and thereby increase interoperability
between different SUIT manifest parser implementations.</t>

<t>The goal of this specification is to protect payloads during end-to-end
transport, and at rest when stored on a device. Constrained devices often
make use of XIP, which is a method of executing code
directly from flash memory rather than copying it into RAM. Since many of
these devices today do not offer hardware-based, on-the-fly decryption of
code stored in flash memory, it may be necessary to decrypt and store
firmware images in on-chip flash before code can be executed. We do, however,
expect that hardware-based, on-the-fly decryption will become more common in
the future, which will improve confidentiality at rest.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This document assumes familiarity with the IETF SUIT manifest <xref target="I-D.ietf-suit-manifest"/>,
the SUIT information model <xref target="RFC9124"/>, and the SUIT architecture <xref target="RFC9019"/>.</t>

<t>The following abbreviations are used in this document:</t>

<t><list style="symbols">
  <t>Key Wrap (KW), defined in <xref target="RFC3394"/> (for use with AES)</t>
  <t>Key-Encryption Key (KEK) <xref target="RFC3394"/></t>
  <t>Content-Encryption Key (CEK) <xref target="RFC5652"/></t>
  <t>Ephemeral-Static (ES) Diffie-Hellman (DH) <xref target="RFC9052"/></t>
  <t>Authenticated Encryption with Associated Data (AEAD)</t>
  <t>Execute in Place (XIP)</t>
</list></t>

<t>The terms sender and recipient have the following meaning:</t>

<t><list style="symbols">
  <t>Sender: Entity that sends an encrypted payload.</t>
  <t>Recipient: Entity that receives an encrypted payload.</t>
</list></t>

<t>Additionally, we introduce the term "distribution system" (or distributor)
to refer to an entity that knows the recipients of payloads. It is important
to note that the distribution system is far more than a file server. For
use of encryption, the distribution system either knows the public key
of the recipient (for ES-DH), or the KEK (for AES-KW).</t>

<t>The author, which is responsible for creating the payload, does not
know the recipients. The authors may, for example, be a developer building
a firmware image.</t>

<t>The author and the distribution system are logical roles. In some
deployments these roles are separated in different physical entities
and in others they are co-located.</t>

</section>
<section anchor="arch"><name>Architecture</name>

<t><xref target="RFC9019"/> describes the architecture for distributing payloads and
manifests from an author to devices. It does, however, not detail the
use of payload encryption. This document enhances the architecture to
support encryption and <xref target="arch-fig"/> shows it graphically.</t>

<t>To encrypt a payload it is necessary to know the recipient.
For AES-KW, the KEK needs to be known and, in case of ES-DH, the sender needs
to be in possession of the public key of the recipient. The public key and
parameters may be in the recipient's X.509 certificate <xref target="RFC5280"/>. For
authentication of the sender and for integrity protection the recipients
must be provisioned with a trust anchor when a manifest is protected using
a digital signature. When a MAC is used to protect the manifest then a
symmetric key must be shared by the recipient and the sender.</t>

<t>With encryption, the author cannot just create a manifest for the payload
and sign it, since it typically does not know the recipients. Hence, the
author has to collaborate with the distribution system. The varying degree
of collaboration is discussed below.</t>

<figure title="Architecture for the distribution of Encrypted Payloads." anchor="arch-fig"><artset><artwork  type="svg"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="384" width="472" viewBox="0 0 472 384" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 8,160 L 8,224" fill="none" stroke="black"/>
<path d="M 8,288 L 8,352" fill="none" stroke="black"/>
<path d="M 96,32 L 96,96" fill="none" stroke="black"/>
<path d="M 96,160 L 96,224" fill="none" stroke="black"/>
<path d="M 96,288 L 96,352" fill="none" stroke="black"/>
<path d="M 128,64 L 128,320" fill="none" stroke="black"/>
<path d="M 328,160 L 328,208" fill="none" stroke="black"/>
<path d="M 344,48 L 344,80" fill="none" stroke="black"/>
<path d="M 384,88 L 384,152" fill="none" stroke="black"/>
<path d="M 432,48 L 432,80" fill="none" stroke="black"/>
<path d="M 448,160 L 448,208" fill="none" stroke="black"/>
<path d="M 8,32 L 96,32" fill="none" stroke="black"/>
<path d="M 344,48 L 432,48" fill="none" stroke="black"/>
<path d="M 104,64 L 128,64" fill="none" stroke="black"/>
<path d="M 344,80 L 432,80" fill="none" stroke="black"/>
<path d="M 8,96 L 96,96" fill="none" stroke="black"/>
<path d="M 8,160 L 96,160" fill="none" stroke="black"/>
<path d="M 328,160 L 448,160" fill="none" stroke="black"/>
<path d="M 104,192 L 320,192" fill="none" stroke="black"/>
<path d="M 328,208 L 448,208" fill="none" stroke="black"/>
<path d="M 8,224 L 96,224" fill="none" stroke="black"/>
<path d="M 8,288 L 96,288" fill="none" stroke="black"/>
<path d="M 104,320 L 128,320" fill="none" stroke="black"/>
<path d="M 8,352 L 96,352" fill="none" stroke="black"/>
<polygon class="arrowhead" points="392,152 380,146.4 380,157.6 " fill="black" transform="rotate(90,384,152)"/>
<polygon class="arrowhead" points="112,320 100,314.4 100,325.6 " fill="black" transform="rotate(180,104,320)"/>
<polygon class="arrowhead" points="112,192 100,186.4 100,197.6 " fill="black" transform="rotate(180,104,192)"/>
<polygon class="arrowhead" points="112,64 100,58.4 100,69.6 " fill="black" transform="rotate(180,104,64)"/>
<g class="text">
<text x="52" y="52">Device</text>
<text x="48" y="68">1</text>
<text x="388" y="68">Author</text>
<text x="424" y="116">Payload</text>
<text x="464" y="116">+</text>
<text x="428" y="132">Manifest</text>
<text x="52" y="180">Device</text>
<text x="176" y="180">Payload</text>
<text x="216" y="180">+</text>
<text x="260" y="180">Manifest</text>
<text x="388" y="180">Distribution</text>
<text x="48" y="196">2</text>
<text x="388" y="196">System</text>
<text x="56" y="260">...</text>
<text x="52" y="308">Device</text>
<text x="48" y="324">n</text>
</g>
</svg>
</artwork><artwork  type="ascii-art"><![CDATA[
 +----------+
 |  Device  |                              +----------+
 |    1     |<--+                          |  Author  |
 |          |   |                          +----------+
 +----------+   |                               |
                |                               | Payload +
                |                               | Manifest
                |                               v
 +----------+   |                        +--------------+
 |  Device  |   |  Payload + Manifest    | Distribution |
 |    2     |<--+------------------------|    System    |
 |          |   |                        +--------------+
 +----------+   |
                |
      ...       |
                |
 +----------+   |
 |  Device  |   |
 |    n     |<--+
 |          |
 +----------+
]]></artwork></artset></figure>

<t>The author has several deployment options, namely:</t>

<t><list style="symbols">
  <t>The author, as the sender, obtains information about the recipients
and their keys from the distribution system. There are proprietary as well as
standardized device management solutions available providing this functionality,
as discussed in <xref target="RFC9019"/>. Then, it performs the necessary
steps to encrypt the payload. As a last step it creates one or more manifests.
The device(s) perform decryption and act as recipients.</t>
  <t>The author treats the distribution system as the initial recipient. The
author typically uses REST APIs or web user interfaces to interact with the
distribution system. Then, the distribution system decrypts and re-encrypts the
payload for consumption by the device (or the devices). Delegating the task of
re-encrypting the payload to the distribution system offers flexibility when the
number of devices that need to receive encrypted payloads changes dynamically
or when updates to KEKs or recipient public keys are necessary. As a downside,
the author needs to trust the distribution system with performing the
re-encryption of the payload.</t>
</list></t>

<t>If the author delegates encryption rights to the distributor two models are possible:</t>

<t><list style="numbers">
  <t>The distributor replaces the COSE_Encrypt in the manifest and then signs the
manifest again. However, the COSE_Encrypt structure is contained within a signed
container, which presents a problem: replacing the COSE_Encrypt with a new one
will cause the digest of the manifest to change, thereby changing the signature.
This means that the distributor must be able to sign the new manifest. If this
is the case, then the distributor gains the ability to construct and sign
manifests, which allows the distributor the authority to sign code, effectively
presenting the distributor with full control over the recipient. Because
distributors typically perform their re-encryption online in order to handle
a large number of devices in a timely fashion, it is not possible to air-gap
the distributor's signing operations. This impacts the recommendations in
Section 4.3.17 of <xref target="RFC9124"/>. This model nevertheless represent the current
state of firmware updates for IoT devices.</t>
  <t>The distributor uses a two-layer manifest system. More precisely, the distributor
constructs a new manifest that overrides the COSE_Encrypt using the dependency
system defined in <xref target="I-D.ietf-suit-trust-domains"/>. This incurs additional
overhead: one additional signature verification and one additional manifest,
as well as the additional machinery in the recipient needed for dependency
processing. This extra complexity offers extra security.</t>
</list></t>

<t>These two models also present different threat profiles for the distributor.
If the distributor only has encryption rights, then an attacker who breaches
the distributor can only mount a limited attack: they can encrypt a modified
binary, but the recipients will identify the attack as soon as they perform
the required image digest check and revert back to a correct image immediately.</t>

<t>It is RECOMMENDED that distributors implement the two-layer manifest
approach in order to distribute content encryption keys without requiring
re-signing of the manifest, despite the increase in complexity and greater
number of signature verifications that this imposes on the recipient.</t>

</section>
<section anchor="parameters"><name>Encryption Extensions</name>

<t>This specification introduces a new extension to the SUIT_Parameters structure.</t>

<t>The SUIT_Encryption_Info structure (called suit-parameter-encryption-info in
<xref target="parameter-fig"/>) contains the content key distribution information. The
content of the SUIT_Encryption_Info structure is explained in <xref target="AES-KW"/>
(for AES-KW) and in <xref target="ES-DH"/> (for ES-DH).</t>

<t>Once a CEK is available, the steps described in <xref target="content-enc"/> are applicable.
These steps apply to both content key distribution methods described in this
section.</t>

<t>The SUIT_Encryption_Info structure is either carried inside the
suit-directive-override-parameters or the suit-directive-set-parameters
parameters used in the "Directive Write" and "Directive Copy" directives.
An implementation claiming conformance with this specification
must implement support for these two parameters. Since a device will
typically only support one of the content key distribution methods,
the distribution system needs to know which of two specified methods
is supported. Mandating only a single content key distribution
method for a constrained device also reduces the code size.</t>

<figure title="CDDL of the SUIT_Parameters Extension." anchor="parameter-fig"><artwork><![CDATA[
SUIT_Parameters //= (suit-parameter-encryption-info
    => bstr .cbor SUIT_Encryption_Info)

suit-parameter-encryption-info = TBD19
]]></artwork></figure>

<t>RFC Editor's Note (TBD19): The value for the suit-parameter-encryption-info
parameter is set to 19, as the proposed value.</t>

</section>
<section anchor="extended-directives"><name>Extended Directives</name>

<t>This specification extends these directives:</t>

<t><list style="symbols">
  <t>Directive Write (suit-directive-write) to decrypt the content specified by
suit-parameter-content with suit-parameter-encryption-info.</t>
  <t>Directive Copy (suit-directive-copy) to decrypt the content of the component
specified by suit-parameter-source-component with suit-parameter-encryption-info.</t>
</list></t>

<t>Examples of the two directives are shown below.</t>

<t><xref target="encryption-info-consumed-with-write"/> illustrates the Directive Write.
The encrypted payload specified with parameter-content, namely
h'EA1...CED' in the example, is decrypted using the SUIT_Encryption_Info
structure referred to by parameter-encryption-info, i.e., h'D86...1F0'.
The resulting plaintext payload is stored into component #0.</t>

<figure title="Example showing the extended suit-directive-write." anchor="encryption-info-consumed-with-write"><artwork><![CDATA[
/ directive-override-parameters / 20, {
  / parameter-content / 18: h'EA1...CED',
  / parameter-encryption-info / TBD19: h'D86...1F0'
},
/ directive-write / 18, 15
]]></artwork></figure>

<t>RFC Editor's Note (TBD19): The value for the parameter-encryption-info
parameter is set to 19, as the proposed value.</t>

<t><xref target="encryption-info-consumed-with-copy"/> illustrates the Directive Copy.
In this example the encrypted payload is found at the URI indicated
by the parameter-uri, i.e. "http://example.com/encrypted.bin". The
encrypted payload will be downloaded and stored in component #1.
Then, the information in the SUIT_Encryption_Info structure referred
to by parameter-encryption-info, i.e. h'D86...1F0', will be used to
decrypt the content in component #1 and the resulting plaintext
payload will be stored into component #0.</t>

<figure title="Example showing the extended suit-directive-copy." anchor="encryption-info-consumed-with-copy"><artwork><![CDATA[
/ directive-set-component-index / 12, 1,
/ directive-override-parameters / 20, {
  / parameter-uri / 21: "http://example.com/encrypted.bin",
},
/ directive-fetch / 21, 15,
/ directive-set-component-index / 12, 0,
/ directive-override-parameters / 20, {
  / parameter-encryption-info / TBD19: h'D86...1F0',
  / parameter-source-component / 22: 1
},
/ directive-copy / 22, 15
]]></artwork></figure>

<t>RFC Editor's Note (TBD19): The value for the suit-parameter-encryption-info
parameter is set to 19, as the proposed value.</t>

<t>The payload to be encrypted may be detached and, in that case, it is
not covered by the digital signature or the MAC protecting the manifest.
(To be more precise, the suit-authentication-wrapper found in the envelope
contains a digest of the manifest in the SUIT Digest Container.)</t>

<t>The lack of authentication and integrity protection of the payload is
particularly a concern when a cipher without integrity protection is
used.</t>

<t>To provide authentication and integrity protection of the payload
in the detached payload case a SUIT Digest Container with the hash
of the encrypted and/or plaintext payload MUST be included in the
manifest. See suit-parameter-image-digest parameter in Section
8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>.</t>

<t>Once a CEK is available, the steps described in <xref target="content-enc"/> are applicable.
These steps apply to both content key distribution methods.</t>

</section>
<section anchor="content-key-distribution"><name>Content Key Distribution</name>

<t>The sub-sections below describe two content key distribution methods,
namely AES Key Wrap (AES-KW) and Ephemeral-Static Diffie-Hellman (ES-DH).
Many other methods are specified in the literature, and are even supported
by COSE. AES-KW and ES-DH cover the popular methods used in the market
today and they were selected due to their maturity, different
security properties, and because of their interoperability properties.</t>

<t>The two content key distribution methods require the CEKs to be
randomly generated. The guidelines for random number generation
in <xref target="RFC8937"/> MUST be followed.</t>

<t>When an encrypted payload is sent to multiple recipients, there
are different deployment options. To explain these options we use the
following notation:</t>

<figure><artwork><![CDATA[
   - KEK(R1, S) refers to a KEK shared between recipient R1 and
     the sender S.
   - CEK(R1, S) refers to a CEK shared between R1 and S.
   - CEK(*, S) or KEK(*, S) are used when a single CEK or a single
     KEK is shared with all authorized recipients by a given sender
     S in a certain context.
   - ENC(plaintext, k) refers to the encryption of plaintext with
     a key k.
]]></artwork></figure>

<section anchor="AES-KW"><name>Content Key Distribution with AES Key Wrap</name>

<section anchor="introduction-1"><name>Introduction</name>

<t>The AES Key Wrap (AES-KW) algorithm is described in <xref target="RFC3394"/>, and
can be used to encrypt a randomly generated content-encryption key (CEK)
with a pre-shared key-encryption key (KEK). The COSE conventions for using
AES-KW are specified in Section 8.5.2 of <xref target="RFC9052"/> and in Section 6.2.1 of
<xref target="RFC9053"/>. The encrypted CEK is carried in the COSE_recipient structure
alongside the information needed for AES-KW. The COSE_recipient structure,
which is a substructure of the COSE_Encrypt structure, contains the CEK
encrypted by the KEK.</t>

<t>To provide high security for AES Key Wrap, it is important that the
KEK is of high entropy, and that implementations protect the KEK
from disclosure. Compromise of the KEK may result in the disclosure
of all data protected with that KEK, including binaries, and configuration data.</t>

<t>The COSE_Encrypt structure conveys information for encrypting the payload,
which includes information like the algorithm and the IV, even though the
payload may not be embedded in the COSE_Encrypt.ciphertext if it is
conveyed as detached content.</t>

</section>
<section anchor="deployment-options"><name>Deployment Options</name>

<t>There are three deployment options for use with AES Key Wrap for payload
encryption:</t>

<t><list style="symbols">
  <t>If all recipients (typically of the same product family) share the same KEK,
a single COSE_recipient structure contains the encrypted CEK. The sender executes
the following steps:</t>
</list></t>

<figure><artwork><![CDATA[
     1. Fetch KEK(*, S)
     2. Generate CEK
     3. ENC(CEK, KEK)
     4. ENC(payload, CEK)
]]></artwork></figure>

<t>This deployment option is strongly discouraged. An attacker gaining access to
the KEK will be able to encrypt and send payloads to all recipients configured
to use this KEK.</t>

<t><list style="symbols">
  <t>If recipients have different KEKs, then multiple COSE_recipient structures
are included but only a single CEK is used. Each COSE_recipient structure
contains the CEK encrypted with the KEKs appropriate for a given recipient.
The benefit of this approach is that the payload is encrypted only once with
a CEK while there is no sharing of the KEK across recipients. Hence, authorized
recipients still use their individual KEK to decrypt the CEK and to subsequently
obtain the plaintext. The steps taken by the sender are:</t>
</list></t>

<figure><artwork><![CDATA[
    1.  Generate CEK
    2.  for i=1 to n
        {
    2a.    Fetch KEK(Ri, S)
    2b.    ENC(CEK, KEK(Ri, S))
        }
    3.  ENC(payload, CEK)
]]></artwork></figure>

<t><list style="symbols">
  <t>The third option is to use different CEKs encrypted with KEKs of
authorized recipients. This approach is appropriate when no benefits can
be gained from encrypting and transmitting payloads only once. Assume there
are n recipients with their unique KEKs - KEK(R1, S), ..., KEK(Rn, S) and
unique CEKs. The sender needs to execute the following steps:</t>
</list></t>

<figure><artwork><![CDATA[
    1.  for i=1 to n
        {
    1a.    Fetch KEK(Ri, S)
    1b.    Generate CEK(Ri, S)
    1c.    ENC(CEK(Ri, S), KEK(Ri, S))
    1d.    ENC(payload, CEK(Ri, S))
    2.  }
]]></artwork></figure>

</section>
<section anchor="cddl"><name>CDDL</name>

<t>The CDDL for the AES-KW binary is shown in <xref target="cddl-aeskw"/>.
empty_or_serialized_map and header_map are structures defined in <xref target="RFC9052"/>.</t>

<figure title="CDDL for AES-KW-based Content Key Distribution" anchor="cddl-aeskw"><artwork><![CDATA[
SUIT_Encryption_Info_AESKW = #6.96([
  protected   : outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : bstr / nil,
  recipients  : [ + COSE_recipient_AESKW ]
])

outer_header_map_protected = empty_or_serialized_map
outer_header_map_unprotected = header_map

COSE_recipient_AESKW = [
  protected   : bstr .size 0 / bstr .cbor empty_map,
  unprotected : recipient_header_unpr_map_aeskw,
  ciphertext  : bstr        ; CEK encrypted with KEK
]

empty_map = {}

recipient_header_unpr_map_aeskw =
{
    1 => int,         ; algorithm identifier
  ? 4 => bstr,        ; identifier of the KEK pre-shared with the recipient
  * label => values   ; extension point
}
]]></artwork></figure>

<t>Note that the AES-KW algorithm, as defined in Section 2.2.3.1 of <xref target="RFC3394"/>,
does not have public parameters that vary on a per-invocation basis. Hence,
the protected header in the COSE_recipient structure is a byte string
of zero length.</t>

</section>
</section>
<section anchor="ES-DH"><name>Content Key Distribution with Ephemeral-Static Diffie-Hellman</name>

<section anchor="introduction-2"><name>Introduction</name>

<t>Ephemeral-Static Diffie-Hellman (ES-DH) is a scheme that provides public key
encryption given a recipient's public key. There are multiple variants
of this scheme; this document re-uses the variant specified in Section 8.5.5
of <xref target="RFC9052"/>.</t>

<t>The following two layer structure is used:</t>

<t><list style="symbols">
  <t>Layer 0: Has a content encrypted with the CEK. The content may be detached.</t>
  <t>Layer 1: Uses the AES Key Wrap algorithm to encrypt the randomly generated
CEK with the KEK derived with ES-DH, whereby the resulting symmetric
key is fed into the HKDF-based key derivation function.</t>
</list></t>

<t>As a result, the two layers combine ES-DH with AES-KW and HKDF,
and it is called ECDH-ES + AES-KW.
An example is given in <xref target="esdh-aesgcm-example"/>.</t>

<t>There exists another version of ES-DH algorithm, namely ECDH-ES + HKDF, which
does not use AES Key Wrap. It is not specified in this document.</t>

</section>
<section anchor="deployment-options-1"><name>Deployment Options</name>

<t>There are only two deployment options with this approach since we assume that
recipients are always configured with a device-unique public / private key pair.</t>

<t><list style="symbols">
  <t>A sender wants to transmit a payload to multiple recipients and all recipients
receive the same encrypted payload, i.e. the same CEK is used to encrypt the payload.
One COSE_recipient structure per recipient is used and it contains the
CEK encrypted with the KEK. To generate the KEK each COSE_recipient structure
contains a COSE_recipient_inner structure to carry the sender's ephemeral key
and an identifier for the recipients public key.</t>
</list></t>

<t>The steps taken by the sender are:</t>

<figure><artwork><![CDATA[
    1.  Generate CEK
    2.  for i=1 to n
        {
    2a.     Generate KEK(Ri, S) using ES-DH
    2b.     ENC(CEK, KEK(Ri, S))
        }
    3.  ENC(payload,CEK)
]]></artwork></figure>

<t><list style="symbols">
  <t>The alternative is to encrypt a payload with a different CEK for each
recipient. This results in n-manifests. This approach is useful when payloads contain
information unique to a device. The encryption operation then effectively becomes
ENC(payload_i, CEK(Ri, S)). Assume that KEK(R1, S),..., KEK(Rn, S) have been generated
for the different recipients using ES-DH. The following steps need to be made
by the sender:</t>
</list></t>

<figure><artwork><![CDATA[
    1.  for i=1 to n
        {
    1a.     Generate KEK(Ri, S) using ES-DH
    1b.     Generate CEK(Ri, S)
    1c.     ENC(CEK(Ri, S), KEK(Ri, S))
    1d.     ENC(payload, CEK(Ri, S))
        }
]]></artwork></figure>

</section>
<section anchor="cddl-1"><name>CDDL</name>

<t>The CDDL for the ECDH-ES+AES-KW binary is shown in <xref target="cddl-esdh"/>.
Only the minimum number of parameters is shown. empty_or_serialized_map
and header_map are structures defined in <xref target="RFC9052"/>.</t>

<figure title="CDDL for ES-DH-based Content Key Distribution" anchor="cddl-esdh"><artwork><![CDATA[
SUIT_Encryption_Info_ESDH = #6.96([
  protected   : outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : bstr / nil,
  recipients  : [ + COSE_recipient_ESDH ]
])

outer_header_map_protected = empty_or_serialized_map
outer_header_map_unprotected = header_map

COSE_recipient_ESDH = [
  protected   : bstr .cbor recipient_header_map_esdh,
  unprotected : recipient_header_unpr_map_esdh,
  ciphertext  : bstr        ; CEK encrypted with KEK
]

recipient_header_map_esdh =
{
    1 => int,         ; algorithm identifier
  * label => values   ; extension point
}

recipient_header_unpr_map_esdh =
{
  ? 4 => bstr,        ; identifier of the recipient public key
   -1 => COSE_Key,    ; ephemeral public key for the sender
  * label => values   ; extension point
}
]]></artwork></figure>

<t>See <xref target="content-enc"/> for a description on how to encrypt the payload.</t>

</section>
<section anchor="context-information-structure"><name>Context Information Structure</name>

<t>The context information structure is used to ensure that the derived keying material
is "bound" to the context of the transaction. This specification re-uses the structure
defined in Section 5.2 of <xref target="RFC9053"/> and tailors it accordingly.</t>

<t>The following information elements are bound to the context:</t>

<t><list style="symbols">
  <t>the protocol employing the key-derivation method,</t>
  <t>information about the utilized AES Key Wrap algorithm, and the key length.</t>
  <t>the protected header field, which contains the content key encryption algorithm.</t>
</list></t>

<t>The sender and recipient identities are left empty.</t>

<t>The following fields in <xref target="cddl-context-info"/> require an explanation:</t>

<t><list style="symbols">
  <t>The COSE_KDF_Context.AlgorithmID field MUST contain the algorithm identifier
for AES Key Wrap algorithm utilized. This specification uses the following
values: A128KW (value -3), A192KW (value -4), or A256KW (value -5)</t>
  <t>The COSE_KDF_Context.SuppPubInfo.keyDataLength field MUST contain the key length
of the algorithm in the COSE_KDF_Context.AlgorithmID field expressed as the number
of bits. For A128KW the value is 128, for A192KW the value is 192, and for A256KW
the value 256.</t>
  <t>The COSE_KDF_Context.SuppPubInfo.other field captures the protocol in
which the ES-DH content key distribution algorithm is used and MUST be set to
the constant string "SUIT Payload Encryption".</t>
  <t>The COSE_KDF_Context.SuppPubInfo.protected field MUST contain the serialized
content of the recipient_header_map_esdh field, which contains (among other fields)
the identifier of the content key distribution method.</t>
</list></t>

<figure title="CDDL for COSE_KDF_Context Structure" anchor="cddl-context-info"><sourcecode type="CDDL"><![CDATA[
COSE_KDF_Context = [
    AlgorithmID : int,
    PartyUInfo : [ PartyInfoSender ],
    PartyVInfo : [ PartyInfoRecipient ],
    SuppPubInfo : [
        keyDataLength : uint,
        protected : bstr,
        other: 'SUIT Payload Encryption'
    ],
    ? SuppPrivInfo : bstr
]

PartyInfoSender = (
    identity : nil,
    nonce : nil,
    other : nil
)

PartyInfoRecipient = (
    identity : nil,
    nonce : nil,
    other : nil
)
]]></sourcecode></figure>

<t>The HKDF-based key derivation function MAY contain a salt value,
as described in Section 5.1 of <xref target="RFC9053"/>. This optional value is used to
influence the key generation process. This specification does not mandate the
use of a salt value. If the salt is public and carried in the message, then
the "salt" algorithm header parameter MUST be used. The purpose of the salt
is to provide extra randomness in the KDF context. If the salt is sent
in the 'salt' algorithm header parameter, then the receiver MUST be able to
process the salt and MUST pass it into the key derivation function.
For more information about the salt, see <xref target="RFC5869"/> and NIST
SP800-56 <xref target="SP800-56"/>.</t>

<t>Profiles of this specification MAY specify an extended version of the
context information structure or MAY utilize a different context information
structure.</t>

</section>
</section>
</section>
<section anchor="content-enc"><name>Content Encryption</name>

<t>This section summarizes the steps taken for content encryption, which
applies to both content key distribution methods.</t>

<t>For use with AEAD ciphers, such as AES-GCM and ChaCha20/Poly1305,
the COSE specification requires a consistent byte
stream for the authenticated data structure to be created. This structure
is shown in <xref target="cddl-enc-aeskw"/> and is defined in Section 5.3 of <xref target="RFC9052"/>.</t>

<figure title="CDDL for Enc_structure Data Structure" anchor="cddl-enc-aeskw"><artwork><![CDATA[
 Enc_structure = [
   context : "Encrypt",
   protected : empty_or_serialized_map,
   external_aad : bstr
 ]
]]></artwork></figure>

<t>This Enc_structure needs to be populated as follows:</t>

<t><list style="symbols">
  <t>The protected field in the Enc_structure from <xref target="cddl-enc-aeskw"/> refers
to the content of the protected field from the COSE_Encrypt structure.</t>
  <t>The value of the external_aad MUST be set to a zero-length byte string,
i.e., h'' in diagnostic notation and encoded as 0x40.</t>
</list></t>

<t>Some ciphers provide confidentiality without integrity protection, such
as AES-CTR and AES-CBC (see <xref target="RFC9459"/>). For these ciphers the
Enc_structure, shown in <xref target="cddl-enc-aeskw"/>, MUST NOT be used because
the Additional Authenticated Data (AAD) byte string is only consumable
by AEAD ciphers. Hence, the AAD structure is not supplied to the 
API of those ciphers and the protected header in the SUIT_Encryption_Info
structure MUST be a zero-length byte string.</t>

<section anchor="aes-gcm"><name>AES-GCM</name>

<section anchor="introduction-3"><name>Introduction</name>

<t>AES-GCM is an AEAD cipher and provides confidentiality and integrity protection.</t>

<t>Examples in this section use the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm for payload encryption: AES-GCM-128
  <list style="symbols">
      <t>k: h'15F785B5C931414411B4B71373A9C0F7'</t>
      <t>IV: h'F14AAB9D81D51F7AD943FE87AF4F70CD'</t>
    </list></t>
  <t>Plaintext: "This is a real firmware image."
  <list style="symbols">
      <t>in hex: 546869732069732061207265616C206669726D7761726520696D6167652E</t>
    </list></t>
</list></t>

</section>
<section anchor="aes-kw-aes-gcm-example"><name>AES-KW + AES-GCM Example</name>

<t>This example uses the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm id for key wrap: A128KW</t>
  <t>KEK COSE_Key (Secret Key):
  <list style="symbols">
      <t>kty: Symmetric</t>
      <t>k: 'aaaaaaaaaaaaaaaa'</t>
      <t>kid: 'kid-1'</t>
    </list></t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608443A10101A10550F14AAB9D81D51F7AD943FE87AF4F70CDF6818340
A2012204456B69642D31581875603FFC9518D794713C8CA8A115A7FB3256
5A6D59534D62
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="aeskw-aesgcm-example"/>.</t>

<figure title="COSE_Encrypt Example for AES Key Wrap" anchor="aeskw-aesgcm-example"><artwork><![CDATA[
96([
  / protected: / << {
    / alg / 1: 1 / AES-GCM-128 /
  } >>,
  / unprotected: / {
    / IV / 5: h'F14AAB9D81D51F7AD943FE87AF4F70CD'
  },
  / payload: / null / detached ciphertext /,
  / recipients: / [
    [
      / protected: / h'',
      / unprotected: / {
        / alg / 1: -3 / A128KW /,
        / kid / 4: 'kid-1'
      },
      / payload: /
        h'75603FFC9518D794713C8CA8A115A7FB32565A6D59534D62'
        / CEK encrypted with KEK /
    ]
  ]
])
]]></artwork></figure>

<t>The encrypted payload (with a line feed added) was:</t>

<figure><artwork><![CDATA[
2F59C3A34D9570FB99A5382E66466A3221A8AD85CE508BA306FB431A60EF
A5AAAA078355070205A4B196832DF17F
]]></artwork></figure>

</section>
<section anchor="ecdh-esaes-kw-aes-gcm-example"><name>ECDH-ES+AES-KW + AES-GCM Example</name>

<t>This example uses the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm for content key distribution: ECDH-ES + A128KW</t>
  <t>KEK COSE_Key (Receiver's Private Key):
  <list style="symbols">
      <t>kty: EC2</t>
      <t>crv: P-256</t>
      <t>x: h'5886CD61DD875862E5AAA820E7A15274C968A9BC96048DDCACE32F50C3651BA3'</t>
      <t>y: h'9EED8125E932CD60C0EAD3650D0A485CF726D378D1B016ED4298B2961E258F1B'</t>
      <t>d: h'60FE6DD6D85D5740A5349B6F91267EEAC5BA81B8CB53EE249E4B4EB102C476B3'</t>
      <t>kid: 'kid-2'</t>
    </list></t>
  <t>KDF Context
  <list style="symbols">
      <t>Algorithm ID: 1 (A128GCM)</t>
      <t>SuppPubInfo
      <list style="symbols">
          <t>keyDataLength: 128</t>
          <t>protected = &lt;&lt; { / alg / 1: -29 / ECDH-ES+A128KW / } &gt;&gt;</t>
          <t>other = 'SUIT Payload Encryption'</t>
        </list></t>
    </list></t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608443A10101A10550F14AAB9D81D51F7AD943FE87AF4F70CDF6818344
A101381CA120A40102200121582038876D8B4552E6BC9484A3F06E3646B3
0AEFF51B95583CFFA0B5776D5273494222582034577AB5DD17276BB6BF15
AA465310371557AFF61FAC5BA5A1EFF46698DD8B7B5818C36BF2E8843246
F0E148DBA607375204A040D8B19629B2B5
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="esdh-aesgcm-example"/>.</t>

<figure title="COSE_Encrypt Example for ES-DH" anchor="esdh-aesgcm-example"><artwork><![CDATA[
96([
  / protected: / << {
    / alg / 1: 1 / AES-GCM-128 /
  } >>,
  / unprotected: / {
    / IV / 5: h'F14AAB9D81D51F7AD943FE87AF4F70CD'
  },
  / payload: / null / detached ciphertext /,
  / recipients: / [
    [
      / protected: / << {
        / alg / 1: -29 / ECDH-ES + A128KW /
      } >>,
      / unprotected: / {
        / ephemeral key / -1: {
          / kty / 1: 2 / EC2 /,
          / crv / -1: 1 / P-256 /,
          / x / -2: h'38876D8B4552E6BC9484A3F06E3646B3
                      0AEFF51B95583CFFA0B5776D52734942',
          / y / -3: h'34577AB5DD17276BB6BF15AA46531037
                      1557AFF61FAC5BA5A1EFF46698DD8B7B'
        }
      },
      / payload:
        / h'C36BF2E8843246F0E148DBA607375204A040D8B19629B2B5'
        / CEK encrypted with KEK /
    ]
  ]
])
]]></artwork></figure>

<t>The encrypted payload (with a line feed added) was:</t>

<figure><artwork><![CDATA[
2F59C3A34D9570FB99A5382E66466A3221A8AD85CE508BA306FB431A60EF
A5AAAA078355070205A4B196832DF17F
]]></artwork></figure>

</section>
</section>
<section anchor="aes-ctr"><name>AES-CTR</name>

<section anchor="introduction-4"><name>Introduction</name>

<t>AES-CTR is a non-AEAD cipher, provides confidentiality but no integrity protection.
Unlike AES-CBC, AES-CTR uses an IV per AES operation, as shown in <xref target="aes-ctr-fig"/>.
Hence, when an image is encrypted using AES-CTR-128 or AES-CTR-256, the IV MUST
start with zero (0) and MUST be incremented by one for each 16-byte plaintext block
within the entire slot.</t>

<t>Using the previous example with a slot size of 64 KiB, the sector size 4096 bytes and
the AES plaintext block size of 16 byte requires IVs from 0 to 255 in the first sector
and 16 * 256 IVs for the remaining sectors in the slot.</t>

<figure title="AES-CTR Operation" anchor="aes-ctr-fig"><artset><artwork  type="svg"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="320" width="248" viewBox="0 0 248 320" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 56,96 L 56,176" fill="none" stroke="black"/>
<path d="M 88,48 L 88,88" fill="none" stroke="black"/>
<path d="M 88,184 L 88,240" fill="none" stroke="black"/>
<path d="M 120,96 L 120,176" fill="none" stroke="black"/>
<path d="M 176,96 L 176,176" fill="none" stroke="black"/>
<path d="M 208,48 L 208,88" fill="none" stroke="black"/>
<path d="M 208,184 L 208,240" fill="none" stroke="black"/>
<path d="M 240,96 L 240,176" fill="none" stroke="black"/>
<path d="M 56,96 L 120,96" fill="none" stroke="black"/>
<path d="M 176,96 L 240,96" fill="none" stroke="black"/>
<path d="M 56,176 L 120,176" fill="none" stroke="black"/>
<path d="M 176,176 L 240,176" fill="none" stroke="black"/>
<path d="M 64,208 L 96,208" fill="none" stroke="black"/>
<path d="M 184,208 L 216,208" fill="none" stroke="black"/>
<g class="text">
<text x="88" y="36">IV1</text>
<text x="208" y="36">IV2</text>
<text x="40" y="148">k--</text>
<text x="80" y="148">E</text>
<text x="160" y="148">k--</text>
<text x="200" y="148">E</text>
<text x="52" y="212">P1</text>
<text x="172" y="212">P2</text>
<text x="92" y="260">C1</text>
<text x="212" y="260">C2</text>
<text x="32" y="292">Legend:</text>
<text x="32" y="308">See</text>
<text x="84" y="308">previous</text>
<text x="156" y="308">diagram.</text>
</g>
</svg>
</artwork><artwork  type="ascii-art"><![CDATA[
         IV1            IV2
          |              |
          |              |
          |              |
      +-------+      +-------+
      |       |      |       |
      |       |      |       |
   k--|  E    |   k--|  E    |
      |       |      |       |
      +-------+      +-------+
          |              |
     P1--(+)        P2--(+)
          |              |
          |              |
          C1             C2

Legend: 
  See previous diagram.
]]></artwork></artset></figure>

<t>Examples in this section use the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm for payload encryption: AES-CTR-128
  <list style="symbols">
      <t>k: h'261DE6165070FB8951EC5D7B92A065FE'</t>
      <t>IV: h'DAE613B2E0DC55F4322BE38BDBA9DC68'</t>
    </list></t>
  <t>Plaintext: "This is a real firmware image."
  <list style="symbols">
      <t>in hex: 546869732069732061207265616C206669726D7761726520696D6167652E</t>
    </list></t>
</list></t>

</section>
<section anchor="aes-kw-aes-ctr-example"><name>AES-KW + AES-CTR Example</name>

<t>This example uses the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm id for key wrap: A128KW</t>
  <t>KEK COSE_Key (Secret Key):
  <list style="symbols">
      <t>kty: Symmetric</t>
      <t>k: 'aaaaaaaaaaaaaaaa'</t>
      <t>kid: 'kid-1'</t>
    </list></t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608440A20139FFFD0550DAE613B2E0DC55F4322BE38BDBA9DC68F68183
40A2012204456B69642D315818CE34035CE5C2E2666E46D4C131FC561DD1
90A6D26CFA1990
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="aeskw-aesctr-example"/>.</t>

<figure title="COSE_Encrypt Example for AES Key Wrap" anchor="aeskw-aesctr-example"><artwork><![CDATA[
96([
  / protected: / h'',
  / unprotected: / {
    / alg / 1: -65534 / A128CTR /,
    / IV / 5: h'DAE613B2E0DC55F4322BE38BDBA9DC68'
  },
  / payload: / null / detached ciphertext /,
  / recipients: / [
    [
      / protected: / h'',
      / unprotected: / {
        / alg / 1: -3 / A128KW /,
        / kid / 4: 'kid-1'
      },
      / payload: /
        h'CE34035CE5C2E2666E46D4C131FC561DD190A6D26CFA1990'
        / CEK encrypted with KEK /
    ]
  ]
])
]]></artwork></figure>

<t>The encrypted payload (with a line feed added) was:</t>

<figure><artwork><![CDATA[
2BB8DB522AE978246CC775C3B0241BD4B0333FFDD2DB70C7EE7A4966E3B7
]]></artwork></figure>

</section>
<section anchor="ecdh-esaes-kw-aes-ctr-example"><name>ECDH-ES+AES-KW + AES-CTR Example</name>

<t>This example uses the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm for content key distribution: ECDH-ES + A128KW</t>
  <t>KEK COSE_Key (Receiver's Private Key):
  <list style="symbols">
      <t>kty: EC2</t>
      <t>crv: P-256</t>
      <t>x: h'5886CD61DD875862E5AAA820E7A15274C968A9BC96048DDCACE32F50C3651BA3'</t>
      <t>y: h'9EED8125E932CD60C0EAD3650D0A485CF726D378D1B016ED4298B2961E258F1B'</t>
      <t>d: h'60FE6DD6D85D5740A5349B6F91267EEAC5BA81B8CB53EE249E4B4EB102C476B3'</t>
      <t>kid: 'kid-2'</t>
    </list></t>
  <t>KDF Context
  <list style="symbols">
      <t>ALgorithm ID: -3 (A128KW)</t>
      <t>SuppPubInfo
      <list style="symbols">
          <t>keyDataLength: 128</t>
          <t>protected = &lt;&lt; { / alg / 1: -3 / A128KW / } &gt;&gt;</t>
          <t>other = 'SUIT Payload Encryption'</t>
        </list></t>
    </list></t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608440A20139FFFD0550DAE613B2E0DC55F4322BE38BDBA9DC68F68183
44A101381CA120A40102200121582050364E4DF3F5E8749D98E4378C04FA
FE643B6ACEE7138382D83F768C7186FB8522582099E6C96BEF3952B12EF8
3921B1749475D767284AA42D74D8923C137B01EDF5A05818E8599DCEE494
4EECA9781D3ECDE3D9C34E1C9FCE8906617F
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="esdh-aesctr-example"/>.</t>

<figure title="COSE_Encrypt Example for ES-DH" anchor="esdh-aesctr-example"><artwork><![CDATA[
96([
  / protected: / h'',
  / unprotected: / {
    / alg / 1: -65534 / A128CTR /,
    / IV / 5: h'DAE613B2E0DC55F4322BE38BDBA9DC68'
  },
  / payload: / null / detached ciphertext /,
  / recipients: / [
    [
      / protected: / << {
        / alg / 1: -29 / ECDH-ES + A128KW /
      } >>,
      / unprotected: / {
        / ephemeral key / -1: {
          / kty / 1: 2 / EC2 /,
          / crv / -1: 1 / P-256 /,
          / x / -2: h'50364E4DF3F5E8749D98E4378C04FAFE643B6ACEE7138382D83F768C7186FB85',
          / y / -3: h'99E6C96BEF3952B12EF83921B1749475D767284AA42D74D8923C137B01EDF5A0'
        }
      },
      / payload: / h'E8599DCEE4944EECA9781D3ECDE3D9C34E1C9FCE8906617F'
        / CEK encrypted with KEK /
    ]
  ]
])
]]></artwork></figure>

<t>The encrypted payload (with a line feed added) was:</t>

<figure><artwork><![CDATA[
2BB8DB522AE978246CC775C3B0241BD4B0333FFDD2DB70C7EE7A4966E3B7
]]></artwork></figure>

</section>
</section>
<section anchor="aes-cbc"><name>AES-CBC</name>

<section anchor="introduction-5"><name>Introduction</name>

<t>AES-CBC is a non-AEAD cipher, provides confidentiality but no integrity protection.
In AES-CBC, a single IV is used for encryption of firmware belonging to a single sector,
since individual AES blocks are chained together, as shown in <xref target="aes-cbc-fig"/>. The
numbering  of sectors in a slot MUST start with zero (0) and MUST increase by one with
every sector till the end of the slot is reached. The IV follows this numbering.</t>

<t>For example, let us assume the slot size of a specific flash controller on an IoT device
is 64 KiB, the sector size 4096 bytes (4 KiB) and AES-128-CBC uses an AES-block size of
128 bit (16 bytes). Hence, sector 0 needs 4096/16=256 AES-128-CBC operations using IV 0.
If the firmware image fills the entire slot, then that slot contains 16 sectors, i.e. IVs
ranging from 0 to 15.</t>

<figure title="AES-CBC Operation" anchor="aes-cbc-fig"><artset><artwork  type="svg"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="400" width="232" viewBox="0 0 232 400" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 40,112 L 40,192" fill="none" stroke="black"/>
<path d="M 72,48 L 72,104" fill="none" stroke="black"/>
<path d="M 72,200 L 72,256" fill="none" stroke="black"/>
<path d="M 104,112 L 104,192" fill="none" stroke="black"/>
<path d="M 120,64 L 120,224" fill="none" stroke="black"/>
<path d="M 160,112 L 160,192" fill="none" stroke="black"/>
<path d="M 192,48 L 192,104" fill="none" stroke="black"/>
<path d="M 192,200 L 192,256" fill="none" stroke="black"/>
<path d="M 224,112 L 224,192" fill="none" stroke="black"/>
<path d="M 48,64 L 80,64" fill="none" stroke="black"/>
<path d="M 120,64 L 200,64" fill="none" stroke="black"/>
<path d="M 40,112 L 104,112" fill="none" stroke="black"/>
<path d="M 160,112 L 224,112" fill="none" stroke="black"/>
<path d="M 40,192 L 104,192" fill="none" stroke="black"/>
<path d="M 160,192 L 224,192" fill="none" stroke="black"/>
<path d="M 72,224 L 120,224" fill="none" stroke="black"/>
<path d="M 24,384 L 40,384" fill="none" stroke="black"/>
<g class="text">
<text x="68" y="36">P1</text>
<text x="196" y="36">P2</text>
<text x="36" y="68">IV</text>
<text x="24" y="164">k--</text>
<text x="64" y="164">E</text>
<text x="144" y="164">k--</text>
<text x="184" y="164">E</text>
<text x="76" y="276">C1</text>
<text x="196" y="276">C2</text>
<text x="32" y="308">Legend:</text>
<text x="28" y="324">Pi</text>
<text x="48" y="324">=</text>
<text x="96" y="324">Plaintext</text>
<text x="164" y="324">blocks</text>
<text x="28" y="340">Ci</text>
<text x="48" y="340">=</text>
<text x="100" y="340">Ciphertext</text>
<text x="172" y="340">blocks</text>
<text x="24" y="356">E</text>
<text x="40" y="356">=</text>
<text x="92" y="356">Encryption</text>
<text x="172" y="356">function</text>
<text x="24" y="372">k</text>
<text x="40" y="372">=</text>
<text x="88" y="372">Symmetric</text>
<text x="144" y="372">key</text>
<text x="56" y="388">=</text>
<text x="80" y="388">XOR</text>
<text x="136" y="388">operation</text>
</g>
</svg>
</artwork><artwork  type="ascii-art"><![CDATA[
       P1              P2
        |              |
   IV--(+)    +-------(+)
        |     |        |
        |     |        |
    +-------+ |    +-------+
    |       | |    |       |
    |       | |    |       |
 k--|  E    | | k--|  E    |
    |       | |    |       |
    +-------+ |    +-------+
        |     |        |
        +-----+        |
        |              |
        |              |
        C1             C2

Legend: 
  Pi = Plaintext blocks
  Ci = Ciphertext blocks
  E = Encryption function
  k = Symmetric key
  (+) = XOR operation
]]></artwork></artset></figure>

<t>Examples in this section use the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm for payload encryption: AES-CTR-128
  <list style="symbols">
      <t>k: h'627FCF0EA82C967D5ED8981EB325F303'</t>
      <t>IV: h'93702C81590F845D9EC866CCAC767BD1'</t>
    </list></t>
  <t>Plaintext: "This is a real firmware image."
  <list style="symbols">
      <t>in hex: 546869732069732061207265616C206669726D7761726520696D6167652E</t>
    </list></t>
</list></t>

</section>
<section anchor="aes-kw-aes-cbc-example"><name>AES-KW + AES-CBC Example</name>

<t>This example uses the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm id for key wrap: A128KW</t>
  <t>KEK COSE_Key (Secret Key):
  <list style="symbols">
      <t>kty: Symmetric</t>
      <t>k: 'aaaaaaaaaaaaaaaa'</t>
      <t>kid: 'kid-1'</t>
    </list></t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608440A20139FFFA055093702C81590F845D9EC866CCAC767BD1F68183
40A2012204456B69642D315818E198FF269626EC43299D33586FC7B2646B
13292261160422
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="aeskw-aescbc-example"/>.</t>

<figure title="COSE_Encrypt Example for AES Key Wrap" anchor="aeskw-aescbc-example"><artwork><![CDATA[
96([
  / protected: / h'',
  / unprotected: / {
    / alg / 1: -65531 / A128CBC /,
    / IV / 5: h'93702C81590F845D9EC866CCAC767BD1'
  },
  / payload: / null / detached ciphertext /,
  / recipients: / [
    [
      / protected: / h'',
      / unprotected: / {
        / alg / 1: -3 / A128KW /,
        / kid / 4: 'kid-1'
      },
      / payload: /
        h'E198FF269626EC43299D33586FC7B2646B13292261160422'
        / CEK encrypted with KEK /
    ]
  ]
])
]]></artwork></figure>

<t>The encrypted payload (with a line feed added) was:</t>

<figure><artwork><![CDATA[
9C09156CF4ACE0401086D98586E0B09FA5B5CF78F2BCCBF6C914DDB42BF0
E21E
]]></artwork></figure>

</section>
<section anchor="ecdh-esaes-kw-aes-cbc-example"><name>ECDH-ES+AES-KW + AES-CBC Example</name>

<t>This example uses the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm for content key distribution: ECDH-ES + A128KW</t>
  <t>KEK COSE_Key (Receiver's Private Key):
  <list style="symbols">
      <t>kty: EC2</t>
      <t>crv: P-256</t>
      <t>x: h'5886CD61DD875862E5AAA820E7A15274C968A9BC96048DDCACE32F50C3651BA3'</t>
      <t>y: h'9EED8125E932CD60C0EAD3650D0A485CF726D378D1B016ED4298B2961E258F1B'</t>
      <t>d: h'60FE6DD6D85D5740A5349B6F91267EEAC5BA81B8CB53EE249E4B4EB102C476B3'</t>
      <t>kid: 'kid-2'</t>
    </list></t>
  <t>KDF Context
  <list style="symbols">
      <t>Algorithm ID: -65531 (A128CBC)</t>
      <t>SuppPubInfo
      <list style="symbols">
          <t>keyDataLength: 128</t>
          <t>protected = h''</t>
          <t>other = 'SUIT Payload Encryption'</t>
        </list></t>
    </list></t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608440A20139FFFA055093702C81590F845D9EC866CCAC767BD1F68183
44A101381CA120A401022001215820BC6A2DCD5025C8C0F7A5D120EB3E45
8CA722F8FB94BD56A24709CB15A869748922582010136574F673511540FE
2A8589A7EDA372CB7B1AF94A8E1B4B94F6BDBD98AA185818AC8CDFB54264
22298FCF235EB5F24D9E4C44C1689167473A
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="esdh-aescbc-example"/>.</t>

<figure title="COSE_Encrypt Example for ES-DH" anchor="esdh-aescbc-example"><artwork><![CDATA[
96([
  / protected: / h'',
  / unprotected: / {
    / alg / 1: -65531 / A128CBC /,
    / IV / 5: h'93702C81590F845D9EC866CCAC767BD1'
  },
  / payload: / null / detached ciphertext /,
  / recipients: / [
    [
      / protected: / << {
        / alg / 1: -29 / ECDH-ES + A128KW /
      } >>,
      / unprotected: / {
        / ephemeral key / -1: {
          / kty / 1: 2 / EC2 /,
          / crv / -1: 1 / P-256 /,
          / x / -2: h'BC6A2DCD5025C8C0F7A5D120EB3E458CA722F8FB94BD56A24709CB15A8697489',
          / y / -3: h'10136574F673511540FE2A8589A7EDA372CB7B1AF94A8E1B4B94F6BDBD98AA18'
        }
      },
      / payload: / h'AC8CDFB5426422298FCF235EB5F24D9E4C44C1689167473A'
        / CEK encrypted with KEK /
    ]
  ]
])
]]></artwork></figure>

<t>The encrypted payload (with a line feed added) was:</t>

<figure><artwork><![CDATA[
9C09156CF4ACE0401086D98586E0B09FA5B5CF78F2BCCBF6C914DDB42BF0
E21E
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="integrity-check-on-encrypted-and-decrypted-payloads"><name>Integrity Check on Encrypted and Decrypted Payloads</name>

<t>In addition to suit-condition-image-match (see Section 8.4.9.2 of 
<xref target="I-D.ietf-suit-manifest"/>),
AEAD algorithms used for content encryption provides another way
to validate the integrity of components.
This section provides a guideline to construct secure but not redundant
SUIT Manifest for encrypted payloads.</t>

<section anchor="validating-payload-integrity"><name>Validating Payload Integrity</name>

<t>This sub-section explains three ways to validate the integrity
of payloads.</t>

<section anchor="image-match-after-decryption"><name>Image Match after Decryption</name>

<t>The suit-condition-image-match on the plaintext payload is used after decryption.
An example command sequence is shown in <xref target="_figure-image-match-after-decryption"/>.</t>

<figure title="Check Image Match After Decryption" anchor="_figure-image-match-after-decryption"><artwork><![CDATA[
/ directive-set-component-index / 12, 1,
/ directive-override-parameters / 20, {
  / parameter-uri / 21: "http://example.com/encrypted.bin"
},
/ directive-fetch / 21, 15,

/ directive-set-component-index / 12, 0,
/ directive-override-parameters / 20, {
  / parameter-image-digest / 3: << {
    / algorithm-id: / -16 / SHA256 /,
    / digest-bytes: / h'3B1...92A' / digest of plaintext payload /
  } >>,
  / parameter-image-size / 14: 30 / size of plaintext payload /,
  / parameter-encryption-info / TBD19: h'369...50F',
  / parameter-source-component / 22: 1
},
/ directive-copy / 22, 15,
/ condition-image-match / 3, 15 / integrity check on decrypted payload /,
]]></artwork></figure>

<t>RFC Editor's Note (TBD19): The value for the suit-parameter-encryption-info
parameter is set to 19, as the proposed value.</t>

</section>
<section anchor="image-match-before-decryption"><name>Image Match before Decryption</name>

<t>The suit-condition-image-match can also be applied on encrypted payloads
before decryption takes place. An example command sequence is shown in
<xref target="_figure-image-match-before-decryption"/>.</t>

<t>This option mitigates battery exhaustion attacks discussed in <xref target="sec-cons"/>.</t>

<figure title="Check Image Match Before Decryption" anchor="_figure-image-match-before-decryption"><artwork><![CDATA[
/ directive-set-component-index / 12, 1,
/ directive-override-parameters / 20, {
  / parameter-image-digest / 3: << {
    / algorithm-id: / -16 / SHA256 /,
    / digest-bytes: / h'8B4...D34' / digest of encrypted payload /
  } >>,
  / parameter-image-size / 14: 30 / size of encrypted payload /,
  / parameter-uri / 21: "http://example.com/encrypted.bin"
},
/ directive-fetch / 21, 15,
/ condition-image-match / 3, 15 / integrity check on encrypted payload /,

/ directive-set-component-index / 12, 0,
/ directive-override-parameters / 20, {
  / parameter-encryption-info / TBD19: h'D86...1F0',
  / parameter-source-component / 22: 1
},
/ directive-copy / 22, 15,
]]></artwork></figure>

<t>RFC Editor's Note (TBD19): The value for the suit-parameter-encryption-info
parameter is set to 19, as the proposed value.</t>

</section>
<section anchor="checking-authentication-tag-while-decrypting"><name>Checking Authentication Tag while Decrypting</name>

<t>AEAD algorithms, such as AES-GCM and ChaCha20/Poly1305, verify the integrity of
the encrypted concent.</t>

</section>
</section>
<section anchor="payload-integrity-validation"><name>Payload Integrity Validation</name>

<t>This sub-section provides a guideline to decide
how to validate the integrity of the payloads with the SUIT manifest.
<xref target="payload-integrity-decision-tree"/> illustrates a decision tree
to decide how to establish payload integrity.</t>

<figure title="Decision Tree: Validating the Payload" anchor="payload-integrity-decision-tree"><artset><artwork  type="svg"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="400" width="408" viewBox="0 0 408 400" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,64" fill="none" stroke="black"/>
<path d="M 8,352 L 8,368" fill="none" stroke="black"/>
<path d="M 24,64 L 24,328" fill="none" stroke="black"/>
<path d="M 64,240 L 64,272" fill="none" stroke="black"/>
<path d="M 80,272 L 80,328" fill="none" stroke="black"/>
<path d="M 96,352 L 96,368" fill="none" stroke="black"/>
<path d="M 136,128 L 136,176" fill="none" stroke="black"/>
<path d="M 136,352 L 136,368" fill="none" stroke="black"/>
<path d="M 152,176 L 152,232" fill="none" stroke="black"/>
<path d="M 192,272 L 192,328" fill="none" stroke="black"/>
<path d="M 208,240 L 208,272" fill="none" stroke="black"/>
<path d="M 248,352 L 248,368" fill="none" stroke="black"/>
<path d="M 288,352 L 288,368" fill="none" stroke="black"/>
<path d="M 384,64 L 384,120" fill="none" stroke="black"/>
<path d="M 384,176 L 384,328" fill="none" stroke="black"/>
<path d="M 400,32 L 400,64" fill="none" stroke="black"/>
<path d="M 400,128 L 400,176" fill="none" stroke="black"/>
<path d="M 400,352 L 400,368" fill="none" stroke="black"/>
<path d="M 8,32 L 400,32" fill="none" stroke="black"/>
<path d="M 8,64 L 400,64" fill="none" stroke="black"/>
<path d="M 136,128 L 400,128" fill="none" stroke="black"/>
<path d="M 136,176 L 400,176" fill="none" stroke="black"/>
<path d="M 64,240 L 208,240" fill="none" stroke="black"/>
<path d="M 64,272 L 208,272" fill="none" stroke="black"/>
<path d="M 24,336 L 80,336" fill="none" stroke="black"/>
<path d="M 152,336 L 232,336" fill="none" stroke="black"/>
<path d="M 304,336 L 384,336" fill="none" stroke="black"/>
<path d="M 24,384 L 80,384" fill="none" stroke="black"/>
<path d="M 152,384 L 232,384" fill="none" stroke="black"/>
<path d="M 304,384 L 384,384" fill="none" stroke="black"/>
<path d="M 24,336 C 15.16936,336 8,343.16936 8,352" fill="none" stroke="black"/>
<path d="M 80,336 C 88.83064,336 96,343.16936 96,352" fill="none" stroke="black"/>
<path d="M 152,336 C 143.16936,336 136,343.16936 136,352" fill="none" stroke="black"/>
<path d="M 232,336 C 240.83064,336 248,343.16936 248,352" fill="none" stroke="black"/>
<path d="M 304,336 C 295.16936,336 288,343.16936 288,352" fill="none" stroke="black"/>
<path d="M 384,336 C 392.83064,336 400,343.16936 400,352" fill="none" stroke="black"/>
<path d="M 24,384 C 15.16936,384 8,376.83064 8,368" fill="none" stroke="black"/>
<path d="M 80,384 C 88.83064,384 96,376.83064 96,368" fill="none" stroke="black"/>
<path d="M 152,384 C 143.16936,384 136,376.83064 136,368" fill="none" stroke="black"/>
<path d="M 232,384 C 240.83064,384 248,376.83064 248,368" fill="none" stroke="black"/>
<path d="M 304,384 C 295.16936,384 288,376.83064 288,368" fill="none" stroke="black"/>
<path d="M 384,384 C 392.83064,384 400,376.83064 400,368" fill="none" stroke="black"/>
<polygon class="arrowhead" points="392,328 380,322.4 380,333.6 " fill="black" transform="rotate(90,384,328)"/>
<polygon class="arrowhead" points="392,120 380,114.4 380,125.6 " fill="black" transform="rotate(90,384,120)"/>
<polygon class="arrowhead" points="200,328 188,322.4 188,333.6 " fill="black" transform="rotate(90,192,328)"/>
<polygon class="arrowhead" points="160,232 148,226.4 148,237.6 " fill="black" transform="rotate(90,152,232)"/>
<polygon class="arrowhead" points="88,328 76,322.4 76,333.6 " fill="black" transform="rotate(90,80,328)"/>
<polygon class="arrowhead" points="32,328 20,322.4 20,333.6 " fill="black" transform="rotate(90,24,328)"/>
<g class="text">
<text x="136" y="52">Q1.</text>
<text x="184" y="52">Payload</text>
<text x="252" y="52">Delivery</text>
<text x="44" y="100">in</text>
<text x="88" y="100">Content</text>
<text x="348" y="100">others</text>
<text x="200" y="148">Q2.</text>
<text x="252" y="148">Mitigate</text>
<text x="320" y="148">Battery</text>
<text x="236" y="164">Exhaustion</text>
<text x="312" y="164">Attacks</text>
<text x="172" y="212">No</text>
<text x="360" y="212">Yes</text>
<text x="88" y="260">Q3.</text>
<text x="124" y="260">AEAD</text>
<text x="172" y="260">cipher</text>
<text x="104" y="308">Yes</text>
<text x="172" y="308">No</text>
<text x="48" y="356">NOT</text>
<text x="192" y="356">AFTER</text>
<text x="340" y="356">BEFORE</text>
<text x="52" y="372">Required</text>
<text x="188" y="372">Decryption</text>
<text x="340" y="372">Decryption</text>
</g>
</svg>
</artwork><artwork  type="ascii-art"><![CDATA[
+------------------------------------------------+
|              Q1. Payload Delivery              |
+-+--------------------------------------------+-+
  |                                            |
  | in Content                          others |
  |                                            v
  |             +--------------------------------+
  |             |      Q2. Mitigate Battery      |
  |             |       Exhaustion Attacks       |
  |             +-+----------------------------+-+
  |               |                            |
  |               | No                     Yes |
  |               v                            |
  |    +-----------------+                     |
  |    | Q3. AEAD cipher |                     |
  |    +-+-------------+-+                     |
  |      |             |                       |
  |      | Yes      No |                       |
  v      v             v                       v
 .+------+.      .-----+-----.      .----------+.
|   NOT    |    |    AFTER    |    |   BEFORE    |
| Required |    | Decryption  |    | Decryption  |
 '--------'      '-----------'      '-----------'
]]></artwork></artset></figure>

<t>There are three conditions:</t>

<t><list style="symbols">
  <t>Q1. How does the recipient get the encrypted payload?
If the encrypted payload is an integrated payload,
its integrity is already validated with the suit-authentication-wrapper.
Hence, an additional integrity check is not required.</t>
  <t>Q2. Does the sender want to mitigate battery exhaustion attacks?
If yes, the encrypted payload has to be validated before decryption.</t>
  <t>Q3. Is the payload encrypted with an AEAD cipher?
If yes, the additional integrity check is not required because the recipient validates
the integrity of the payload while decrypting it. If no, validating its integrity
may take place either before or after decryption. Validating the integrity
before decryption is RECOMMENDED.</t>
</list></t>

</section>
</section>
<section anchor="flash"><name>Firmware Updates on IoT Devices with Flash Memory</name>

<t>There are many flavors of embedded devices, the market is large and fragmented.
Hence, it is likely that some implementations and deployments implement their
firmware update procedure differently than described below. On a positive note,
the SUIT manifest allows different deployment scenarios to be supported easily
thanks to the "scripting" functionality offered by the commands.</t>

<t>This section is specific to firmware images on microcontrollers and does
not apply to generic software, configuration data, and machine learning models. 
The differences are the result of two aspects:</t>

<t><list style="symbols">
  <t>Use of flash memory: Flash memory on microcontrollers is a type of non-volatile
memory that erases data in larger units called blocks, pages, or sectors and
re-writes data at the byte level (often 4-bytes) or larger units. Flash memory
is furthermore segmented into different memory regions, which store the
bootloader, different versions of firmware images (in so-called slots), and
configuration data. <xref target="image-layout"/> shows an example layout of a microcontroller
flash area.</t>
  <t>Microcontroller Design: Code on microcontrollers typically cannot be executed
from an arbitrary place in flash memory without extra software
development and design efforts. Hence, developers often compile firmware such
that the bootloader can execute the code from a specific location in flash
memory. Often, the location where the to-be-booted firmware image is found is
called "primary slot".</t>
</list></t>

<t>When the encrypted firmware image has been transferred to the device, it will
typically be stored in a dedicated area called the "secondary slot".</t>

<t>At the next boot, the bootloader will recognize a new firmware image and will
start decrypting the downloaded image sector-by-sector and will swap it with
the image found in the primary slot. This approach of swapping the newly
downloaded image with the previously valid image requires two slots to allow
the update to be reversed in case the newly obtained firmware image fails to
boot. This adds robustness to the firmware update procedure.</t>

<t>The swap will only take place after the signature on the plaintext is verified.
Note that the plaintext firmware image is available in the primary slot only after
the swap has been completed, unless "dummy decrypt" is used to compute the hash
over the plaintext prior to executing the decrypt operation during a swap.
Dummy decryption here refers to the decryption of the firmware image found in
the secondary slot sector-by-sector and computing a rolling hash over the resulting
plaintext firmware image (also sector-by-sector) without performing the swap operation.
While there are performance optimizations possible, such as conveying hashes for
each sector in the manifest rather than a hash of the entire firmware image,
such optimizations are not described in this specification.</t>

<t>Without hardware-based, on-the-fly decryption the image in the primary
slot is available in cleartext. It may need to be re-encrypted before copying it
to the secondary slot. This may be necessary when the secondary slot has different
access permissions or when it is located in off-chip flash memory. Off-chip flash
memory tends to be more vulnerable to physical attacks.</t>

<figure title="Example Flash Area Layout" anchor="image-layout"><artset><artwork  type="svg"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="544" width="424" viewBox="0 0 424 544" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,528" fill="none" stroke="black"/>
<path d="M 416,32 L 416,528" fill="none" stroke="black"/>
<path d="M 8,32 L 416,32" fill="none" stroke="black"/>
<path d="M 8,64 L 416,64" fill="none" stroke="black"/>
<path d="M 8,256 L 416,256" fill="none" stroke="black"/>
<path d="M 8,448 L 416,448" fill="none" stroke="black"/>
<path d="M 8,496 L 416,496" fill="none" stroke="black"/>
<path d="M 8,528 L 416,528" fill="none" stroke="black"/>
<g class="text">
<text x="60" y="52">Bootloader</text>
<text x="48" y="84">Primary</text>
<text x="100" y="84">Slot</text>
<text x="360" y="100">(sector</text>
<text x="404" y="100">1)</text>
<text x="212" y="116">..................................................</text>
<text x="360" y="148">(sector</text>
<text x="404" y="148">2)</text>
<text x="212" y="164">..................................................</text>
<text x="360" y="196">(sector</text>
<text x="404" y="196">3)</text>
<text x="212" y="212">..................................................</text>
<text x="360" y="244">(sector</text>
<text x="404" y="244">4)</text>
<text x="56" y="276">Secondary</text>
<text x="116" y="276">Slot</text>
<text x="360" y="292">(sector</text>
<text x="404" y="292">1)</text>
<text x="212" y="308">..................................................</text>
<text x="360" y="340">(sector</text>
<text x="404" y="340">2)</text>
<text x="212" y="356">..................................................</text>
<text x="360" y="388">(sector</text>
<text x="404" y="388">3)</text>
<text x="212" y="404">..................................................</text>
<text x="360" y="436">(sector</text>
<text x="404" y="436">4)</text>
<text x="36" y="468">Swap</text>
<text x="76" y="468">Area</text>
<text x="72" y="516">Configuration</text>
<text x="148" y="516">Data</text>
</g>
</svg>
</artwork><artwork  type="ascii-art"><![CDATA[
+--------------------------------------------------+
| Bootloader                                       |
+--------------------------------------------------+
| Primary Slot                                     |
|                                        (sector 1)|
|..................................................|
|                                                  |
|                                        (sector 2)|
|..................................................|
|                                                  |
|                                        (sector 3)|
|..................................................|
|                                                  |
|                                        (sector 4)|
+--------------------------------------------------+
| Secondary Slot                                   |
|                                        (sector 1)|
|..................................................|
|                                                  |
|                                        (sector 2)|
|..................................................|
|                                                  |
|                                        (sector 3)|
|..................................................|
|                                                  |
|                                        (sector 4)|
+--------------------------------------------------+
| Swap Area                                        |
|                                                  |
+--------------------------------------------------+
| Configuration Data                               |
+--------------------------------------------------+
]]></artwork></artset></figure>

<t>The ability to restart an interrupted firmware update is often a requirement
for unattended devices and the same is true for low-end, constrained IoT devices.
To fulfill this requirement it is necessary to chunk
a firmware image into sectors and to encrypt each sector individually
using a cipher that does not increase the size of the resulting ciphertext
(i.e., by not adding an authentication tag after each encrypted block).</t>

<t>When an update gets aborted while the bootloader is decrypting the newly obtained
image and swapping the sectors, the bootloader can restart where it left off. This
technique offers robustness and better performance.</t>

<t>For this purpose, ciphers without integrity protection are used to encrypt the
firmware image. Integrity protection of the firmware image MUST be provided
and the suit-parameter-image-digest, defined in Section 8.4.8.6 of
<xref target="I-D.ietf-suit-manifest"/>, MUST be used.</t>

<t><xref target="RFC9459"/> registers AES Counter (AES-CTR) mode and AES Cipher Block Chaining
(AES-CBC) ciphers that do not offer integrity protection. These ciphers are useful
for use cases that require firmware encryption on IoT devices. For many other use
cases where software packages, configuration information or personalization data
need to be encrypted, the use of AEAD ciphers is RECOMMENDED.</t>

<t>The following sub-sections provide further information about the initialization vector
(IV) selection for use with AES-CBC and AES-CTR in the firmware encryption context. An
IV MUST NOT be re-used when the same key is used. For this application, the IVs are
not random but rather based on the slot/sector-combination in flash memory. The
text below assumes that the block-size of AES is (much) smaller than the sector size. The
typical sector-size of flash memory is in the order of KiB. Hence, multiple AES blocks
need to be decrypted until an entire sector is completed.</t>

</section>
<section anchor="complete-examples"><name>Complete Examples</name>

<t>The following manifests exemplify how to deliver encrypted payload and its
encryption info to devices.</t>

<t>HMAC-256 MAC are added in AES-KW examples using the following secret key:</t>

<figure><artwork><![CDATA[
  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
  (616161... in hex, and its length is 32)
]]></artwork></figure>

<t>ES-DH examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA-256 as the digest function.</t>

<section anchor="example-AES-KW-write"><name>AES Key Wrap Example with Write Directive</name>

<t>The following SUIT manifest requests a parser
to authenticate the manifest with COSE_Mac0 HMAC256, to write and 
decrypt the
encrypted payload into a component with the suit-directive-write
directive.</t>

<t>The SUIT manifest in diagnostic notation (with line breaks added
for readability) is shown here:</t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'536EC695E423342FF57FA89B3E3C12C0
                          F9257992F7D96F017281782D2DF1C50F'
    ] >>,
    << / COSE_Mac0_Tagged / 17([
      / protected: / << {
        / algorithm-id / 1: 5 / HMAC256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / tag: / h'3B70571169B0FEE5E6220BF86E5E973F
                 7F32875495908EDAA91EC994BCA44B29'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 1,
    / common / 3: << {
      / components / 2: [
        ['plaintext-firmware']
      ]
    } >>,
    / install / 17: << [
      / fetch encrypted firmware /
      / directive-override-parameters / 20, {
        / parameter-content / 18:
          h'2F59C3A34D9570FB99A5382E66466A3221A8AD85CE508B
            A306FB431A60EFA5AAAA078355070205A4B196832DF17F',
        / parameter-encryption-info / 19: << 96([
          / protected: / << {
            / alg / 1: 1 / AES-GCM-128 /
          } >>,
          / unprotected: / {
            / IV / 5: h'F14AAB9D81D51F7AD943FE87AF4F70CD'
          },
          / payload: / null / detached ciphertext /,
          / recipients: / [
            [
              / protected: / << {
              } >>,
              / unprotected: / {
                / alg / 1: -3 / A128KW /,
                / kid / 4: 'kid-1'
              },
              / payload: /
                h'75603FFC9518D794713C8CA8A115A7FB32565A6D59534D62'
                / CEK encrypted with KEK /
            ]
          ]
        ]) >>
      },

      / decrypt encrypted firmware /
      / directive-write / 18, 15
        / consumes the SUIT_Encryption_Info above /
    ] >>
  } >>
})
]]></artwork></figure>

<t>In hex format, the SUIT manifest is this:</t>

<figure><artwork><![CDATA[
D86BA2025853825824822F5820536EC695E423342FF57FA89B3E3C12C0F9
257992F7D96F017281782D2DF1C50F582AD18443A10105A0F658203B7057
1169B0FEE5E6220BF86E5E973F7F32875495908EDAA91EC994BCA44B2903
589DA4010102010357A102818152706C61696E746578742D6669726D7761
726511587C8414A212582E2F59C3A34D9570FB99A5382E66466A3221A8AD
85CE508BA306FB431A60EFA5AAAA078355070205A4B196832DF17F135843
D8608443A10101A10550F14AAB9D81D51F7AD943FE87AF4F70CDF6818341
A0A2012204456B69642D31581875603FFC9518D794713C8CA8A115A7FB32
565A6D59534D62120F
]]></artwork></figure>

</section>
<section anchor="example-AES-KW-copy"><name>AES Key Wrap Example with Fetch + Copy Directives</name>

<t>The following SUIT manifest requests a parser to fetch the encrypted
payload and to store it. Then, the payload is decrypted and stored into
another component with the suit-directive-copy directive. This approach
works well on constrained devices with XIP flash memory.</t>

<t>The SUIT manifest in diagnostic notation (with line breaks added for
readability) is shown here:</t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'AAB6A7868C4E43D5983BDE019EF22779
                          21F6F8EF1FCAF9403CA97255BED2CD30'
    ] >>,
    << / COSE_Mac0_Tagged / 17([
      / protected: / << {
        / algorithm-id / 1: 5 / HMAC256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / tag: / h'93B4B774A5D0421ED6FB5EBF890A284C
                 DAC7816CBC048BF47EE7FA7FF3BC02C3'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 1,
    / common / 3: << {
      / components / 2: [
        ['plaintext-firmware'],
        ['encrypted-firmware']
      ]
    } >>,
    / install / 17: << [
      / fetch encrypted firmware /
      / directive-set-component-index / 12, 1 / ['encrypted-firmware'] /,
      / directive-override-parameters / 20, {
        / parameter-image-size / 14: 46,
        / parameter-uri / 21: "https://example.com/encrypted-firmware"
      },
      / directive-fetch / 21, 15,

      / decrypt encrypted firmware /
      / directive-set-component-index / 12, 0 / ['plaintext-firmware'] /,
      / directive-override-parameters / 20, {
        / parameter-encryption-info / 19: << 96([
          / protected: / << {
            / alg / 1: 1 / AES-GCM-128 /
          } >>,
          / unprotected: / {
            / IV / 5: h'F14AAB9D81D51F7AD943FE87AF4F70CD'
          },
          / payload: / null / detached ciphertext /,
          / recipients: / [
            [
              / protected: / << {
              } >>,
              / unprotected: / {
                / alg / 1: -3 / A128KW /,
                / kid / 4: 'kid-1'
              },
              / payload: /
                h'75603FFC9518D794713C8CA8A115A7FB32565A6D59534D62'
                / CEK encrypted with KEK /
            ]
          ]
        ]) >>,
        / parameter-source-component / 22: 1 / ['encrypted-firmware'] /
      },
      / directive-copy / 22, 15 / consumes the SUIT_Encryption_Info above /
    ] >>
  } >>
})
]]></artwork></figure>

<t>In hex format, the SUIT manifest is this:</t>

<figure><artwork><![CDATA[
D86BA2025853825824822F5820AAB6A7868C4E43D5983BDE019EF2277921
F6F8EF1FCAF9403CA97255BED2CD30582AD18443A10105A0F6582093B4B7
74A5D0421ED6FB5EBF890A284CDAC7816CBC048BF47EE7FA7FF3BC02C303
58B7A40101020103582BA102828152706C61696E746578742D6669726D77
6172658152656E637279707465642D6669726D776172651158818C0C0114
A20E182E15782668747470733A2F2F6578616D706C652E636F6D2F656E63
7279707465642D6669726D77617265150F0C0014A2135843D8608443A101
01A10550F14AAB9D81D51F7AD943FE87AF4F70CDF6818341A0A201220445
6B69642D31581875603FFC9518D794713C8CA8A115A7FB32565A6D59534D
621601160F
]]></artwork></figure>

</section>
<section anchor="example-ES-DH-write"><name>ES-DH Example with Write + Copy Directives</name>

<t>The following SUIT manifest requests a parser to authenticate
the manifest with COSE_Sign1 ES256,
to write and decrypt the
encrypted payload into a component with the suit-directive-write
directive.</t>

<t>The SUIT manifest in diagnostic notation (with line breaks added for
readability) is shown here:</t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'CEF034223D7F2C39D676876995B4ED4E
                          8221AC5BF184B6606EE62C41C149C266'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: /
        h'65E59AAB8A35BDE9547458316D1C769F
          FB2CEA304C9FB6151E5C8A88A002A292
          C5B8C63C81B5AC0AE31948B610834E12
          CBDBB2753EA221544B6733076A92EE20'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 1,
    / common / 3: << {
      / components / 2: [
        ['decrypted-firmware']
      ]
    } >>,
    / install / 17: << [
      / directive-set-component-index / 12, 0
        / ['plaintext-firmware'] /,
      / directive-override-parameters / 20, {
        / parameter-content / 18:
          h'344FA2D5AD2F43F6F363DA6FF2C337FE69E33E3D63714D
            23985BF02499EB0E8B231D45C378245DA3611C160CC511',
        / parameter-encryption-info / 19: << 96([
          / protected: / << {
            / alg / 1: 1 / AES-GCM-128 /
          } >>,
          / unprotected: / {
            / IV / 5: h'DAE613B2E0DC55F4322BE38BDBA9DC68'
          },
          / payload: / null / detached ciphertext /,
          / recipients: / [
            [
              / protected: / << {
                / alg / 1: -29 / ECDH-ES + A128KW /
              } >>,
              / unprotected: / {
                / ephemeral key / -1: {
                  / kty / 1: 2 / EC2 /,
                  / crv / -1: 1 / P-256 /,
                  / x / -2: h'FF6E266DABAF51B7207569E31CF72646
                              183E94CEE64FCDC8695AD9A505AEFDEA',
                  / y / -3: h'5FBC4A29844450B3AC22AB30C7F7004B
                              B59D8BD60D7997734A9FA0124B650895'
                },
                / kid / 4: 'kid-2'
              },
              / payload: /
                h'B0E21628283F3E409F8158D8FFCA567F340E379AC39E49C9'
                / CEK encrypted with KEK /
            ]
          ]
        ]) >>
      },
      / directive-write / 18, 15
        / consumes the SUIT_Encryption_Info above /
    ] >>
  } >>
})
]]></artwork></figure>

<t>In hex format, the SUIT manifest is this:</t>

<figure><artwork><![CDATA[
D86BA2025873825824822F5820CEF034223D7F2C39D676876995B4ED4E82
21AC5BF184B6606EE62C41C149C266584AD28443A10126A0F6584065E59A
AB8A35BDE9547458316D1C769FFB2CEA304C9FB6151E5C8A88A002A292C5
B8C63C81B5AC0AE31948B610834E12CBDBB2753EA221544B6733076A92EE
200358ECA4010102010357A1028181526465637279707465642D6669726D
776172651158CB860C0014A212582E344FA2D5AD2F43F6F363DA6FF2C337
FE69E33E3D63714D23985BF02499EB0E8B231D45C378245DA3611C160CC5
11135890D8608443A10101A10550DAE613B2E0DC55F4322BE38BDBA9DC68
F6818344A101381CA220A401022001215820FF6E266DABAF51B7207569E3
1CF72646183E94CEE64FCDC8695AD9A505AEFDEA2258205FBC4A29844450
B3AC22AB30C7F7004BB59D8BD60D7997734A9FA0124B65089504456B6964
2D325818B0E21628283F3E409F8158D8FFCA567F340E379AC39E49C9120F
]]></artwork></figure>

</section>
<section anchor="example-ES-DH-dependency"><name>ES-DH Example with Dependency</name>

<t>The following SUIT manifest requests a parser to resolve the dependency.</t>

<t>The dependent manifest is signed with another key:
~~~
-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIIQa67e56m8CYL5zVaJFiLl30j0qxb8ray2DeUMqH+qYoAoGCCqGSM49
AwEHoUQDQgAEDpCKqPBm2x8ITgw2UsY5Ur2Z8qW9si+eATZ6rQOrpot32hvYrE8M
tJC6IQZIv3mrFk1JrTVR1x0xSydJ7kLSmg==
-----END EC PRIVATE KEY-----
~~~</t>

<t>The dependency manifest is embedded as an integrated-dependency
and referred to by the  "#dependency-manifest" URI.</t>

<t>The SUIT manifest in diagnostic notation (with line breaks added for
readability) is shown here:</t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'6A1D9F42E7B4047D2F54046019AE3ED4
                          3A8ACC467AC16576B17D6F8E633042D2'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: /
        h'DF493BDBF167EFFB40593C5910D33B66
          429721467DF05800EA66A88B91729CD5
          1007981F151FC324745FF43E6F75AAF5
          197DD5EC4AA6BCEFCE43E4B1E35C948E'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 1,
    / common / 3: << {
      / dependencies / 1: {
        / component-index / 1: {
          / dependency-prefix / 1: [
             'dependency-manifest.suit'
          ]
        }
      },
      / components / 2: [
        ['decrypted-firmware']
      ]
    } >>,
    / manifest-component-id / 5: [
      'dependent-manifest.suit'
    ],
    / install / 17: << [
      / NOTE: set SUIT_Encryption_Info /
      / directive-set-component-index / 12, 0
        / ['decrypted-firmware'] /,
      / directive-override-parameters / 20, {
        / parameter-content / 18:
          h'344FA2D5AD2F43F6F363DA6FF2C337FE69E33E3D63714D
            23985BF02499EB0E8B231D45C378245DA3611C160CC511',
        / parameter-encryption-info / 19: << 96([
          / protected: / << {
            / alg / 1: 1 / AES-GCM-128 /
          } >>,
          / unprotected: / {
            / IV / 5: h'DAE613B2E0DC55F4322BE38BDBA9DC68'
          },
          / payload: / null / detached ciphertext /,
          / recipients: / [
            [
              / protected: / << {
                / alg / 1: -29 / ECDH-ES + A128KW /
              } >>,
              / unprotected: / {
                / ephemeral key / -1: {
                  / kty / 1: 2 / EC2 /,
                  / crv / -1: 1 / P-256 /,
                  / x / -2: h'FF6E266DABAF51B7207569E31CF72646
                              183E94CEE64FCDC8695AD9A505AEFDEA',
                  / y / -3: h'5FBC4A29844450B3AC22AB30C7F7004B
                              B59D8BD60D7997734A9FA0124B650895'
                },
                / kid / 4: 'kid-2'
              },
              / payload: /
                h'B0E21628283F3E409F8158D8FFCA567F340E379AC39E49C9'
                / CEK encrypted with KEK /
            ]
          ]
        ]) >>
      },

      / NOTE: call dependency-manifest /
      / directive-set-component-index / 12, 1
        / ['dependenty-manifest.suit'] /,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / algorithm-id / -16 / SHA256 /,
          / digest-bytes / h'1051324059C5193317CAC9A099BBC0B6
                             AFB56184C04277F566A3A4131F4A1C25'
        ] >>,
        / parameter-image-size / 14: 247,
        / parameter-uri / 21: "#dependency-manifest"
      },
      / directive-fetch / 21, 15,
      / condition-dependency-integrity / 7, 15,
      / directive-process-dependency / 11, 15
    ] >>
  } >>,
  "#dependency-manifest": <<
    / SUIT_Envelope_Tagged / 107({
      / authentication-wrapper / 2: << [
        << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: / h'1051324059C5193317CAC9A099BBC0B6
                              AFB56184C04277F566A3A4131F4A1C25'
        ] >>,
        << / COSE_Sign1_Tagged / 18([
          / protected: / << {
            / algorithm-id / 1: -7 / ES256 /
          } >>,
          / unprotected: / {},
          / payload: / null,
          / signature: /
            h'55990F3745DC4F200FF946643A6DE30D
              DCE57B080B7D68DE9896D8190B9A63E2
              D60E7C3D9693B67221AA6D07BBF0AB45
              314C236827A242C22B5E688DDC467269'
        ]) >>
      ] >>,
      / manifest / 3: << {
        / manifest-version / 1: 1,
        / manifest-sequence-number / 2: 1,
        / common / 3: << {
          / components / 2: [
            ['decrypted-firmware']
          ],
          / shared-sequence / 4: << [
            / directive-set-componnt-index / 12, 0
              / ['decrypted-firmware'] /,
            / directive-override-parameters / 20, {
              / parameter-image-digest / 3: << [
                / algorithm-id / -16 / SHA256 /,
                / digest-bytes / h'36921488FE6680712F734E11F58D87EE
                                   B66D4B21A8A1AD3441060814DA16D50F'
              ] >>,
              / parameter-image-size / 14: 30
            }
          ] >>
        } >>,
        / manifest-component-id / 5: [
          'dependency-manifest.suit'
        ],
        / validate / 7: << [
          / condition-image-match / 3, 15
        ] >>,
        / install / 17: << [
          / directive-set-component-index / 12, 0
            / ['decrypted-firmware'] /,
          / directive-write / 18, 15
            / consumes the SUIT_Encryption_Info set by dependent /,
          / condition-image-match / 3, 15
            / check the integrity of the decrypted payload /
        ] >>
      } >>
    })
  >>
})
]]></artwork></figure>

<t>In hex format, the SUIT manifest is this:</t>

<figure><artwork><![CDATA[
D86BA3025873825824822F58206A1D9F42E7B4047D2F54046019AE3ED43A
8ACC467AC16576B17D6F8E633042D2584AD28443A10126A0F65840DF493B
DBF167EFFB40593C5910D33B66429721467DF05800EA66A88B91729CD510
07981F151FC324745FF43E6F75AAF5197DD5EC4AA6BCEFCE43E4B1E35C94
8E03590170A501010201035837A201A101A101815818646570656E64656E
63792D6D616E69666573742E73756974028181526465637279707465642D
6669726D77617265058157646570656E64656E742D6D616E69666573742E
73756974115901138E0C0014A212582E344FA2D5AD2F43F6F363DA6FF2C3
37FE69E33E3D63714D23985BF02499EB0E8B231D45C378245DA3611C160C
C511135890D8608443A10101A10550DAE613B2E0DC55F4322BE38BDBA9DC
68F6818344A101381CA220A401022001215820FF6E266DABAF51B7207569
E31CF72646183E94CEE64FCDC8695AD9A505AEFDEA2258205FBC4A298444
50B3AC22AB30C7F7004BB59D8BD60D7997734A9FA0124B65089504456B69
642D325818B0E21628283F3E409F8158D8FFCA567F340E379AC39E49C90C
0114A3035824822F58201051324059C5193317CAC9A099BBC0B6AFB56184
C04277F566A3A4131F4A1C250E18F7157423646570656E64656E63792D6D
616E6966657374150F070F0B0F7423646570656E64656E63792D6D616E69
6665737458F7D86BA2025873825824822F58201051324059C5193317CAC9
A099BBC0B6AFB56184C04277F566A3A4131F4A1C25584AD28443A10126A0
F6584055990F3745DC4F200FF946643A6DE30DDCE57B080B7D68DE9896D8
190B9A63E2D60E7C3D9693B67221AA6D07BBF0AB45314C236827A242C22B
5E688DDC46726903587BA601010201035849A20281815264656372797074
65642D6669726D7761726504582F840C0014A2035824822F582036921488
FE6680712F734E11F58D87EEB66D4B21A8A1AD3441060814DA16D50F0E18
1E05815818646570656E64656E63792D6D616E69666573742E7375697407
4382030F1147860C00120F030F
]]></artwork></figure>

</section>
</section>
<section anchor="operational-considerations"><name>Operational Considerations</name>

<t>The algorithms described in this document assume that the party
performing payload encryption</t>

<t><list style="symbols">
  <t>shares a key-encryption key (KEK) with the recipient
(for use with the AES Key Wrap scheme), or</t>
  <t>is in possession of the public key of the recipient
(for use with ES-DH).</t>
</list></t>

<t>Both cases require some upfront communication interaction
to distribute these keys to the involved communication parties.
This interaction may be provided by a device management protocol,
as described in <xref target="RFC9019"/>, or may be executed earlier in
the lifecycle of the device, for example during manufacturing
or during commissioning. In addition to the keying material
key identifiers and algorithm information need to be provisioned.
This specification places no requirements on the structure of the
key identifier.</t>

<t>In some cases third party companies analyse binaries for known
security vulnerabilities. With encrypted payloads, this type of
analysis is prevented. Consequently, these third party companies
either need to be given access to the plaintext binary before
encryption or they need to become authorized recipients of the
encrypted payloads. In either case, it is necessary to explicitly
consider those third parties in the software supply chain when
such a binary analysis is desired.</t>

</section>
<section anchor="sec-cons"><name>Security Considerations</name>

<t>This entire document is about security.</t>

<t>It is good security practise to use different keys for different purpose.
For example, the KEK used with an AES-KW-based content key distribution
method for encryption should be different from the long-term symmetric key
used for authentication in a communication security protocol.</t>

<t>To further reduce the attack surface it may be beneficial use different
long-term keys for the encryption of different types of payloads. For
example, KEK_1 may be used with an AES-KW content key distribution method
to encrypt a firmware image while KEK_2 would be used to encrypt
configuration data.</t>

<t>A large part of this document is focused on the content key distribution and
two methods are utilized, namely AES Key Wrap (AES-KW) and Ephemeral-Static
Diffie-Hellman (ES-DH). In this table we summarize the main properties with
respect to their deployment:</t>

<figure><artset><artwork  type="svg"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="464" width="520" viewBox="0 0 520 464" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,448" fill="none" stroke="black"/>
<path d="M 136,32 L 136,448" fill="none" stroke="black"/>
<path d="M 144,32 L 144,448" fill="none" stroke="black"/>
<path d="M 248,32 L 248,448" fill="none" stroke="black"/>
<path d="M 376,32 L 376,448" fill="none" stroke="black"/>
<path d="M 512,32 L 512,448" fill="none" stroke="black"/>
<path d="M 8,32 L 512,32" fill="none" stroke="black"/>
<path d="M 8,128 L 512,128" fill="none" stroke="black"/>
<path d="M 8,272 L 512,272" fill="none" stroke="black"/>
<path d="M 8,368 L 512,368" fill="none" stroke="black"/>
<path d="M 8,448 L 512,448" fill="none" stroke="black"/>
<path d="M 128,32 C 136.83064,32 144,39.16936 144,48" fill="none" stroke="black"/>
<path d="M 152,32 C 143.16936,32 136,39.16936 136,48" fill="none" stroke="black"/>
<path d="M 128,128 C 136.83064,128 144,135.16936 144,144" fill="none" stroke="black"/>
<path d="M 128,128 C 136.83064,128 144,120.83064 144,112" fill="none" stroke="black"/>
<path d="M 152,128 C 143.16936,128 136,135.16936 136,144" fill="none" stroke="black"/>
<path d="M 152,128 C 143.16936,128 136,120.83064 136,112" fill="none" stroke="black"/>
<path d="M 128,272 C 136.83064,272 144,279.16936 144,288" fill="none" stroke="black"/>
<path d="M 128,272 C 136.83064,272 144,264.83064 144,256" fill="none" stroke="black"/>
<path d="M 152,272 C 143.16936,272 136,279.16936 136,288" fill="none" stroke="black"/>
<path d="M 152,272 C 143.16936,272 136,264.83064 136,256" fill="none" stroke="black"/>
<path d="M 128,368 C 136.83064,368 144,375.16936 144,384" fill="none" stroke="black"/>
<path d="M 128,368 C 136.83064,368 144,360.83064 144,352" fill="none" stroke="black"/>
<path d="M 152,368 C 143.16936,368 136,375.16936 136,384" fill="none" stroke="black"/>
<path d="M 152,368 C 143.16936,368 136,360.83064 136,352" fill="none" stroke="black"/>
<path d="M 128,448 C 136.83064,448 144,440.83064 144,432" fill="none" stroke="black"/>
<path d="M 152,448 C 143.16936,448 136,440.83064 136,432" fill="none" stroke="black"/>
<g class="text">
<text x="52" y="68">Number</text>
<text x="92" y="68">of</text>
<text x="180" y="68">Same</text>
<text x="216" y="68">key</text>
<text x="280" y="68">One</text>
<text x="312" y="68">key</text>
<text x="408" y="68">One</text>
<text x="440" y="68">Key</text>
<text x="64" y="84">Long-Term</text>
<text x="176" y="84">for</text>
<text x="208" y="84">all</text>
<text x="280" y="84">per</text>
<text x="324" y="84">device</text>
<text x="408" y="84">per</text>
<text x="452" y="84">device</text>
<text x="44" y="100">Keys</text>
<text x="192" y="100">devices</text>
<text x="52" y="164">Number</text>
<text x="92" y="164">of</text>
<text x="188" y="164">Single</text>
<text x="292" y="164">Single</text>
<text x="408" y="164">One</text>
<text x="440" y="164">CEK</text>
<text x="56" y="180">Content</text>
<text x="176" y="180">CEK</text>
<text x="208" y="180">per</text>
<text x="280" y="180">CEK</text>
<text x="312" y="180">per</text>
<text x="408" y="180">per</text>
<text x="456" y="180">payload</text>
<text x="68" y="196">Encryption</text>
<text x="192" y="196">payload</text>
<text x="296" y="196">payload</text>
<text x="436" y="196">encryption</text>
<text x="44" y="212">Keys</text>
<text x="92" y="212">(CEKs)</text>
<text x="188" y="212">shared</text>
<text x="292" y="212">shared</text>
<text x="440" y="212">transaction</text>
<text x="180" y="228">with</text>
<text x="216" y="228">all</text>
<text x="284" y="228">with</text>
<text x="320" y="228">all</text>
<text x="408" y="228">per</text>
<text x="452" y="228">device</text>
<text x="188" y="244">devies</text>
<text x="292" y="244">devies</text>
<text x="40" y="308">Use</text>
<text x="76" y="308">Case</text>
<text x="188" y="308">Legacy</text>
<text x="304" y="308">Efficient</text>
<text x="432" y="308">Point-to-</text>
<text x="184" y="324">Usage</text>
<text x="296" y="324">Payload</text>
<text x="416" y="324">Point</text>
<text x="472" y="324">Payload</text>
<text x="316" y="340">Distribution</text>
<text x="444" y="340">Distribution</text>
<text x="76" y="404">Recommended?</text>
<text x="176" y="404">No,</text>
<text x="208" y="404">bad</text>
<text x="280" y="404">Yes</text>
<text x="408" y="404">Yes</text>
<text x="196" y="420">practice</text>
</g>
</svg>
</artwork><artwork  type="ascii-art"><![CDATA[
+---------------++------------+---------------+----------------+
|               ||            |               |                |
|  Number of    ||  Same key  |  One key      |  One Key       |
|  Long-Term    ||  for all   |  per device   |  per device    |
|  Keys         ||  devices   |               |                |
|               ||            |               |                |
+---------------++------------+---------------+----------------+
|               ||            |               |                |
|  Number of    ||  Single    |  Single       |  One CEK       |
|  Content      ||  CEK per   |  CEK per      |  per payload   |
|  Encryption   ||  payload   |  payload      |  encryption    |
|  Keys (CEKs)  ||  shared    |  shared       |  transaction   |
|               ||  with all  |  with all     |  per device    |
|               ||  devies    |  devies       |                |
|               ||            |               |                |
+---------------++------------+---------------+----------------+
|               ||            |               |                |
|  Use Case     ||  Legacy    |  Efficient    |  Point-to-     |
|               ||  Usage     |  Payload      |  Point Payload |
|               ||            |  Distribution |  Distribution  |
|               ||            |               |                |
+---------------++------------+---------------+----------------+
|               ||            |               |                |
|  Recommended? ||  No, bad   |  Yes          |  Yes           |
|               ||  practice  |               |                |
|               ||            |               |                |
+---------------++------------+---------------+----------------+
]]></artwork></artset></figure>

<t>The use of firmware encryption with IoT devices introduces an battery
exhaustion attack. This attack utilizes the fact that flash memory
operations are energy-expensive. To perform this attacker, the adversary
needs to be able to swap detached payloads and force the device to process
a wrong payload. Swapping the payloads is only possible when there is no
communication security protocol in place between the device and the
distribution system or when the distribution system itself is compromised.
The security features provided by the manifest will detect this attack and
the device will not boot the incorrectly provided payload. However, at this
time the energy-expensive flash operations have already been performed.
Consequently, these operations may reduce the lifetime of devices and
battery powered IoT devices are particularly vulnerable to such an attack.
See <xref target="flash"/> for further discussion about IoT devices using flash memory.</t>

<t>Including the digest of the encrypted payload in the manifest allows the
device to detect a battery exhaustion attack before energy consuming decryption
and flash memory copy or swap operations took place.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>IANA is asked to add the following value to the SUIT Parameters
registry established by Section 11.5 of <xref target="I-D.ietf-suit-manifest"/>:</t>

<figure><artwork><![CDATA[
Label      Name                 Reference
-----------------------------------------
TBD19      Encryption Info      Section 4
]]></artwork></figure>

<t>RFC Editor's Note (TBD19): The value for the Encryption Info
parameter is set to 19, as the proposed value.</t>

</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC3394">
  <front>
    <title>Advanced Encryption Standard (AES) Key Wrap Algorithm</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <date month="September" year="2002"/>
  </front>
  <seriesInfo name="RFC" value="3394"/>
  <seriesInfo name="DOI" value="10.17487/RFC3394"/>
</reference>

<reference anchor="RFC9052">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
      <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="96"/>
  <seriesInfo name="RFC" value="9052"/>
  <seriesInfo name="DOI" value="10.17487/RFC9052"/>
</reference>

<reference anchor="RFC9053">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052).</t>
      <t>This document, along with RFC 9052, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9053"/>
  <seriesInfo name="DOI" value="10.17487/RFC9053"/>
</reference>

<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>


<reference anchor="I-D.ietf-suit-manifest">
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname="Brendan Moran" initials="B." surname="Moran">
         <organization>Arm Limited</organization>
      </author>
      <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
      <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
         <organization>Inria</organization>
      </author>
      <author fullname="Ãyvind RÃ¸nningstad" initials="O." surname="RÃ¸nningstad">
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day="5" month="February" year="2024"/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-25"/>
   
</reference>

<reference anchor="RFC9459">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): AES-CTR and AES-CBC</title>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <date month="September" year="2023"/>
    <abstract>
      <t>The Concise Binary Object Representation (CBOR) data format is designed for small code size and small message size. CBOR Object Signing and Encryption (COSE) is specified in RFC 9052 to provide basic security services using the CBOR data format. This document specifies the conventions for using AES-CTR and AES-CBC as content encryption algorithms with COSE.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9459"/>
  <seriesInfo name="DOI" value="10.17487/RFC9459"/>
</reference>


<reference anchor="I-D.ietf-suit-trust-domains">
   <front>
      <title>SUIT Manifest Extensions for Multiple Trust Domains</title>
      <author fullname="Brendan Moran" initials="B." surname="Moran">
         <organization>Arm Limited</organization>
      </author>
      <author fullname="Ken Takayama" initials="K." surname="Takayama">
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day="4" month="March" year="2024"/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT Manifest format
   (as defined in [I-D.ietf-suit-manifest]) for use in deployments with
   multiple trust domains.  A device has more than one trust domain when
   it enables delegation of different rights to mutually distrusting
   entities for use for different purposes or Components in the context
   of firmware or software update.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-trust-domains-06"/>
   
</reference>




    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC9019">
  <front>
    <title>A Firmware Update Architecture for Internet of Things</title>
    <author fullname="B. Moran" initials="B." surname="Moran"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="D. Brown" initials="D." surname="Brown"/>
    <author fullname="M. Meriac" initials="M." surname="Meriac"/>
    <date month="April" year="2021"/>
    <abstract>
      <t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t>
      <t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9019"/>
  <seriesInfo name="DOI" value="10.17487/RFC9019"/>
</reference>

<reference anchor="RFC9124">
  <front>
    <title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
    <author fullname="B. Moran" initials="B." surname="Moran"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
    <date month="January" year="2022"/>
    <abstract>
      <t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t>
      <t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9124"/>
  <seriesInfo name="DOI" value="10.17487/RFC9124"/>
</reference>

<reference anchor="RFC8937">
  <front>
    <title>Randomness Improvements for Security Protocols</title>
    <author fullname="C. Cremers" initials="C." surname="Cremers"/>
    <author fullname="L. Garratt" initials="L." surname="Garratt"/>
    <author fullname="S. Smyshlyaev" initials="S." surname="Smyshlyaev"/>
    <author fullname="N. Sullivan" initials="N." surname="Sullivan"/>
    <author fullname="C. Wood" initials="C." surname="Wood"/>
    <date month="October" year="2020"/>
    <abstract>
      <t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols. Weak or predictable "cryptographically secure" pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t>
      <t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8937"/>
  <seriesInfo name="DOI" value="10.17487/RFC8937"/>
</reference>

<reference anchor="RFC5652">
  <front>
    <title>Cryptographic Message Syntax (CMS)</title>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <date month="September" year="2009"/>
    <abstract>
      <t>This document describes the Cryptographic Message Syntax (CMS). This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="70"/>
  <seriesInfo name="RFC" value="5652"/>
  <seriesInfo name="DOI" value="10.17487/RFC5652"/>
</reference>

<reference anchor="RFC5280">
  <front>
    <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
    <author fullname="D. Cooper" initials="D." surname="Cooper"/>
    <author fullname="S. Santesson" initials="S." surname="Santesson"/>
    <author fullname="S. Farrell" initials="S." surname="Farrell"/>
    <author fullname="S. Boeyen" initials="S." surname="Boeyen"/>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <author fullname="W. Polk" initials="W." surname="Polk"/>
    <date month="May" year="2008"/>
    <abstract>
      <t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet. An overview of this approach and model is provided as an introduction. The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms. Standard certificate extensions are described and two Internet-specific extensions are defined. A set of required certificate extensions is specified. The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions. An algorithm for X.509 certification path validation is described. An ASN.1 module and examples are provided in the appendices. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5280"/>
  <seriesInfo name="DOI" value="10.17487/RFC5280"/>
</reference>

<reference anchor="RFC5869">
  <front>
    <title>HMAC-based Extract-and-Expand Key Derivation Function (HKDF)</title>
    <author fullname="H. Krawczyk" initials="H." surname="Krawczyk"/>
    <author fullname="P. Eronen" initials="P." surname="Eronen"/>
    <date month="May" year="2010"/>
    <abstract>
      <t>This document specifies a simple Hashed Message Authentication Code (HMAC)-based key derivation function (HKDF), which can be used as a building block in various protocols and applications. The key derivation function (KDF) is intended to support a wide range of applications and requirements, and is conservative in its use of cryptographic hash functions. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5869"/>
  <seriesInfo name="DOI" value="10.17487/RFC5869"/>
</reference>


<reference anchor="iana-suit" target="TBD">
  <front>
    <title>IANA SUIT Manifest Registry</title>
    <author >
      <organization>Internet Assigned Numbers Authority</organization>
    </author>
    <date year="2023"/>
  </front>
</reference>
<reference anchor="ROP" target="https://en.wikipedia.org/wiki/Return-oriented_programming">
  <front>
    <title>Return-Oriented Programming</title>
    <author >
      <organization>Wikipedia</organization>
    </author>
    <date year="2023" month="March"/>
  </front>
</reference>
<reference anchor="SP800-56" target="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Ar3.pdf">
  <front>
    <title>Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography, NIST Special Publication 800-56A Revision 3</title>
    <author >
      <organization>NIST</organization>
    </author>
    <date year="2018" month="April"/>
  </front>
</reference>


    </references>


<?line 2126?>

<section anchor="full-cddl"><name>Full CDDL</name>

<t>The following CDDL must be appended to the SUIT Manifest CDDL. The SUIT CDDL is defined in
Appendix A of <xref target="I-D.ietf-suit-manifest"/></t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Encryption_Info = #6.96(COSE_Encrypt)

$$SUIT_Parameters //= (suit-parameter-encryption-info =>
    bstr .cbor SUIT_Encryption_Info)

suit-parameter-encryption-info = 19
]]></sourcecode></figure>

</section>
<section numbered="no" anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank Henk Birkholz for his feedback on the CDDL description in this document.
Additionally, we would like to thank Michael Richardson, Ãyvind RÃ¸nningstad, Dave Thaler, Laurence
Lundblade, Christian AmsÃ¼ss, Ruud Derwig, and Carsten Bormann for their review feedback. Finally,
we would like to thank Dick Brooks for making us aware of the challenges encryption imposes on
binary analysis.</t>

<t>Reviews from the IESG include Deb Cooley and Roman Danyliw.</t>

</section>


  </back>

<!-- ##markdown-source:
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
PV+q1LbVqUVBeOrjBFewutyqzpGkpVH03ckz48XLkzf+q8h4HP1Ivx60np58
98g/j/yno6ffjW5+/u70qTuE798Fgfj7Ono0+s68jq9PRv7335/7q7/++Le/
Bq+/e/K0Z77BNC3B3348Xf/lgTn823eL5c2fX+Sr8Mmr9w8v0r88v3jpPwt8
/zSaZ1Gcn29+/nn454s379Kk/yxbXP3885PBy/XVQevFg0m6/uGH6cXsys9f
FWePL9dF8GP07vrxs3X+7NFf0uHzkfPswfXSf70u3i9e2s5Td/04/UEsDQhV
w8K0W2nTLAeWvcLABrxFWtaIRmY+KZlnGUJXJGrrm/fx9ejJSaBv4/jyOrr+
8dHj7K8n7/9mBv73P56Iv0P/+2kIGxdd/Dkeffez++Tnn69Of3wz/XG5eR//
Ofd+Th9Gk4PW5P3DhZu/mS9P/jK5fmz2H92snkz8xejpNPjbJH7/0nKvXp3P
3p8Vf74eP5k87V3O1u+fPznN5ufffqtvRH1mEp5IptLv1p4+8gkXRPiiiLbV
ivrJbDxlyV0pUhOF/gG9gkYoIzuND9+I7juMTOw2/LiN4lWHMvJLwvcY40kL
MktnlWJxVVsljU1XoJ7GU9NAlOZ8zplBAxJeoXdLE4QaglCWlK2nDFitxpWU
8arUJ3Qnf1AMsbqKHdXG+MJVebG0YIrDggOGtggN5KiMH0fGX8LcQ1kIi51w
b1/F5+cJ3l63zP7hB4rCbY6BwRhbCsrm24XqDy3uek+Udr25Fqbdc7wo8Ia9
yLUdx7XH415/7A+GIydyAssOzNYuTc8wxkO71x8O7XE/HHpj0+rbA6s/sENM
Vh7gHQu+EKcuMcLEH5bHra2/f3jne5NqlXybEUOuBdjc8dZk84VAvO1ZPgD1
RV5n6Zu9vmV5w5E5jqJe5Nm2ORoPPPhz2HfG25vTHzv2oN9zh72hOYhC3x9a
UTAcuqPAd92RPRR7cgRzbJV787CEPhWALwLr5YOOrIPJdR3a9cfy9kKHczYx
zKhmGHVB7+qdiwfichu/Udbu/c/7yiPSkWLa/Z/EY/633GkMfAdFiq7MWv3j
KoxyGH2DW/ahBpd3iG/XIKFUWuQdPxh3cKydx8X9T0vFXznKal7+fWn577cb
Z7Ydfo+x97Az4s6z9s5OmFdwb+ws5yE/Otg3g36t108r86GGqY7xCTemy5ea
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
3szTa3j9/wEpG7Kb7zwBAA==

-->

</rfc>

