<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.39 (Ruby 3.0.2) -->
<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-suit-firmware-encryption-14" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.18.0 -->
  <front>
    <title abbrev="Encrypted Payloads in SUIT Manifests">Encrypted Payloads in SUIT Manifests</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-suit-firmware-encryption-14"/>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization/>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security">Vigil Security, LLC</organization>
      <address>
        <email>housley@vigilsec.com</email>
      </address>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="D." surname="Brown" fullname="David Brown">
      <organization>Linaro</organization>
      <address>
        <email>david.brown@linaro.org</email>
      </address>
    </author>
    <author initials="K." surname="Takayama" fullname="Ken Takayama">
      <organization>SECOM CO., LTD.</organization>
      <address>
        <email>ken.takayama.ietf@gmail.com</email>
      </address>
    </author>
    <date year="2023" month="August" day="14"/>
    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <?line 86?>

<t>This document specifies techniques for encrypting software, firmware
and personalization data by utilizing the IETF
SUIT manifest. Key agreement is provided by ephemeral-static (ES)
Diffie-Hellman (DH) and AES Key Wrap (AES-KW). ES-DH
uses public key cryptography while AES-KW uses a pre-shared
key-encryption key. Encryption of the plaintext is
accomplished with conventional symmetric key cryptography.</t>
    </abstract>
  </front>
  <middle>
    <?line 96?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>Vulnerabilities with Internet of Things (IoT) devices have raised the
need for a reliable and secure firmware update mechanism that is also
suitable for constrained devices. To protect firmware images the SUIT manifest
format was developed <xref target="I-D.ietf-suit-manifest"/>. The SUIT manifest provides a
bundle of metadata about the firmware for an IoT device, where to find 
the firmware image, and the devices to which it applies.</t>
      <t>The SUIT information model <xref target="RFC9124"/> details the
information that has to be offered by the SUIT manifest format. In addition to
offering protection against modification, which is provided by a digital
signature or a message authentication code, the firmware image may also
be afforded confidentiality using encryption.</t>
      <t>Encryption prevents third parties, including attackers, from gaining access to
the firmware binary. Hackers typically need intimate knowledge of the target
firmware to mount their attacks. For example, return-oriented programming (ROP)
<xref target="ROP"/> requires access to the binary and encryption makes it much more difficult
to write exploits.</t>
      <t>The SUIT manifest provides the data needed for authorized recipients
of the firmware image to decrypt it. The firmware image is encrypted using a
symmetric key.</t>
      <t>A symmetric key can be established using a variety of mechanisms; this document
defines two approaches for use with the IETF SUIT manifest, namely:</t>
      <ul spacing="normal">
        <li>Ephemeral-Static (ES) Diffie-Hellman (DH), and</li>
        <li>AES Key Wrap (AES-KW) with a pre-shared key-encryption key (KEK).</li>
      </ul>
      <t>The former relies on asymmetric key cryptography while the latter uses symmetric key
cryptography for content key distribution.</t>
      <t>Our goal was to reduce the number of content key distribution options and thereby
increase interoperability between different SUIT manifest parser implementations.</t>
      <t>While the original motivating use case of this document was firmware encryption,
SUIT manifests may require payloads other than firmware images to experience
confidentiality protection, such as</t>
      <ul spacing="normal">
        <li>software packages,</li>
        <li>personalization data,</li>
        <li>configuration data, and</li>
        <li>machine learning models.</li>
      </ul>
      <t>Hence, the term payload is used to generically refer to those objects that may be subject to
encryption.</t>
    </section>
    <section anchor="conventions-and-terminology">
      <name>Conventions and Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>
      <t>This document assumes familiarity with the IETF SUIT manifest <xref target="I-D.ietf-suit-manifest"/>,
the SUIT information model <xref target="RFC9124"/> and the SUIT architecture <xref target="RFC9019"/>.</t>
      <t>The terms sender and recipient have the following meaning:</t>
      <ul spacing="normal">
        <li>Sender: Role of the entity that sends an encrypted payload.</li>
        <li>Recipient: Role of the entity that receives an encrypted payload.</li>
      </ul>
      <t>Additionally, we introduce the term "distribution system" (or distributor)
to refer to an entity that knows the recipients of the firmware images.
For use of encryption it therefore either knows the public key of the
recipient (for ES-DH), or the KEK (for AES-KW). The author on the other
hand does not know the recipients, which is responsible for creating the
firmware image. It is important to note that the distribution system is
far more than a file server.</t>
      <t>Finally, the following abbreviations are used in this document:</t>
      <ul spacing="normal">
        <li>Key Wrap (KW), defined in <xref target="RFC3394"/> (for use with AES)</li>
        <li>Key-Encryption Key (KEK) <xref target="RFC3394"/></li>
        <li>Content-Encryption Key (CEK) <xref target="RFC5652"/></li>
        <li>Ephemeral-Static (ES) Diffie-Hellman (DH) <xref target="RFC9052"/></li>
      </ul>
    </section>
    <section anchor="arch">
      <name>Architecture</name>
      <t><xref target="RFC9019"/> describes the architecture for distributing payloads and
manifests from an author to devices. It does, however, not detail the
use of payload encryption.</t>
      <t>This document enhances this architecture to support encryption. The author
and the distribution system are logical roles. In some deployments these
roles are separated in different physical entities and in others they are
co-located.</t>
      <t><xref target="arch-fig"/> shows the distribution system, which represents the firmware
server and the device management infrastructure.</t>
      <t>To apply encryption the sender (author) needs to know the recipient (device).
For AES-KW the KEK needs to be known and, in case of ES-DH, the sender needs
to be in possession of the public key of the recipient. The public key and
parameters may be in the recipient's X.509 certificate <xref target="RFC5280"/>.
Furthermore, for ES-DH the recipients must be provisioned with a public key
(or certificate) for digital signature verification of the manifest.</t>
      <t>With encryption the author cannot just create a manifest for the firmware
image and sign it since the subsequent encryption step by the distribution
system would invalidate the signature over the manifest. (The content key
distribution information is embedded inside the COSE_Encrypt structure,
which is included in the SUIT manifest.) Hence, the author has to
collaborate with the distribution system. The varying degree of
collaboration is discussed below.</t>
      <figure anchor="arch-fig">
        <name>Firmware Encryption Architecture.</name>
        <artwork><![CDATA[
                                           +----------+
                                           |  Author  |
 +----------+                              +----------+
 |  Device  |---+                               |
 |          |   |                               | Firmware +
 |          |   |                               | Manifest
 +----------+   |                               |
                |                               |
                |                               |
                |                        +--------------+
 +----------+   |  Firmware + Manifest   | Distribution |
 |  Device  |---+------------------------|    System    |
 |          |   |                        +--------------+
 |          |   |
 +----------+   |
                |
                |
 +----------+   |
 |  Device  +---+
 |          |
 |          |
 +----------+
]]></artwork>
      </figure>
      <t>The author has several deployment options, namely</t>
      <ul spacing="normal">
        <li>The author, as the sender, obtains information about the recipients
and their keys from the distribution system. Then, it performs the necessary
steps to encrypt the payload. As a last step it creates one or more manifests.
The device(s)perform decryption and act as recipients.</li>
        <li>The author treats the distribution system as the initial recipient. Then,
the distribution system decrypts and re-encrypts the payload for consumption
by the device (or the devices). Delegating the task of re-encrypting
the payload to the distribution system offers flexiblity when the number
of devices that need to receive encrypted payloads changes dynamically
or when updates to KEKs or recipient public keys are necessary. As a downside,
the author needs to trust the distribution system with performing the
re-encryption of the payload.</li>
      </ul>
      <t>If the author and distributor are separate entities, then the author must delegate
encryption rights to the distributor. By the principle of least privilege, this
should only grant the distributor decryption and re-encryption rights. There are
two models:</t>
      <ol spacing="normal" type="1"><li>The distributor replaces the COSE_Encrypt in the manifest and then signs the
manifest again. However, the COSE_Encrypt structure is contained
within a signed container, which presents a problem: replacing the COSE_Encrypt with a new one
will cause the digest of the manifest to change, thereby changing the signature. This means that
the distributor must be able to sign the new manifest. If this is the case, then the distributor
gains the ability to construct and sign manifests, which allows the distributor the authority
to sign code, effectively presenting the distributor with full control over the recipient.</li>
        <li>The alternative is to use a two-manifest system, where the distributor constructs
a new manifest that overrides the COSE_Encrypt using the dependency system defined in
<xref target="I-D.ietf-suit-trust-domains"/>. This incurrs additional overhead: one additional signature
verification and one additional manifest, as well as the additional machinery in the recipient
needed for dependency processing.</li>
      </ol>
      <t>These two models also present different threat profiles for the distributor. If the
distributor only has encryption rights, then an attacker who breaches the distributor can only
mount a limited attack: they can encrypt a modified binary, but the recipients will identify
the attack as soon as they perform the required image digest check and revert back to a correct
image immediately.</t>
      <t>However, if the distributor has the authority to sign a single manifest, this threat profile is
substantially degraded: a successful breach of the distributor grants the attacker the ability
to distribute whatever code they like to recipient devices. The recipient will validate the
signature of the code and run it without identifying the attack. Because distributors typically
must perform their re-encryption online in order to handle a large number of devices in a timely
fashion, it is not possible to air-gap the distributor's signing operations. This degrades
the recommendations in <xref target="RFC9124"/>, Section 4.3.17.</t>
      <t>It is strongly RECOMMENDED that distributors are implemented using a two-manifest system in order
to distribute encryption keys without requiring re-signing of the manifest, despite the increase
in complexity and greater number of signature verifications that this imposes on the recipient.</t>
    </section>
    <section anchor="parameters">
      <name>Encryption Extensions</name>
      <t>This specification introduces a new extension to the SUIT_Parameters structure.</t>
      <t>The SUIT encryption info parameter (called suit-parameter-encryption-info),
see <xref target="parameter-fig"/>, contains key distribution information. It is carried
inside the suit-directive-override-parameters or the suit-directive-set-parameters
structure. The content of the SUIT_Encryption_Info structure is explained in
<xref target="AES-KW"/> (for AES-KW) and <xref target="ES-DH"/> (for ES-DH). An implementation claiming
conformance with this specification must implement support for this parameter.
A device may, however, support only one of the available key distribution techniques.</t>
      <figure anchor="parameter-fig">
        <name>CDDL of the SUIT_Parameters Extension.</name>
        <artwork><![CDATA[
SUIT_Parameters //= (suit-parameter-encryption-info
    => bstr .cbor SUIT_Encryption_Info)

suit-parameter-encryption-info   = [TBD1: Proposed 19]
]]></artwork>
      </figure>
    </section>
    <section anchor="extended-directives">
      <name>Extended Directives</name>
      <t>This specification extends these directives:</t>
      <ul spacing="normal">
        <li>Directive Write (suit-directive-write) to decrypt the content specified by
suit-parameter-content with suit-parameter-encryption-info.</li>
        <li>Directive Copy (suit-directive-copy) to decrypt the content of the component
specified by suit-parameter-source-component with suit-parameter-encryption-info.</li>
      </ul>
      <t>Examples of the two directives are shown below.</t>
      <t><xref target="encryption-info-consumed-with-write"/> illustrates the Directive Write.</t>
      <figure anchor="encryption-info-consumed-with-write">
        <name>Example showing the Extended suit-directive-write.</name>
        <artwork><![CDATA[
/ directive-override-parameters / 20, {
  / parameter-content / 18: h'EA1CED',
  / parameter-encryption-info / 19: h'D860E1A1F0'
},
/ directive-write / 18, 15
/ NOTE: decrypt h'EA1CED' using h'D860E1A1F0' /
/ NOTE: plaintext payload is stored into component #0 /
]]></artwork>
      </figure>
      <t><xref target="encryption-info-consumed-with-copy"/> illustrates the Directive Copy.</t>
      <figure anchor="encryption-info-consumed-with-copy">
        <name>Example showing the Extended suit-directive-copy.</name>
        <artwork><![CDATA[
/ directive-set-component-index / 12, 1,
/ directive-override-parameters / 20, {
  / parameter-uri / 21: "http://example.com/encrypted.bin",
},
/ directive-fetch / 21, 15,
/ NOTE: encrypted payload is stored into component #1 /
/ directive-set-component-index / 12, 0,
/ directive-override-parameters / 20, {
  / parameter-source-component / 22: 1,
  / parameter-encryption-info / 19: h'D860E1A1F0'
},
/ directive-copy / 22, 15
/ NOTE: decrypt component #1 using h'D860E1A1F0' /
/ NOTE: plaintext payload is stored into component #0 /
]]></artwork>
      </figure>
      <t>The payload to be encrypted may be detached and, in that case, it is not covered by a digital
signature or a MAC of the manifest. (To be more precise, the suit-authentication-wrapper found in
the envelope contains a digest of the manifest in the SUIT Digest Container.) The lack of
authentication and integrity protection of the payload is particularly a concern when a cipher
without integrity protection is used. To authenticate the payload in the attached payload case a
SUIT Digest Container with the digest of the encrypted and/or plaintext payload MUST be included
in the manifest.</t>
      <t>An attacker may, of example, swaps detached payloads and thereby force the device to process a
wrong payload. This can lead to battery exhaustion attacks where an adversary expends energy and
flash cycles of the device.</t>
      <t>Including the digest of the encrypted payload allows the device to detect incorrectly encrypted
before decryption took place. Including the digest of the plaintext payload is adequate when
battery exhaustion attacks are not a concern.</t>
    </section>
    <section anchor="content-key-distribution-methods">
      <name>Content Key Distribution Methods</name>
      <t>The sub-sections below describe two content key distribution mechanisms,
namely AES Key Wrap (AES-KW) and Ephemeral-Static Diffie-Hellman (ES-DH).
Other mechanisms are supported by COSE and may be supported via enhancements
to this specification.</t>
      <t>When an encrypted firmware image is sent to multiple recipients, there
are different deployment options. To explain these options we use the
following notation:</t>
      <ul spacing="normal">
        <li>KEK(R1,S) refers to a KEK shared between recipient R1 and the sender S.
The KEK, as a concept, is used by AES Key Wrap.</li>
        <li>CEK(R1,S) refers to a CEK shared between R1 and S.</li>
        <li>CEK(<em>,S) or KEK(</em>,S) are used when a single CEK or a single KEK is shared
with all authorized recipients by a given sender S in a certain context.</li>
        <li>ENC(plaintext, k) refers to the encryption of plaintext with a key k.</li>
        <li>KEK_i or CEK_i refers to the i-th instance of the KEK or CEK, respectively.</li>
      </ul>
      <section anchor="AES-KW">
        <name>Content Key Distribution with AES Key Wrap</name>
        <section anchor="introduction-1">
          <name>Introduction</name>
          <t>The AES Key Wrap (AES-KW) algorithm is described in RFC 3394 <xref target="RFC3394"/>, and
can be used to encrypt a randomly generated content-encryption key (CEK)
with a pre-shared key-encryption key (KEK). The COSE conventions for using
AES-KW are specified in Section 8.5.2 of <xref target="RFC9052"/> and in Section 6.2.1 of
<xref target="RFC9053"/>. The encrypted CEK is carried in the COSE_recipient structure
alongside the information needed for AES-KW. The COSE_recipient structure,
which is a substructure of the COSE_Encrypt structure, contains the CEK
encrypted by the KEK.</t>
          <t>The COSE_Encrypt structure conveys information for encrypting the payload,
which includes information like the algorithm and the IV, even though the
payload is not embedded in the COSE_Encrypt.ciphertext itself since it
conveyed as detached content.</t>
        </section>
        <section anchor="deployment-options">
          <name>Deployment Options</name>
          <t>There are three deployment options for use with AES Key Wrap for payload
encryption:</t>
          <ul spacing="normal">
            <li>If all authorized recipients have access to the KEK, a single
COSE_recipient structure contains the encrypted CEK. The sender executes
the following steps:</li>
          </ul>
          <artwork><![CDATA[
      Fetch KEK(*,S)
      Generate CEK
      ENC(CEK,KEK)
      ENC(payload,CEK)
]]></artwork>
          <ul spacing="normal">
            <li>If recipients have different KEKs, then multiple COSE_recipient structures
are included but only a single CEK is used. Each COSE_recipient structure
contains the CEK encrypted with the KEKs appropriate for a given recipient.
The benefit of this approach is that the payload is encrypted only once with
a CEK while there is no sharing of the KEK across recipients. Hence, authorized
recipients still use their individual KEK to decrypt the CEK and to subsequently
obtain the plaintext. The steps taken by the sender are:</li>
          </ul>
          <artwork><![CDATA[
      Generate CEK
      for i=1 to n {
         Fetch KEK_i(Ri, S)
         ENC(CEK, KEK_i)
      }
      ENC(payload,CEK)
]]></artwork>
          <ul spacing="normal">
            <li>The third option is to use different CEKs encrypted with KEKs of
authorized recipients. Assume there are n recipients with their unique KEKs -
KEK_1(R1, S),..., KEK_n(Rn, S). The sender needs to make the following steps:</li>
          </ul>
          <artwork><![CDATA[
      for i=1 to n {
         Fetch KEK_i(Ri, S)
         Generate CEK_i
         ENC(CEK_i, KEK_i)
         ENC(payload,CEK_i)
      }
]]></artwork>
          <t>This approach is appropriate when no benefits can be gained from encrypting
and transmitting payloads only once.</t>
        </section>
        <section anchor="cddl">
          <name>CDDL</name>
          <t>The CDDL for the COSE_Encrypt_Tagged structure is shown in <xref target="cddl-aeskw"/>.</t>
          <figure anchor="cddl-aeskw">
            <name>CDDL for AES-KW-based Content Key Distribution</name>
            <artwork><![CDATA[
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
 
SUIT_Encryption_Info = COSE_Encrypt_Tagged

COSE_Encrypt = [
  protected   : bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : bstr / nil,
  recipients  : [ + COSE_recipient ]
]

outer_header_map_protected =
{
    1 => int,         ; algorithm identifier
  * label => values   ; extension point
}

outer_header_map_unprotected = 
{
    5 => bstr,        ; IV
  * label => values   ; extension point
}

COSE_recipient = [
  protected   : bstr .size 0,
  unprotected : recipient_header_map,
  ciphertext  : bstr        ; CEK encrypted with KEK
]

recipient_header_map = 
{
    1 => int,         ; algorithm identifier
    4 => bstr,        ; key identifier
  * label => values   ; extension point
}
]]></artwork>
          </figure>
          <t>Note that the AES-KW algorithm, as defined in Section 2.2.3.1 of <xref target="RFC3394"/>,
does not have public parameters that vary on a per-invocation basis. Hence,
the protected header in the COSE_recipient structure is a byte string
of zero length.</t>
          <t>The COSE specification requires a consistent byte stream for the authenticated
data structure to be created. This structure is shown in <xref target="cddl-enc-aeskw"/>.</t>
          <figure anchor="cddl-enc-aeskw">
            <name>CDDL for Enc_structure Data Structure</name>
            <artwork><![CDATA[
       Enc_structure = [
         context : "Encrypt",
         protected : empty_or_serialized_map,
         external_aad : bstr
       ]
]]></artwork>
          </figure>
          <t>This Enc_structure needs to be populated as follows:</t>
          <t>The protected field in the Enc_structure from <xref target="cddl-enc-aeskw"/> refers
to the content of the protected field from the COSE_Encrypt structure.
It is important to note that there are two protected fields shown
in <xref target="cddl-aeskw"/>:</t>
          <ul spacing="normal">
            <li>one in the COSE_Encrypt structure, and</li>
            <li>a second one in the COSE_recipient structure.</li>
          </ul>
          <t>The value of the external_aad MUST be set to a null value (major type 7,
value 22).</t>
        </section>
        <section anchor="example">
          <name>Example</name>
          <t>This example uses the following parameters:</t>
          <ul spacing="normal">
            <li>Algorithm for payload encryption: AES-GCM-128</li>
            <li>Algorithm id for key wrap: A128KW</li>
            <li>IV: 0x26, 0x68, 0x23, 0x06, 0xd4, 0xfb, 0x28, 0xca, 0x01, 0xb4, 0x3b, 0x80</li>
            <li>KEK: "aaaaaaaaaaaaaaaa"</li>
            <li>KID: "kid-1"</li>
            <li>Plaintext firmware (txt): "This is a real firmware image."
(in hex): 546869732069732061207265616C206669726D7761726520696D6167652E</li>
          </ul>
          <t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>
          <artwork><![CDATA[
D8608443A10101A1054C26682306D4FB28CA01B43B80F68340A2012204456B69642D
315818AF09622B4F40F17930129D18D0CEA46F159C49E7F68B644D
]]></artwork>
          <t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="aeskw-example"/>.</t>
          <figure anchor="aeskw-example">
            <name>COSE_Encrypt Example for AES Key Wrap</name>
            <artwork><![CDATA[
96([
  / protected: / << {
    / alg / 1: 1 / AES-GCM-128 /
  } >>,
  / unprotected: / {
    / IV / 5: h'1de460e8b5b68d7222c0d6f20484d8ab'
  },
  / payload: / null / detached ciphertext /,
  / recipients: / [
    [
      / protected: / << {
      } >>,
      / unprotected: / {
        / alg / 1: -3 / A128KW /,
        / kid / 4: 'kid-1'
      },
      / payload: CEK encrypted with KEK /
      h'a86200e4754733e4c00fc08c6a72cc1996e129922eab504f'
    ]
  ]
])
]]></artwork>
          </figure>
          <t>The CEK, in hex format, was "4C805F1587D624ED5E0DBB7A7F7FA7EB".
The encrypted firmware (with a line feed added) was:</t>
          <artwork><![CDATA[
A8B6E61EF17FBAD1F1BF3235B3C64C06098EA512223260
F9425105F67F0FB6C92248AE289A025258F06C2AD70415
]]></artwork>
        </section>
      </section>
      <section anchor="ES-DH">
        <name>Content Key Distribution with Ephemeral-Static Diffie-Hellman</name>
        <section anchor="introduction-2">
          <name>Introduction</name>
          <t>Ephemeral-Static Diffie-Hellman (ES-DH) is a scheme that provides public key
encryption given a recipient's public key. There are multiple variants
of this scheme; this document re-uses the variant specified in Section 8.5.5
of <xref target="RFC9052"/>.</t>
          <t>The following two layer structure is used:</t>
          <ul spacing="normal">
            <li>Layer 0: Has a content encrypted with the CEK. The content may be detached.</li>
            <li>Layer 1: Uses the AES Key Wrap algorithm to encrypt a randomly generated
CEK with the KEK derived with ES-DH whereby the resulting symmetric
key is fed into the HKDF-based key derivation function.</li>
          </ul>
          <t>As a result, the two layers combine ES-DH with AES-KW and HKDF. An example is
given in <xref target="esdh-example"/>.</t>
        </section>
        <section anchor="deployment-options-1">
          <name>Deployment Options</name>
          <t>There are two deployment options with this approach. We assume that recipients
are always configured with a device-unique public / private key pair.</t>
          <ul spacing="normal">
            <li>A sender wants to transmit a payload to multiple recipients. All recipients
shall receive the same encrypted payload, i.e. the same CEK is used.
One COSE_recipient structure per recipient is used and it contains the
CEK encrypted with the KEK. To generate the KEK each COSE_recipient structure
contains a COSE_recipient_inner structure to carry the sender's emphemeral key
and an identifier for the recipients public key.</li>
          </ul>
          <t>The steps taken by the sender are:</t>
          <artwork><![CDATA[
      Generate CEK
      for i=1 to n {
         Generate KEK_i(Ri, S) using ES-DH
         ENC(CEK, KEK_i)
      }
      ENC(payload,CEK)
]]></artwork>
          <ul spacing="normal">
            <li>The alternative is to encrypt a payload with a different CEK for each
recipient. Assume there are KEK_1(R1, S),..., KEK_n(Rn, S) have been generated
for the different recipients using ES-DH. The following steps needs to be made
by the sender:</li>
          </ul>
          <artwork><![CDATA[
      for i=1 to n {
         Generate KEK_i(Ri, S) using ES-DH
         Generate CEK_i
         ENC(CEK_i, KEK_i)
         ENC(payload,CEK_i)
      }
]]></artwork>
          <t>This results in n-manifests. This approach is useful when payloads contain
information unique to a device. The encryption operation effectively becomes
ENC(payload_i,CEK_i).</t>
        </section>
        <section anchor="cddl-1">
          <name>CDDL</name>
          <t>The CDDL for the COSE_Encrypt_Tagged structure is shown in <xref target="cddl-esdh"/>.</t>
          <figure anchor="cddl-esdh">
            <name>CDDL for ES-DH-based Content Key Distribution</name>
            <artwork><![CDATA[
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
 
SUIT_Encryption_Info = COSE_Encrypt_Tagged

COSE_Encrypt = [
  protected   : bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : bstr / nil,
  recipients  : [ + COSE_recipient ]
]

outer_header_map_protected =
{
    1 => int,         ; algorithm identifier
  * label => values   ; extension point
}

outer_header_map_unprotected = 
{
    5 => bstr,        ; IV
  * label => values   ; extension point
}

COSE_recipient = [
  protected   : bstr .cbor recipient_header_pr_map,
  unprotected : recipient_header_unpr_map,
  ciphertext  : bstr        ; CEK encrypted with KEK
]

recipient_header_pr_map = 
{
    1 => int,         ; algorithm identifier for key wrap
  * label => values   ; extension point
}

recipient_header_unpr_map = 
{
   -1 => COSE_Key,    ; ephemeral public key for the sender
    4 => bstr,        ; identifier of the recipient public key
  * label => values   ; extension point
}
]]></artwork>
          </figure>
        </section>
        <section anchor="context-information-structure">
          <name>Context Information Structure</name>
          <t>The context information structure is used to ensure that the derived keying material
is "bound" to the context of the transaction. This specification re-uses the structure
defined in Section 5.2 of RFC 9053 and tailors it accordingly.</t>
          <t>The following information elements are bound to the context:</t>
          <ul spacing="normal">
            <li>the protocol employing the key-derivation method,</li>
            <li>information about the utilized AES Key Wrap algorithm,and the key length.</li>
            <li>the protected header field, which contains the content key encryption algorithm.</li>
          </ul>
          <t>The sender and recipient identities are left empty in</t>
          <t>The following fields in <xref target="cddl-context-info"/> require an explantation:</t>
          <ul spacing="normal">
            <li>The COSE_KDF_Context.AlgorithmID field contains the algorithm identifier for
A128KW (value -4), A192KW (value -4), or A256KW (value -5).</li>
            <li>The COSE_KDF_Context.SuppPubInfo.keyDataLength field contains the key length
of the algorithm in the COSE_KDF_Context.AlgorithmID field expressed as the number
of bits. For A128KW the value is 128, for A192KW the value is 192, and for A256KW
the value 256.</li>
            <li>The COSE_KDF_Context.SuppPubInfo.other field captures the protocol in
which the ES-DH content key distribution algorithm is used and MUST be set to
the constant string "SUIT Payload Encryption".</li>
            <li>The COSE_KDF_Context.SuppPubInfo.protected field serializes the content
of the recipient_header_pr_map field, which (among other fields) contains the
content key distribution algorithm identifier.</li>
          </ul>
          <figure anchor="cddl-context-info">
            <name>CDDL for COSE_KDF_Context Structure</name>
            <artwork><![CDATA[
PartyInfoSender = (
    identity : bstr .size 0,
    nonce : nil,
    other : bstr .size 0
)

PartyInfoRecipient = (
    identity : bstr .size 0,
    nonce : nil,
    other : bstr .size 0
)

COSE_KDF_Context = [
    AlgorithmID : int,
    PartyUInfo : [ PartyInfoSender ],
    PartyVInfo : [ PartyInfoRecipient ],
    SuppPubInfo : [
        keyDataLength : uint,
        protected : bstr .cbor recipient_header_pr_map,
        other: bstr "SUIT Payload Encryption"
    ],
    SuppPrivInfo : bstr .size 0
]
]]></artwork>
          </figure>
          <t>Profiles of this specification MAY specify an extended version of the
context information structure or MAY utilize a different context information
structure.</t>
        </section>
        <section anchor="example-1">
          <name>Example</name>
          <t>This example uses the following parameters:</t>
          <ul spacing="normal">
            <li>Algorithm for payload encryption: AES-GCM-128</li>
            <li>IV: 0x26, 0x68, 0x23, 0x06, 0xd4, 0xfb,
    0x28, 0xca, 0x01, 0xb4, 0x3b, 0x80</li>
            <li>Algorithm for content key distribution: ES-DH + A128KW</li>
            <li>KID: "kid-1"</li>
            <li>Plaintext: "This is a real firmware image."</li>
            <li>Firmware (hex):
546869732069732061207265616C206669726D7761726520696D6167652E</li>
          </ul>
          <t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>
          <artwork><![CDATA[
D8608443A10101A1054C26682306D4FB28CA01B43B805823F21AC5881CD6FC45754
C65790F806C81A57B8D96C1988233BF40F670172405B5F107FD8444A101381C44A1
01381CA220A401022001215820415A8ED270C4B1F10B0A2D42B28EE6028CE25D745
52CB4291A4069A2E989B0F6225820CCC9AAF60514B9420C80619A4FF068BC1D7762
5BA8C90200882F7D5B73659E7604456B69642D315818B37CCD582696E5E62E5D93A
555E9072687D6170B122322EE
]]></artwork>
          <t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="esdh-example"/>. Note that the COSE_Encrypt structure also needs to
protected by a COSE_Sign1, which is not shown below.</t>
          <figure anchor="esdh-example">
            <name>COSE_Encrypt Example for ES-DH</name>
            <artwork><![CDATA[
96(
  [
   / protected / h'a10101' / {
       \ alg \ 1:1 \ AES-GCM-128 \
     } / ,
   / unprotected / {
     / iv / 5:h'26682306D4FB28CA01B43B80'
     },
   / encrypted firmware /
    h'F21AC5881CD6FC45754C65790F806C81A57
      B8D96C1988233BF40F670172405B5F107FD',
    [
       / protected / h'A101381C' / {
           \ alg \ 1:-29 \ ES-DH + A128KW \
         } / ,
         h'A101381C',
       / unprotected / {
             / ephemeral / -1: {
                   / kty / 1:2,
                   / crv / -1:1,
                   / x / -2:h'415A8ED270C4B1F10B0A2D42B28EE602
                              8CE25D74552CB4291A4069A2E989B0F6',
                   / y / -3:h'CCC9AAF60514B9420C80619A4FF068BC
                              1D77625BA8C90200882F7D5B73659E76'
                 },
                 / kid / 4:'kid-1'
        },
        / ciphertext - CEK encrypted with KEK /
        h'B37CCD582696E5E62E5D93A555E9072687D6170B122322EE'
    ]
  ]
)
]]></artwork>
          </figure>
        </section>
      </section>
    </section>
    <section anchor="firmware-updates-on-iot-devices-with-flash-memory">
      <name>Firmware Updates on IoT Devices with Flash Memory</name>
      <t>Flash memory on microcontrollers is a type of non-volatile memory that erases
data in units called blocks, pages or sectors and re-writes data at byte level
(often 4-bytes).
Flash memory is furthermore segmented into different memory regions, which store
the bootloader, different versions of firmware images (in so-called slots),
and configuration data. <xref target="image-layout"/> shows an example layout of a
microcontroller flash area. The primary slot contains the firmware image to be
executed by the bootloader, which is a common deployment on devices that do
not offer the concept of position independent code.</t>
      <t>When the encrypted firmware image has been transferred to the device, it will
typically be stored in a staging area, in the secondary slot in our example.</t>
      <t>At the next boot, the bootloader will recognize a new firmware image in the
secondary slot and will start decrypting the downloaded image sector-by-sector
and will swap it with the image found in the primary slot.</t>
      <t>The swap should only take place after the signature on the plaintext is verified.
Note that the plaintext firmware image is available in the primary slot only after
the swap has been completed, unless "dummy decrypt" is used to compute the hash
over the plaintext prior to executing the decrypt operation during a swap.
Dummy decryption here refers to the decryption of the firmware image found in
the secondary slot sector-by-sector and computing a rolling hash over the resulting
plaintext firmware image (also sector-by-sector) without performing the swap operation.
While there are performance optimizations possible, such as conveying hashes for
each sector in the manifest rather than a hash of the entire firmware image,
such optimizations are not described in this specification.</t>
      <t>This approach of swapping the newly downloaded image with the previously valid
image is often referred as A/B approach. A/B refers to the two slots involved.
Two slots are used to allow the update to be reversed in case the newly obtained
firmware image fails to boot. This approach adds robustness to the firmware
update procedure.</t>
      <t>Since the image in primary slot is available in cleartext it may need to
re-encrypted it before copying it to the secondary slot. This may be necessary
when the secondary slot has different access permissions or when the staging
area is located in an off-chip flash memory and therefore more vulnerable to
physical attacks. Note that this description assumes that the processor does
not execute encrypted memory (i.e. using on-the-fly decryption in hardware).</t>
      <figure anchor="image-layout">
        <name>Example Flash Area Layout</name>
        <artwork><![CDATA[
+--------------------------------------------------+
| Bootloader                                       |
+--------------------------------------------------+
| Primary Slot                                     |
|                                        (sector 1)|
|..................................................|
|                                                  |
|                                        (sector 2)|
|..................................................|
|                                                  |
|                                        (sector 3)|
|..................................................|
|                                                  |
|                                        (sector 4)|
+--------------------------------------------------+
| Secondary Slot                                   |
|                                        (sector 1)|
|..................................................|
|                                                  |
|                                        (sector 2)|
|..................................................|
|                                                  |
|                                        (sector 3)|
|..................................................|
|                                                  |
|                                        (sector 4)|
+--------------------------------------------------+
| Swap Area                                        |
|                                                  |
+--------------------------------------------------+
| Configuration Data                               |
+--------------------------------------------------+
]]></artwork>
      </figure>
      <t>The ability to restart an interrupted firmware update is often a requirement
for low-end IoT devices. To fulfill this requirement it is necessary to chunk
a firmware image into sectors and to encrypt each sector individually
using a cipher that does not increase the size of the resulting ciphertext
(i.e., by not adding an authentication tag after each encrypted block).</t>
      <t>When an update gets aborted while the bootloader is decrypting the newly obtained
image and swapping the sectors, the bootloader can restart where it left off. This
technique offers robustness and better performance.</t>
      <t>For this purpose ciphers without integrity protection are used to encrypt the
firmware image. Integrity protection for the firmware image must, however, be
provided and the suit-parameter-image-digest, defined in Section 8.4.8.6 of
<xref target="I-D.ietf-suit-manifest"/>, MUST be used.</t>
      <t><xref target="I-D.ietf-cose-aes-ctr-and-cbc"/> registers AES Counter mode (AES-CTR) and
AES Cipher Block Chaining (AES-CBC) ciphers that do not offer integrity protection.
These ciphers are useful for the use cases that require firmware encryption on IoT
devices. For many other use cases where software packages, configuration information
or personalization data needs to be encrypted, the use of Authenticated Encryption
with Additional Data (AEAD) ciphers is preferred.</t>
      <t>The following sub-sections provide further information about the initialization vector
(IV) selection for use with AES-CBC and AES-CTR in the firmware encryption context. An
IV MUST NOTE be re-used when the same key is used. For this application, the IVs are
not random but rather based on the slot/sector-combination in flash memory. The
text below assumes that the block-size of AES is (much) smaller than sector size. The
typical sector-size of flash memory is in the order of KiB. Hence, multiple AES blocks
need to be decrypted until an entire sector is completed.</t>
      <section anchor="aes-cbc">
        <name>AES-CBC</name>
        <t>In AES-CBC a single IV is used for encryption of firmware belonging to a single sector
since individual AES blocks are chained toghether, as shown in <xref target="aes-cbc-fig"/>. The
numbering  of sectors in a slot MUST start with zero (0) and MUST increase by one with
every sector till the end of the slot is reached. The IV follows this numbering.</t>
        <t>For example, let us assume the slot size of a specific flash controller on an IoT device
is 64 KiB, the sector size 4096 bytes (4 KiB) and AES-128-CBC uses an AES-block size of
128 bit (16 bytes). Hence, sector 0 needs 4096/16=256 AES-128-CBC operations using IV 0.
If the firmware image fills the entire slot then that slot contains 16 sectors, i.e. IVs
ranging from 0 to 15.</t>
        <figure anchor="aes-cbc-fig">
          <name>AES-CBC Operation</name>
          <artwork><![CDATA[
       P1              P2
        |              |
   IV--(+)    +-------(+)
        |     |        |
        |     |        |
    +-------+ |    +-------+
    |       | |    |       |
    |       | |    |       |
 k--|  E    | | k--|  E    |
    |       | |    |       |
    +-------+ |    +-------+
        |     |        |
        +-----+        |
        |              |
        |              |
        C1             C2

Legend: 
  Pi = Plaintext blocks
  Ci = Ciphertext blocks
  E = Encryption function
  k = Symmetric key
  (+) = XOR operation
]]></artwork>
        </figure>
      </section>
      <section anchor="aes-ctr">
        <name>AES-CTR</name>
        <t>Unlike AES-CBC, AES-CTR uses an IV per AES operation, as shown in <xref target="aes-ctr-fig"/>.
Hence, when an image is encrypted using AES-CTR-128 or AES-CTR-256, the IV MUST
start with zero (0) and MUST be incremented by one for each 16-byte plaintext block
within the entire slot.</t>
        <t>Using the previous example with a slot size of 64 KiB, the sector size 4096 bytes and
the AES plaintext block size of 16 byte requires IVs from 0 to 255 in the first sector
and 16 * 256 IVs for the remaining sectors in the slot.</t>
        <figure anchor="aes-ctr-fig">
          <name>AES-CTR Operation</name>
          <artwork><![CDATA[
         IV1            IV2
          |              |
          |              |
          |              |
      +-------+      +-------+
      |       |      |       |
      |       |      |       |
   k--|  E    |   k--|  E    |
      |       |      |       |
      +-------+      +-------+
          |              |
     P1--(+)        P2--(+)
          |              |
          |              |
          C1             C2

Legend: 
  See previous diagram.
]]></artwork>
        </figure>
      </section>
    </section>
    <section anchor="complete-examples">
      <name>Complete Examples</name>
      <t>The following manifests examplify how to deliver encrypted firmware and its
encryption info to devices.</t>
      <t>The examples are signed using the following ECDSA secp256r1 key:</t>
      <artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork>
      <t>The corresponding public key can be used to verify these examples:</t>
      <artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork>
      <t>Each example uses SHA-256 as the digest function.</t>
      <section anchor="example-AES-KW-write">
        <name>AES Key Wrap Example with Write Directive</name>
        <t>The following SUIT manifest requests a parser to write and to decrypt the
encrypted payload into a component with the suit-directive-write
directive.</t>
        <t>The SUIT manifest in diagnostic notation (with line breaks added
for readability) is shown here:</t>
        <artwork><![CDATA[
{::include examples/suit-manifest-aes-kw-content.diag.signed}
]]></artwork>
        <t>In hex format, the SUIT manifest is this:</t>
        <artwork><![CDATA[
{::include examples/suit-manifest-aes-kw-content.hex.signed}
]]></artwork>
      </section>
      <section anchor="example-AES-KW-copy">
        <name>AES Key Wrap Example with Fetch + Copy Directives</name>
        <t>The following SUIT manifest requests a parser to fetch the encrypted
payload and to stores it. Then, the payload is decrypt and stored into
another component with the suit-directive-copy directive. This approach
works well on constrained devices with execute-in-place flash memory.</t>
        <t>The SUIT manifest in diagnostic notation (with line breaks added for
readability) is shown here:</t>
        <artwork><![CDATA[
{::include examples/suit-manifest-aes-kw.diag.signed}
]]></artwork>
        <t>In hex format, the SUIT manifest is this:</t>
        <artwork><![CDATA[
{::include examples/suit-manifest-aes-kw.hex.signed}
]]></artwork>
      </section>
    </section>
    <section anchor="sec-cons">
      <name>Security Considerations</name>
      <t>The algorithms described in this document assume that the party performing payload encryption</t>
      <ul spacing="normal">
        <li>shares a key-encryption key (KEK) with the recipient (for use with the AES Key Wrap scheme), or</li>
        <li>is in possession of the public key of the recipient (for use with ES-DH).</li>
      </ul>
      <t>Both cases require some upfront communication interaction to distribute these keys to the involved
communication parties. This interaction may be provided by an device management solution,
as described in <xref target="RFC9019"/>, or may be executed earlier in the lifecycle of the device, for example
during manufacturing or during commissioning. In addition to the keying material key identifiers
and algorithm information needs to be provisioned. This specification places no requirements
on the structure of the key identifier.</t>
      <t>To provide high security for AES Key Wrap it is important that the KEK is of high entropy,
and that implementations protect the KEK from disclosure. Compromise of the KEK may result
in the disclosure of all key data protected with that KEK.</t>
      <t>Since the CEK is randomly generated, it must be ensured that the guidelines for random number
generation in <xref target="RFC8937"/> are followed.</t>
      <t>In some cases third party companies analyse binaries for known security vulnerabilities. With
encrypted payloads this type of analysis is prevented. Consequently, these third party
companies either need to be given access to the plaintext binary before encryption or they need
to become authorized recipients of the encrypted payloads. In either case, it is necessary to
explicitly consider those third parties in the software supply chain when such a binary analysis
is desired.</t>
      <t>If an attacker alters the key distribution data then a recipient will decrypt the firmware image with an incorrect key. This will lead to expending energy and flash cycles until the failure is detected.</t>
      <t>To mitigate this attack, a new parameter, called suit-cek-verification, is added to the manifest. The suit-cek-verification parameter is optional to implement and optional to use. When used, it reduces the risk of a battery exhaustion attack against the IoT device.</t>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <t>IANA is asked to add two values to the SUIT_Parameters registry established by 
<xref target="I-D.ietf-suit-manifest"/>.</t>
      <artwork><![CDATA[
Label      Name                 Reference
-----------------------------------------
TBD1       Encryption Info      Section 4
]]></artwork>
      <t>[Editor's Note: 
 - TBD1: Proposed 19
]</t>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC3394">
          <front>
            <title>Advanced Encryption Standard (AES) Key Wrap Algorithm</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <author fullname="R. Housley" initials="R." surname="Housley"/>
            <date month="September" year="2002"/>
          </front>
          <seriesInfo name="RFC" value="3394"/>
          <seriesInfo name="DOI" value="10.17487/RFC3394"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9053">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052).</t>
              <t>This document, along with RFC 9052, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9053"/>
          <seriesInfo name="DOI" value="10.17487/RFC9053"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="I-D.ietf-suit-manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Ãyvind RÃ¸nningstad" initials="O." surname="RÃ¸nningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="27" month="February" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-22"/>
        </reference>
        <reference anchor="I-D.ietf-cose-aes-ctr-and-cbc">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): AES-CTR and AES-CBC</title>
            <author fullname="Russ Housley" initials="R." surname="Housley">
              <organization>Vigil Security, LLC</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <date day="25" month="May" year="2023"/>
            <abstract>
              <t>   The Concise Binary Object Representation (CBOR) data format is
   designed for small code size and small message size.  CBOR Object
   Signing and Encryption (COSE) is specified in RFC 9052 to provide
   basic security services using the CBOR data format.  This document
   specifies the conventions for using AES-CTR and AES-CBC as Content
   Encryption algorithms with COSE.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-aes-ctr-and-cbc-06"/>
        </reference>
        <reference anchor="I-D.ietf-suit-trust-domains">
          <front>
            <title>SUIT Manifest Extensions for Multiple Trust Domains</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Ken Takayama" initials="K." surname="Takayama">
              <organization>SECOM CO., LTD.</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This specification describes extensions to the SUIT Manifest format
   (as defined in [I-D.ietf-suit-manifest]) for use in deployments with
   multiple trust domains.  A device has more than one trust domain when
   it enables delegation of different rights to mutually distrusting
   entities for use for different purposes or Components in the context
   of firmware or software update.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-trust-domains-04"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC9019">
          <front>
            <title>A Firmware Update Architecture for Internet of Things</title>
            <author fullname="B. Moran" initials="B." surname="Moran"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <author fullname="D. Brown" initials="D." surname="Brown"/>
            <author fullname="M. Meriac" initials="M." surname="Meriac"/>
            <date month="April" year="2021"/>
            <abstract>
              <t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t>
              <t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9019"/>
          <seriesInfo name="DOI" value="10.17487/RFC9019"/>
        </reference>
        <reference anchor="RFC9124">
          <front>
            <title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
            <author fullname="B. Moran" initials="B." surname="Moran"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <date month="January" year="2022"/>
            <abstract>
              <t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t>
              <t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9124"/>
          <seriesInfo name="DOI" value="10.17487/RFC9124"/>
        </reference>
        <reference anchor="RFC8937">
          <front>
            <title>Randomness Improvements for Security Protocols</title>
            <author fullname="C. Cremers" initials="C." surname="Cremers"/>
            <author fullname="L. Garratt" initials="L." surname="Garratt"/>
            <author fullname="S. Smyshlyaev" initials="S." surname="Smyshlyaev"/>
            <author fullname="N. Sullivan" initials="N." surname="Sullivan"/>
            <author fullname="C. Wood" initials="C." surname="Wood"/>
            <date month="October" year="2020"/>
            <abstract>
              <t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols. Weak or predictable "cryptographically secure" pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t>
              <t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8937"/>
          <seriesInfo name="DOI" value="10.17487/RFC8937"/>
        </reference>
        <reference anchor="RFC5652">
          <front>
            <title>Cryptographic Message Syntax (CMS)</title>
            <author fullname="R. Housley" initials="R." surname="Housley"/>
            <date month="September" year="2009"/>
            <abstract>
              <t>This document describes the Cryptographic Message Syntax (CMS). This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="70"/>
          <seriesInfo name="RFC" value="5652"/>
          <seriesInfo name="DOI" value="10.17487/RFC5652"/>
        </reference>
        <reference anchor="RFC5280">
          <front>
            <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
            <author fullname="D. Cooper" initials="D." surname="Cooper"/>
            <author fullname="S. Santesson" initials="S." surname="Santesson"/>
            <author fullname="S. Farrell" initials="S." surname="Farrell"/>
            <author fullname="S. Boeyen" initials="S." surname="Boeyen"/>
            <author fullname="R. Housley" initials="R." surname="Housley"/>
            <author fullname="W. Polk" initials="W." surname="Polk"/>
            <date month="May" year="2008"/>
            <abstract>
              <t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet. An overview of this approach and model is provided as an introduction. The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms. Standard certificate extensions are described and two Internet-specific extensions are defined. A set of required certificate extensions is specified. The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions. An algorithm for X.509 certification path validation is described. An ASN.1 module and examples are provided in the appendices. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5280"/>
          <seriesInfo name="DOI" value="10.17487/RFC5280"/>
        </reference>
        <reference anchor="iana-suit" target="TBD">
          <front>
            <title>IANA SUIT Manifest Registry</title>
            <author>
              <organization>Internet Assigned Numbers Authority</organization>
            </author>
            <date year="2023"/>
          </front>
        </reference>
        <reference anchor="ROP" target="https://en.wikipedia.org/wiki/Return-oriented_programming">
          <front>
            <title>Return-Oriented Programming</title>
            <author>
              <organization>Wikipedia</organization>
            </author>
            <date year="2023" month="March"/>
          </front>
        </reference>
      </references>
    </references>
    <?line 1111?>

<section anchor="acknowledgements">
      <name>Acknowledgements</name>
      <t>We would like to thank Henk Birkholz for his feedback on the CDDL description in this document.
Additionally, we would like to thank Michael Richardson, Ãyvind RÃ¸nningstad, Dave Thaler, Laurence
Lundblade, Russ Housley, and Carsten Bormann for their review feedback. Finally, we would like to
thank Dick Brooks for making us aware of the challenges firmware encryption imposes on binary analysis.</t>
    </section>
  </back>
  <!-- ##markdown-source:
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
xYAAQ+mVfUO1jeYx7TJlxgS867Qfeha7OxjcHoFc3mtIJ/sGDWWQunA8HOeg
0XnWbHe8zu3lJOIcARjVa+amtbLnDCCt66cxyiJQCmYNeBG8F6CBSRntgtwv
wA52dzK5kIsKKdQRFRvttfoWbxu+/vvWidyWVHW+T/L8XbW693Qff9CKMnwt
N/rFb3TPE93JU37y1GrU7tu/8Kdf/Lb3PL2hKziH+qn79SE93z+r+9f5VFpu
g4D6VU/6/gb1m7iDL8MpkOCpwtfeRuqZU+1AM0J4FR/0bczZPhnCA+fCFn1+
Ex/dwKNLfRBUZ+rjfj9TP765sFjsH9zW7EjbO5pvvtGv69R7LSXx2/cJ1WOU
dytGgGoyBALBk4fIHc2wG1lhIfe0AHILTd6JVm885lb3Z+KTsShpRUr24Fcg
Wi1PiSliYt09LHMk1+xIdFgYpz4tB2RJ8WUnTERbYC7xK5E30eb35uY17f83
kVzJCfPY4wO4HSmphZwoLk3F9CNszdbgQYXCMo5mu+3oNXlhZBmCAtr+DrOi
uY05TjkXLdiRRZq7b7i2+fydh+fn77wMku3k8W3PLHn7X/XzX/z2v5Tb3/vc
Yz1qA+v5ev9fm989a3vbMPyZvjZL/PnbgflVTnQZOliLeW9gyNXKjKLI1hgF
0HyZUYDFxYqZMleprOv45nykkAim3M4wdoUHvuMII5kbcgL43HLu1SbgRODU
uEr0WKEenKr88o2b9m5EO5Nhf3CJx7rHC6CDrIF806Zp0tb1ht+dv1ZvL87f
dUHdfzH8iX7d3Xl1/t3z7nTYfdV79V1v9eG7y1etE/j+Xb8vn++Gz3vf1e+C
u/Ne909/mnYXf/7p5z/3v//u5at2/R0qqv2ff7osfnxaP/n5u3my+uPbbDF4
efXpYBb9+GZ20X3d73Yvh3E6DLLp8sOHkz/O3n2MwqPX6fz2w4eXxxfF7e7O
26eg2vzww3g2ue1mV/n1i5si7/80/Hj34nWRvX7+Y3Typnf4+uld0v2+yD/N
L5qHr1rFi+gHWdrw9WDDwpxESapXny/ShPw0zpmyUmFnygOgRJLcgn4zHL/v
vTzvu2A8u7kb3v30/EX65/NPP9f73T/9dC6fB90/jQcAuOHsj0Hvuw+tlx8+
3F7+9G78U7L8FPwx63yIDoaj3Z3Rp4N5K3sXJ+c/ju5e1I+erxYvR91579W4
//Mo+HTRaN1eTSefrvM/3p29HL1q30yKT29eXqbx9NkzFxDlmQkcqNqrl4J9
+byL8kafXZGa/F4tBZaX9gjU0JUEfA+TvTTm82PpvioF6PjGoHWyoYx6GxXH
mqk53xcbZDlf3MfX4Ihvz6m36hZxthdKyO2N3iVJxp1TuiIHL7+UH/zb29zr
NpycWV2JXlKibUJ0zmVY2N0JP0zEgbpv82vRm2HR5/PpqZTmNbh14HmKyAt0
c6dvQKrhLGpM9PaU9rmfq12sT59Nnn9gXOh/bdh7MYEroz7l67DsRV/rGEEX
D30TQvAdP16WlS2PrQvwYrIUni7U16STFmPrCWs8Is+ovcoGlQh2RH0dhej6
GotAfkYB6FVpdiNXwbK3Ba9XIlt64iYrSuy6GiVVTlTy3B7/DKzkZJR/Jlb+
d2PjZixEz+uSvJX9lC431Cbt58cg/OiuIRvQ0Kc38g3JMqZ0j1tvhfElK1Zu
4tD64RM+okL1+3O+FGFjBX+LRPbU5p7nvdNKsaEqri5Epx9xCPY/YepRmDtn
d1wJtnbE2R/B3Ciyu9MDHBc3q3bW5ukcgzmgZlM+43y+TJxLMQG2Y7nHxb0h
lKUjXQ6qr3uQjB48U+T2QTcKhbp4hNujJK8Y//uIjiqZuxYTMJr4csY0piM2
mIBa2kWpn9Q4Qf86+ZOpS5MQGgZZHNmCoaCbhXQ3jn81Dh/CDPVJJUmOgxks
rwM86EBJJJlOmsPlcdIMepLUeWJuetagKJ24LpV6zaX+i3PU1L8awZTARMDg
OLZ+qHfGS66AT1I3hIZVqnQST+mSBH8azGFS45WeRVOKmTFhlYubSWTOqXKp
SUXuKYExqIcQ/WKLlSQL01v+RZ25DjGY1mTgAW6N4zSnK0VR64bfoty7NgT3
lgNx5vIm24icdDGDmhz/9qyCEFlAdfRL2VtSf2i9ghWl4uo74flk/cSuebqM
ULVP5IZt8XTrc7/SiTizCUWPTw6P8N6NTAs8cfWeJ0x+OoaC1dWZ96AUAl5I
lnMQr9AhildjRzLkTYJM3GyXTrRCLk/E9gO7TctqkjhCdcY7dx3pMMYtORBq
xFV1DfuKkLozN6JwmVwYkcx0/N1SYM27s8Gx9+l+b53l5jquyWDnxDiqzcp1
X7bcC7Htyqqc6FEm5d305oSUMWEcAxcR3l01FgkC/aXeMqPQOgt0KArvV8I2
6Bpn7w7ngeplaXiSCxgYVaSjQuRgda9QpyJI9hi6d6qY8LeY+WXqOEHavXSg
5Ktlv0xiL+bS9ewiuTpdXzLG14Yhg7IXhynv3jAOVNAYQRRLmQm+90tHuVI1
B0ybchEt1H5oYRXJGzfB04py7zwehzdV92LnCl/xNbF58PZyvSutdpUbORcq
I9tZSHAOOrDX+eKK3CcgCYEkEKJo5BFOwM4sx3IENYvyG/byb71gTAVYTT9n
yFtfv1w7rc67r7slZYQ2HX/GNeY3ktU6mVASrFQa2XKzNEd9cRp5EYCQz2cs
He8LL1tn1ksqZ0J/rzF2V/67CCkJFAMVD84sgR3vDbTjxfHZnvMVwkrZa8uN
mvaXIUhFuhkdszzJN1NVazcNS7UaGAOAj15JhGd3jPwN8GaqZdruzg+A4pTf
r++nx5DeDYY/blQvym5mafyJWOOMSgaGkxHdhihlHPBYtZtdWtYA8ZpnE+lF
rne3ebhXERA/gPcC/59NckTi//rfq9sIMO7iv/5PgjoBbBrg2AALjV3Nghip
4GWwFJC/XCaTURxMgDNdLIFDPsfcaqx5gzjbB0sHU2l6lD1hkhjokvvbCA9k
yLpq6izaMlH0suJMBxEsv5el6Q1LjHlwgzSPQS7iGvoOYqzcFyZ46GdTrNi5
b73E4wBi/xeh7jopnqsAAA==

-->

</rfc>
