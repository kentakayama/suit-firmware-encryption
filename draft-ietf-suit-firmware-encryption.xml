<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.39 (Ruby 3.0.2) -->
<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-suit-firmware-encryption-14" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.18.0 -->
  <front>
    <title abbrev="Encrypted Payloads in SUIT Manifests">Encrypted Payloads in SUIT Manifests</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-suit-firmware-encryption-14"/>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization/>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security">Vigil Security, LLC</organization>
      <address>
        <email>housley@vigilsec.com</email>
      </address>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="D." surname="Brown" fullname="David Brown">
      <organization>Linaro</organization>
      <address>
        <email>david.brown@linaro.org</email>
      </address>
    </author>
    <author initials="K." surname="Takayama" fullname="Ken Takayama">
      <organization>SECOM CO., LTD.</organization>
      <address>
        <email>ken.takayama.ietf@gmail.com</email>
      </address>
    </author>
    <date year="2023" month="August" day="14"/>
    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <?line 86?>

<t>This document specifies techniques for encrypting software, firmware
and personalization data by utilizing the IETF
SUIT manifest. Key agreement is provided by ephemeral-static (ES)
Diffie-Hellman (DH) and AES Key Wrap (AES-KW). ES-DH
uses public key cryptography while AES-KW uses a pre-shared
key-encryption key. Encryption of the plaintext is
accomplished with conventional symmetric key cryptography.</t>
    </abstract>
  </front>
  <middle>
    <?line 96?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>Vulnerabilities with Internet of Things (IoT) devices have raised the
need for a reliable and secure firmware update mechanism that is also
suitable for constrained devices. To protect firmware images the SUIT manifest
format was developed <xref target="I-D.ietf-suit-manifest"/>. The SUIT manifest provides a
bundle of metadata about the firmware for an IoT device, where to find 
the firmware image, and the devices to which it applies.</t>
      <t>The SUIT information model <xref target="RFC9124"/> details the
information that has to be offered by the SUIT manifest format. In addition to
offering protection against modification, which is provided by a digital
signature or a message authentication code, the firmware image may also
be afforded confidentiality using encryption.</t>
      <t>Encryption prevents third parties, including attackers, from gaining access to
the firmware binary. Hackers typically need intimate knowledge of the target
firmware to mount their attacks. For example, return-oriented programming (ROP)
<xref target="ROP"/> requires access to the binary and encryption makes it much more difficult
to write exploits.</t>
      <t>The SUIT manifest provides the data needed for authorized recipients
of the firmware image to decrypt it. The firmware image is encrypted using a
symmetric key.</t>
      <t>A symmetric key can be established using a variety of mechanisms; this document
defines two approaches for use with the IETF SUIT manifest, namely:</t>
      <ul spacing="normal">
        <li>Ephemeral-Static (ES) Diffie-Hellman (DH), and</li>
        <li>AES Key Wrap (AES-KW) with a pre-shared key-encryption key (KEK).</li>
      </ul>
      <t>The former relies on asymmetric key cryptography while the latter uses symmetric key
cryptography for content key distribution.</t>
      <t>Our goal was to reduce the number of content key distribution options and thereby
increase interoperability between different SUIT manifest parser implementations.</t>
      <t>While the original motivating use case of this document was firmware encryption,
SUIT manifests may require payloads other than firmware images to experience
confidentiality protection, such as</t>
      <ul spacing="normal">
        <li>software packages,</li>
        <li>personalization data,</li>
        <li>configuration data, and</li>
        <li>machine learning models.</li>
      </ul>
      <t>Hence, the term payload is used to generically refer to those objects that may be subject to
encryption.</t>
    </section>
    <section anchor="conventions-and-terminology">
      <name>Conventions and Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>
      <t>This document assumes familiarity with the IETF SUIT manifest <xref target="I-D.ietf-suit-manifest"/>,
the SUIT information model <xref target="RFC9124"/> and the SUIT architecture <xref target="RFC9019"/>.</t>
      <t>The terms sender and recipient have the following meaning:</t>
      <ul spacing="normal">
        <li>Sender: Role of the entity that sends an encrypted payload.</li>
        <li>Recipient: Role of the entity that receives an encrypted payload.</li>
      </ul>
      <t>Additionally, we introduce the term "distribution system" (or distributor)
to refer to an entity that knows the recipients of the firmware images.
For use of encryption it therefore either knows the public key of the
recipient (for ES-DH), or the KEK (for AES-KW). The author on the other
hand does not know the recipients, which is responsible for creating the
firmware image. It is important to note that the distribution system is
far more than a file server.</t>
      <t>Finally, the following abbreviations are used in this document:</t>
      <ul spacing="normal">
        <li>Key Wrap (KW), defined in <xref target="RFC3394"/> (for use with AES)</li>
        <li>Key-Encryption Key (KEK) <xref target="RFC3394"/></li>
        <li>Content-Encryption Key (CEK) <xref target="RFC5652"/></li>
        <li>Ephemeral-Static (ES) Diffie-Hellman (DH) <xref target="RFC9052"/></li>
      </ul>
    </section>
    <section anchor="arch">
      <name>Architecture</name>
      <t><xref target="RFC9019"/> describes the architecture for distributing payloads and
manifests from an author to devices. It does, however, not detail the
use of payload encryption.</t>
      <t>This document enhances this architecture to support encryption. The author
and the distribution system are logical roles. In some deployments these
roles are separated in different physical entities and in others they are
co-located.</t>
      <t><xref target="arch-fig"/> shows the distribution system, which represents the firmware
server and the device management infrastructure.</t>
      <t>To apply encryption the sender (author) needs to know the recipient (device).
For AES-KW the KEK needs to be known and, in case of ES-DH, the sender needs
to be in possession of the public key of the recipient. The public key and
parameters may be in the recipient's X.509 certificate <xref target="RFC5280"/>.
Furthermore, for ES-DH the recipients must be provisioned with a public key
(or certificate) for digital signature verification of the manifest.</t>
      <t>With encryption the author cannot just create a manifest for the firmware
image and sign it since the subsequent encryption step by the distribution
system would invalidate the signature over the manifest. (The content key
distribution information is embedded inside the COSE_Encrypt structure,
which is included in the SUIT manifest.) Hence, the author has to
collaborate with the distribution system. The varying degree of
collaboration is discussed below.</t>
      <figure anchor="arch-fig">
        <name>Firmware Encryption Architecture.</name>
        <artwork><![CDATA[
                                           +----------+
                                           |  Author  |
 +----------+                              +----------+
 |  Device  |---+                               |
 |          |   |                               | Firmware +
 |          |   |                               | Manifest
 +----------+   |                               |
                |                               |
                |                               |
                |                        +--------------+
 +----------+   |  Firmware + Manifest   | Distribution |
 |  Device  |---+------------------------|    System    |
 |          |   |                        +--------------+
 |          |   |
 +----------+   |
                |
                |
 +----------+   |
 |  Device  +---+
 |          |
 |          |
 +----------+
]]></artwork>
      </figure>
      <t>The author has several deployment options, namely</t>
      <ul spacing="normal">
        <li>The author, as the sender, obtains information about the recipients
and their keys from the distribution system. Then, it performs the necessary
steps to encrypt the payload. As a last step it creates one or more manifests.
The device(s)perform decryption and act as recipients.</li>
        <li>The author treats the distribution system as the initial recipient. Then,
the distribution system decrypts and re-encrypts the payload for consumption
by the device (or the devices). Delegating the task of re-encrypting
the payload to the distribution system offers flexiblity when the number
of devices that need to receive encrypted payloads changes dynamically
or when updates to KEKs or recipient public keys are necessary. As a downside,
the author needs to trust the distribution system with performing the
re-encryption of the payload.</li>
      </ul>
      <t>If the author and distributor are separate entities, then the author must delegate
encryption rights to the distributor. By the principle of least privilege, this
should only grant the distributor decryption and re-encryption rights. There are
two models:</t>
      <ol spacing="normal" type="1"><li>The distributor replaces the COSE_Encrypt in the manifest and then signs the
manifest again. However, the COSE_Encrypt structure is contained
within a signed container, which presents a problem: replacing the COSE_Encrypt with a new one
will cause the digest of the manifest to change, thereby changing the signature. This means that
the distributor must be able to sign the new manifest. If this is the case, then the distributor
gains the ability to construct and sign manifests, which allows the distributor the authority
to sign code, effectively presenting the distributor with full control over the recipient.</li>
        <li>The alternative is to use a two-manifest system, where the distributor constructs
a new manifest that overrides the COSE_Encrypt using the dependency system defined in
<xref target="I-D.ietf-suit-trust-domains"/>. This incurrs additional overhead: one additional signature
verification and one additional manifest, as well as the additional machinery in the recipient
needed for dependency processing.</li>
      </ol>
      <t>These two models also present different threat profiles for the distributor. If the
distributor only has encryption rights, then an attacker who breaches the distributor can only
mount a limited attack: they can encrypt a modified binary, but the recipients will identify
the attack as soon as they perform the required image digest check and revert back to a correct
image immediately.</t>
      <t>However, if the distributor has the authority to sign a single manifest, this threat profile is
substantially degraded: a successful breach of the distributor grants the attacker the ability
to distribute whatever code they like to recipient devices. The recipient will validate the
signature of the code and run it without identifying the attack. Because distributors typically
must perform their re-encryption online in order to handle a large number of devices in a timely
fashion, it is not possible to air-gap the distributor's signing operations. This degrades
the recommendations in <xref target="RFC9124"/>, Section 4.3.17.</t>
      <t>It is strongly RECOMMENDED that distributors are implemented using a two-manifest system in order
to distribute encryption keys without requiring re-signing of the manifest, despite the increase
in complexity and greater number of signature verifications that this imposes on the recipient.</t>
    </section>
    <section anchor="parameters">
      <name>Encryption Extensions</name>
      <t>This specification introduces a new extension to the SUIT_Parameters structure.</t>
      <t>The SUIT encryption info parameter (called suit-parameter-encryption-info),
see <xref target="parameter-fig"/>, contains key distribution information. It is carried
inside the suit-directive-override-parameters or the suit-directive-set-parameters
structure. The content of the SUIT_Encryption_Info structure is explained in
<xref target="AES-KW"/> (for AES-KW) and <xref target="ES-DH"/> (for ES-DH). An implementation claiming
conformance with this specification must implement support for this parameter.
A device may, however, support only one of the available key distribution techniques.</t>
      <figure anchor="parameter-fig">
        <name>CDDL of the SUIT_Parameters Extension.</name>
        <artwork><![CDATA[
SUIT_Parameters //= (suit-parameter-encryption-info
    => bstr .cbor SUIT_Encryption_Info)

suit-parameter-encryption-info   = [TBD1: Proposed 19]
]]></artwork>
      </figure>
    </section>
    <section anchor="extended-directives">
      <name>Extended Directives</name>
      <t>This specification extends these directives:</t>
      <ul spacing="normal">
        <li>Directive Write (suit-directive-write) to decrypt the content specified by
suit-parameter-content with suit-parameter-encryption-info.</li>
        <li>Directive Copy (suit-directive-copy) to decrypt the content of the component
specified by suit-parameter-source-component with suit-parameter-encryption-info.</li>
      </ul>
      <t>Examples of the two directives are shown below.</t>
      <t><xref target="encryption-info-consumed-with-write"/> illustrates the Directive Write.</t>
      <figure anchor="encryption-info-consumed-with-write">
        <name>Example showing the Extended suit-directive-write.</name>
        <artwork><![CDATA[
/ directive-override-parameters / 20, {
  / parameter-content / 18: h'EA1CED',
  / parameter-encryption-info / 19: h'D860E1A1F0'
},
/ directive-write / 18, 15
/ NOTE: decrypt h'EA1CED' using h'D860E1A1F0' /
/ NOTE: plaintext payload is stored into component #0 /
]]></artwork>
      </figure>
      <t><xref target="encryption-info-consumed-with-copy"/> illustrates the Directive Copy.</t>
      <figure anchor="encryption-info-consumed-with-copy">
        <name>Example showing the Extended suit-directive-copy.</name>
        <artwork><![CDATA[
/ directive-set-component-index / 12, 1,
/ directive-override-parameters / 20, {
  / parameter-uri / 21: "http://example.com/encrypted.bin",
},
/ directive-fetch / 21, 15,
/ NOTE: encrypted payload is stored into component #1 /
/ directive-set-component-index / 12, 0,
/ directive-override-parameters / 20, {
  / parameter-source-component / 22: 1,
  / parameter-encryption-info / 19: h'D860E1A1F0'
},
/ directive-copy / 22, 15
/ NOTE: decrypt component #1 using h'D860E1A1F0' /
/ NOTE: plaintext payload is stored into component #0 /
]]></artwork>
      </figure>
      <t>The payload to be encrypted may be detached and, in that case, it is not covered by a digital
signature or a MAC of the manifest. (To be more precise, the suit-authentication-wrapper found in
the envelope contains a digest of the manifest in the SUIT Digest Container.) The lack of
authentication and integrity protection of the payload is particularly a concern when a cipher
without integrity protection is used. To authenticate the payload in the attached payload case a
SUIT Digest Container with the digest of the encrypted and/or plaintext payload MUST be included
in the manifest.</t>
      <t>An attacker may, of example, swaps detached payloads and thereby force the device to process a
wrong payload. This can lead to battery exhaustion attacks where an adversary expends energy and
flash cycles of the device.</t>
      <t>Including the digest of the encrypted payload allows the device to detect incorrectly encrypted
before decryption took place. Including the digest of the plaintext payload is adequate when
battery exhaustion attacks are not a concern.</t>
    </section>
    <section anchor="content-key-distribution-methods">
      <name>Content Key Distribution Methods</name>
      <t>The sub-sections below describe two content key distribution mechanisms,
namely AES Key Wrap (AES-KW) and Ephemeral-Static Diffie-Hellman (ES-DH).
Other mechanisms are supported by COSE and may be supported via enhancements
to this specification.</t>
      <t>When an encrypted firmware image is sent to multiple recipients, there
are different deployment options. To explain these options we use the
following notation:</t>
      <ul spacing="normal">
        <li>KEK(R1,S) refers to a KEK shared between recipient R1 and the sender S.
The KEK, as a concept, is used by AES Key Wrap.</li>
        <li>CEK(R1,S) refers to a CEK shared between R1 and S.</li>
        <li>CEK(<em>,S) or KEK(</em>,S) are used when a single CEK or a single KEK is shared
with all authorized recipients by a given sender S in a certain context.</li>
        <li>ENC(plaintext, k) refers to the encryption of plaintext with a key k.</li>
        <li>KEK_i or CEK_i refers to the i-th instance of the KEK or CEK, respectively.</li>
      </ul>
      <section anchor="AES-KW">
        <name>Content Key Distribution with AES Key Wrap</name>
        <section anchor="introduction-1">
          <name>Introduction</name>
          <t>The AES Key Wrap (AES-KW) algorithm is described in RFC 3394 <xref target="RFC3394"/>, and
can be used to encrypt a randomly generated content-encryption key (CEK)
with a pre-shared key-encryption key (KEK). The COSE conventions for using
AES-KW are specified in Section 8.5.2 of <xref target="RFC9052"/> and in Section 6.2.1 of
<xref target="RFC9053"/>. The encrypted CEK is carried in the COSE_recipient structure
alongside the information needed for AES-KW. The COSE_recipient structure,
which is a substructure of the COSE_Encrypt structure, contains the CEK
encrypted by the KEK.</t>
          <t>The COSE_Encrypt structure conveys information for encrypting the payload,
which includes information like the algorithm and the IV, even though the
payload is not embedded in the COSE_Encrypt.ciphertext itself since it
conveyed as detached content.</t>
        </section>
        <section anchor="deployment-options">
          <name>Deployment Options</name>
          <t>There are three deployment options for use with AES Key Wrap for payload
encryption:</t>
          <ul spacing="normal">
            <li>If all authorized recipients have access to the KEK, a single
COSE_recipient structure contains the encrypted CEK. The sender executes
the following steps:</li>
          </ul>
          <artwork><![CDATA[
      Fetch KEK(*,S)
      Generate CEK
      ENC(CEK,KEK)
      ENC(payload,CEK)
]]></artwork>
          <ul spacing="normal">
            <li>If recipients have different KEKs, then multiple COSE_recipient structures
are included but only a single CEK is used. Each COSE_recipient structure
contains the CEK encrypted with the KEKs appropriate for a given recipient.
The benefit of this approach is that the payload is encrypted only once with
a CEK while there is no sharing of the KEK across recipients. Hence, authorized
recipients still use their individual KEK to decrypt the CEK and to subsequently
obtain the plaintext. The steps taken by the sender are:</li>
          </ul>
          <artwork><![CDATA[
      Generate CEK
      for i=1 to n {
         Fetch KEK_i(Ri, S)
         ENC(CEK, KEK_i)
      }
      ENC(payload,CEK)
]]></artwork>
          <ul spacing="normal">
            <li>The third option is to use different CEKs encrypted with KEKs of
authorized recipients. Assume there are n recipients with their unique KEKs -
KEK_1(R1, S),..., KEK_n(Rn, S). The sender needs to make the following steps:</li>
          </ul>
          <artwork><![CDATA[
      for i=1 to n {
         Fetch KEK_i(Ri, S)
         Generate CEK_i
         ENC(CEK_i, KEK_i)
         ENC(payload,CEK_i)
      }
]]></artwork>
          <t>This approach is appropriate when no benefits can be gained from encrypting
and transmitting payloads only once.</t>
        </section>
        <section anchor="cddl">
          <name>CDDL</name>
          <t>The CDDL for the COSE_Encrypt_Tagged structure is shown in <xref target="cddl-aeskw"/>.</t>
          <figure anchor="cddl-aeskw">
            <name>CDDL for AES-KW-based Content Key Distribution</name>
            <artwork><![CDATA[
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
 
SUIT_Encryption_Info = COSE_Encrypt_Tagged

COSE_Encrypt = [
  protected   : bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : bstr / nil,
  recipients  : [ + COSE_recipient ]
]

outer_header_map_protected =
{
    1 => int,         ; algorithm identifier
  * label => values   ; extension point
}

outer_header_map_unprotected = 
{
    5 => bstr,        ; IV
  * label => values   ; extension point
}

COSE_recipient = [
  protected   : bstr .size 0,
  unprotected : recipient_header_map,
  ciphertext  : bstr        ; CEK encrypted with KEK
]

recipient_header_map = 
{
    1 => int,         ; algorithm identifier
    4 => bstr,        ; key identifier
  * label => values   ; extension point
}
]]></artwork>
          </figure>
          <t>Note that the AES-KW algorithm, as defined in Section 2.2.3.1 of <xref target="RFC3394"/>,
does not have public parameters that vary on a per-invocation basis. Hence,
the protected header in the COSE_recipient structure is a byte string
of zero length.</t>
          <t>The COSE specification requires a consistent byte stream for the authenticated
data structure to be created. This structure is shown in <xref target="cddl-enc-aeskw"/>.</t>
          <figure anchor="cddl-enc-aeskw">
            <name>CDDL for Enc_structure Data Structure</name>
            <artwork><![CDATA[
       Enc_structure = [
         context : "Encrypt",
         protected : empty_or_serialized_map,
         external_aad : bstr
       ]
]]></artwork>
          </figure>
          <t>This Enc_structure needs to be populated as follows:</t>
          <t>The protected field in the Enc_structure from <xref target="cddl-enc-aeskw"/> refers
to the content of the protected field from the COSE_Encrypt structure.
It is important to note that there are two protected fields shown
in <xref target="cddl-aeskw"/>:</t>
          <ul spacing="normal">
            <li>one in the COSE_Encrypt structure, and</li>
            <li>a second one in the COSE_recipient structure.</li>
          </ul>
          <t>The value of the external_aad MUST be set to a null value (major type 7,
value 22).</t>
        </section>
        <section anchor="example">
          <name>Example</name>
          <t>This example uses the following parameters:</t>
          <ul spacing="normal">
            <li>Algorithm for payload encryption: AES-GCM-128</li>
            <li>Algorithm id for key wrap: A128KW</li>
            <li>IV: 0x26, 0x68, 0x23, 0x06, 0xd4, 0xfb, 0x28, 0xca, 0x01, 0xb4, 0x3b, 0x80</li>
            <li>KEK: "aaaaaaaaaaaaaaaa"</li>
            <li>KID: "kid-1"</li>
            <li>Plaintext firmware (txt): "This is a real firmware image."
(in hex): 546869732069732061207265616C206669726D7761726520696D6167652E</li>
          </ul>
          <t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>
          <artwork><![CDATA[
D8608443A10101A1054C26682306D4FB28CA01B43B80F68340A2012204456B69642D
315818AF09622B4F40F17930129D18D0CEA46F159C49E7F68B644D
]]></artwork>
          <t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="aeskw-example"/>.</t>
          <figure anchor="aeskw-example">
            <name>COSE_Encrypt Example for AES Key Wrap</name>
            <artwork><![CDATA[
96([
  / protected: / << {
    / alg / 1: 1 / AES-GCM-128 /
  } >>,
  / unprotected: / {
    / IV / 5: h'1de460e8b5b68d7222c0d6f20484d8ab'
  },
  / payload: / null / detached ciphertext /,
  / recipients: / [
    [
      / protected: / << {
      } >>,
      / unprotected: / {
        / alg / 1: -3 / A128KW /,
        / kid / 4: 'kid-1'
      },
      / payload: CEK encrypted with KEK /
      h'a86200e4754733e4c00fc08c6a72cc1996e129922eab504f'
    ]
  ]
])
]]></artwork>
          </figure>
          <t>The CEK, in hex format, was "4C805F1587D624ED5E0DBB7A7F7FA7EB".
The encrypted firmware (with a line feed added) was:</t>
          <artwork><![CDATA[
A8B6E61EF17FBAD1F1BF3235B3C64C06098EA512223260
F9425105F67F0FB6C92248AE289A025258F06C2AD70415
]]></artwork>
        </section>
      </section>
      <section anchor="ES-DH">
        <name>Content Key Distribution with Ephemeral-Static Diffie-Hellman</name>
        <section anchor="introduction-2">
          <name>Introduction</name>
          <t>Ephemeral-Static Diffie-Hellman (ES-DH) is a scheme that provides public key
encryption given a recipient's public key. There are multiple variants
of this scheme; this document re-uses the variant specified in Section 8.5.5
of <xref target="RFC9052"/>.</t>
          <t>The following two layer structure is used:</t>
          <ul spacing="normal">
            <li>Layer 0: Has a content encrypted with the CEK. The content may be detached.</li>
            <li>Layer 1: Uses the AES Key Wrap algorithm to encrypt a randomly generated
CEK with the KEK derived with ES-DH whereby the resulting symmetric
key is fed into the HKDF-based key derivation function.</li>
          </ul>
          <t>As a result, the two layers combine ES-DH with AES-KW and HKDF. An example is
given in <xref target="esdh-example"/>.</t>
        </section>
        <section anchor="deployment-options-1">
          <name>Deployment Options</name>
          <t>There are two deployment options with this approach. We assume that recipients
are always configured with a device-unique public / private key pair.</t>
          <ul spacing="normal">
            <li>A sender wants to transmit a payload to multiple recipients. All recipients
shall receive the same encrypted payload, i.e. the same CEK is used.
One COSE_recipient structure per recipient is used and it contains the
CEK encrypted with the KEK. To generate the KEK each COSE_recipient structure
contains a COSE_recipient_inner structure to carry the sender's emphemeral key
and an identifier for the recipients public key.</li>
          </ul>
          <t>The steps taken by the sender are:</t>
          <artwork><![CDATA[
      Generate CEK
      for i=1 to n {
         Generate KEK_i(Ri, S) using ES-DH
         ENC(CEK, KEK_i)
      }
      ENC(payload,CEK)
]]></artwork>
          <ul spacing="normal">
            <li>The alternative is to encrypt a payload with a different CEK for each
recipient. Assume there are KEK_1(R1, S),..., KEK_n(Rn, S) have been generated
for the different recipients using ES-DH. The following steps needs to be made
by the sender:</li>
          </ul>
          <artwork><![CDATA[
      for i=1 to n {
         Generate KEK_i(Ri, S) using ES-DH
         Generate CEK_i
         ENC(CEK_i, KEK_i)
         ENC(payload,CEK_i)
      }
]]></artwork>
          <t>This results in n-manifests. This approach is useful when payloads contain
information unique to a device. The encryption operation effectively becomes
ENC(payload_i,CEK_i).</t>
        </section>
        <section anchor="cddl-1">
          <name>CDDL</name>
          <t>The CDDL for the COSE_Encrypt_Tagged structure is shown in <xref target="cddl-esdh"/>.</t>
          <figure anchor="cddl-esdh">
            <name>CDDL for ES-DH-based Content Key Distribution</name>
            <artwork><![CDATA[
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
 
SUIT_Encryption_Info = COSE_Encrypt_Tagged

COSE_Encrypt = [
  protected   : bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : bstr / nil,
  recipients  : [ + COSE_recipient ]
]

outer_header_map_protected =
{
    1 => int,         ; algorithm identifier
  * label => values   ; extension point
}

outer_header_map_unprotected = 
{
    5 => bstr,        ; IV
  * label => values   ; extension point
}

COSE_recipient = [
  protected   : bstr .cbor recipient_header_pr_map,
  unprotected : recipient_header_unpr_map,
  ciphertext  : bstr        ; CEK encrypted with KEK
]

recipient_header_pr_map = 
{
    1 => int,         ; algorithm identifier for key wrap
  * label => values   ; extension point
}

recipient_header_unpr_map = 
{
   -1 => COSE_Key,    ; ephemeral public key for the sender
    4 => bstr,        ; identifier of the recipient public key
  * label => values   ; extension point
}
]]></artwork>
          </figure>
        </section>
        <section anchor="context-information-structure">
          <name>Context Information Structure</name>
          <t>The context information structure is used to ensure that the derived keying material
is "bound" to the context of the transaction. This specification re-uses the structure
defined in Section 5.2 of RFC 9053 and tailors it accordingly.</t>
          <t>The following information elements are bound to the context:</t>
          <ul spacing="normal">
            <li>the protocol employing the key-derivation method,</li>
            <li>information about the utilized AES Key Wrap algorithm,and the key length.</li>
            <li>the protected header field, which contains the content key encryption algorithm.</li>
          </ul>
          <t>The sender and recipient identities are left empty in</t>
          <t>The following fields in <xref target="cddl-context-info"/> require an explantation:</t>
          <ul spacing="normal">
            <li>The COSE_KDF_Context.AlgorithmID field contains the algorithm identifier for
A128KW (value -4), A192KW (value -4), or A256KW (value -5).</li>
            <li>The COSE_KDF_Context.SuppPubInfo.keyDataLength field contains the key length
of the algorithm in the COSE_KDF_Context.AlgorithmID field expressed as the number
of bits. For A128KW the value is 128, for A192KW the value is 192, and for A256KW
the value 256.</li>
            <li>The COSE_KDF_Context.SuppPubInfo.other field captures the protocol in
which the ES-DH content key distribution algorithm is used and MUST be set to
the constant string "SUIT Payload Encryption".</li>
            <li>The COSE_KDF_Context.SuppPubInfo.protected field serializes the content
of the recipient_header_pr_map field, which (among other fields) contains the
content key distribution algorithm identifier.</li>
          </ul>
          <figure anchor="cddl-context-info">
            <name>CDDL for COSE_KDF_Context Structure</name>
            <artwork><![CDATA[
PartyInfoSender = (
    identity : bstr .size 0,
    nonce : nil,
    other : bstr .size 0
)

PartyInfoRecipient = (
    identity : bstr .size 0,
    nonce : nil,
    other : bstr .size 0
)

COSE_KDF_Context = [
    AlgorithmID : int,
    PartyUInfo : [ PartyInfoSender ],
    PartyVInfo : [ PartyInfoRecipient ],
    SuppPubInfo : [
        keyDataLength : uint,
        protected : bstr .cbor recipient_header_pr_map,
        other: bstr "SUIT Payload Encryption"
    ],
    SuppPrivInfo : bstr .size 0
]
]]></artwork>
          </figure>
          <t>Profiles of this specification MAY specify an extended version of the
context information structure or MAY utilize a different context information
structure.</t>
        </section>
        <section anchor="example-1">
          <name>Example</name>
          <t>This example uses the following parameters:</t>
          <ul spacing="normal">
            <li>Algorithm for payload encryption: AES-GCM-128</li>
            <li>IV: 0x26, 0x68, 0x23, 0x06, 0xd4, 0xfb,
    0x28, 0xca, 0x01, 0xb4, 0x3b, 0x80</li>
            <li>Algorithm for content key distribution: ES-DH + A128KW</li>
            <li>KID: "kid-1"</li>
            <li>Plaintext: "This is a real firmware image."</li>
            <li>Firmware (hex):
546869732069732061207265616C206669726D7761726520696D6167652E</li>
          </ul>
          <t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>
          <artwork><![CDATA[
D8608443A10101A1054C26682306D4FB28CA01B43B805823F21AC5881CD6FC45754
C65790F806C81A57B8D96C1988233BF40F670172405B5F107FD8444A101381C44A1
01381CA220A401022001215820415A8ED270C4B1F10B0A2D42B28EE6028CE25D745
52CB4291A4069A2E989B0F6225820CCC9AAF60514B9420C80619A4FF068BC1D7762
5BA8C90200882F7D5B73659E7604456B69642D315818B37CCD582696E5E62E5D93A
555E9072687D6170B122322EE
]]></artwork>
          <t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="esdh-example"/>. Note that the COSE_Encrypt structure also needs to
protected by a COSE_Sign1, which is not shown below.</t>
          <figure anchor="esdh-example">
            <name>COSE_Encrypt Example for ES-DH</name>
            <artwork><![CDATA[
96(
  [
   / protected / h'a10101' / {
       \ alg \ 1:1 \ AES-GCM-128 \
     } / ,
   / unprotected / {
     / iv / 5:h'26682306D4FB28CA01B43B80'
     },
   / encrypted firmware /
    h'F21AC5881CD6FC45754C65790F806C81A57
      B8D96C1988233BF40F670172405B5F107FD',
    [
       / protected / h'A101381C' / {
           \ alg \ 1:-29 \ ES-DH + A128KW \
         } / ,
         h'A101381C',
       / unprotected / {
             / ephemeral / -1: {
                   / kty / 1:2,
                   / crv / -1:1,
                   / x / -2:h'415A8ED270C4B1F10B0A2D42B28EE602
                              8CE25D74552CB4291A4069A2E989B0F6',
                   / y / -3:h'CCC9AAF60514B9420C80619A4FF068BC
                              1D77625BA8C90200882F7D5B73659E76'
                 },
                 / kid / 4:'kid-1'
        },
        / ciphertext - CEK encrypted with KEK /
        h'B37CCD582696E5E62E5D93A555E9072687D6170B122322EE'
    ]
  ]
)
]]></artwork>
          </figure>
        </section>
      </section>
    </section>
    <section anchor="firmware-updates-on-iot-devices-with-flash-memory">
      <name>Firmware Updates on IoT Devices with Flash Memory</name>
      <t>Flash memory on microcontrollers is a type of non-volatile memory that erases
data in units called blocks, pages or sectors and re-writes data at byte level
(often 4-bytes).
Flash memory is furthermore segmented into different memory regions, which store
the bootloader, different versions of firmware images (in so-called slots),
and configuration data. <xref target="image-layout"/> shows an example layout of a
microcontroller flash area. The primary slot contains the firmware image to be
executed by the bootloader, which is a common deployment on devices that do
not offer the concept of position independent code.</t>
      <t>When the encrypted firmware image has been transferred to the device, it will
typically be stored in a staging area, in the secondary slot in our example.</t>
      <t>At the next boot, the bootloader will recognize a new firmware image in the
secondary slot and will start decrypting the downloaded image sector-by-sector
and will swap it with the image found in the primary slot.</t>
      <t>The swap should only take place after the signature on the plaintext is verified.
Note that the plaintext firmware image is available in the primary slot only after
the swap has been completed, unless "dummy decrypt" is used to compute the hash
over the plaintext prior to executing the decrypt operation during a swap.
Dummy decryption here refers to the decryption of the firmware image found in
the secondary slot sector-by-sector and computing a rolling hash over the resulting
plaintext firmware image (also sector-by-sector) without performing the swap operation.
While there are performance optimizations possible, such as conveying hashes for
each sector in the manifest rather than a hash of the entire firmware image,
such optimizations are not described in this specification.</t>
      <t>This approach of swapping the newly downloaded image with the previously valid
image is often referred as A/B approach. A/B refers to the two slots involved.
Two slots are used to allow the update to be reversed in case the newly obtained
firmware image fails to boot. This approach adds robustness to the firmware
update procedure.</t>
      <t>Since the image in primary slot is available in cleartext it may need to
re-encrypted it before copying it to the secondary slot. This may be necessary
when the secondary slot has different access permissions or when the staging
area is located in an off-chip flash memory and therefore more vulnerable to
physical attacks. Note that this description assumes that the processor does
not execute encrypted memory (i.e. using on-the-fly decryption in hardware).</t>
      <figure anchor="image-layout">
        <name>Example Flash Area Layout</name>
        <artwork><![CDATA[
+--------------------------------------------------+
| Bootloader                                       |
+--------------------------------------------------+
| Primary Slot                                     |
|                                        (sector 1)|
|..................................................|
|                                                  |
|                                        (sector 2)|
|..................................................|
|                                                  |
|                                        (sector 3)|
|..................................................|
|                                                  |
|                                        (sector 4)|
+--------------------------------------------------+
| Secondary Slot                                   |
|                                        (sector 1)|
|..................................................|
|                                                  |
|                                        (sector 2)|
|..................................................|
|                                                  |
|                                        (sector 3)|
|..................................................|
|                                                  |
|                                        (sector 4)|
+--------------------------------------------------+
| Swap Area                                        |
|                                                  |
+--------------------------------------------------+
| Configuration Data                               |
+--------------------------------------------------+
]]></artwork>
      </figure>
      <t>The ability to restart an interrupted firmware update is often a requirement
for low-end IoT devices. To fulfill this requirement it is necessary to chunk
a firmware image into sectors and to encrypt each sector individually
using a cipher that does not increase the size of the resulting ciphertext
(i.e., by not adding an authentication tag after each encrypted block).</t>
      <t>When an update gets aborted while the bootloader is decrypting the newly obtained
image and swapping the sectors, the bootloader can restart where it left off. This
technique offers robustness and better performance.</t>
      <t>For this purpose ciphers without integrity protection are used to encrypt the
firmware image. Integrity protection for the firmware image must, however, be
provided and the suit-parameter-image-digest, defined in Section 8.4.8.6 of
<xref target="I-D.ietf-suit-manifest"/>, MUST be used.</t>
      <t><xref target="I-D.ietf-cose-aes-ctr-and-cbc"/> registers AES Counter mode (AES-CTR) and
AES Cipher Block Chaining (AES-CBC) ciphers that do not offer integrity protection.
These ciphers are useful for the use cases that require firmware encryption on IoT
devices. For many other use cases where software packages, configuration information
or personalization data needs to be encrypted, the use of Authenticated Encryption
with Additional Data (AEAD) ciphers is preferred.</t>
      <t>The following sub-sections provide further information about the initialization vector
(IV) selection for use with AES-CBC and AES-CTR in the firmware encryption context. An
IV MUST NOTE be re-used when the same key is used. For this application, the IVs are
not random but rather based on the slot/sector-combination in flash memory. The
text below assumes that the block-size of AES is (much) smaller than sector size. The
typical sector-size of flash memory is in the order of KiB. Hence, multiple AES blocks
need to be decrypted until an entire sector is completed.</t>
      <section anchor="aes-cbc">
        <name>AES-CBC</name>
        <t>In AES-CBC a single IV is used for encryption of firmware belonging to a single sector
since individual AES blocks are chained toghether, as shown in <xref target="aes-cbc-fig"/>. The
numbering  of sectors in a slot MUST start with zero (0) and MUST increase by one with
every sector till the end of the slot is reached. The IV follows this numbering.</t>
        <t>For example, let us assume the slot size of a specific flash controller on an IoT device
is 64 KiB, the sector size 4096 bytes (4 KiB) and AES-128-CBC uses an AES-block size of
128 bit (16 bytes). Hence, sector 0 needs 4096/16=256 AES-128-CBC operations using IV 0.
If the firmware image fills the entire slot then that slot contains 16 sectors, i.e. IVs
ranging from 0 to 15.</t>
        <figure anchor="aes-cbc-fig">
          <name>AES-CBC Operation</name>
          <artwork><![CDATA[
       P1              P2
        |              |
   IV--(+)    +-------(+)
        |     |        |
        |     |        |
    +-------+ |    +-------+
    |       | |    |       |
    |       | |    |       |
 k--|  E    | | k--|  E    |
    |       | |    |       |
    +-------+ |    +-------+
        |     |        |
        +-----+        |
        |              |
        |              |
        C1             C2

Legend: 
  Pi = Plaintext blocks
  Ci = Ciphertext blocks
  E = Encryption function
  k = Symmetric key
  (+) = XOR operation
]]></artwork>
        </figure>
      </section>
      <section anchor="aes-ctr">
        <name>AES-CTR</name>
        <t>Unlike AES-CBC, AES-CTR uses an IV per AES operation, as shown in <xref target="aes-ctr-fig"/>.
Hence, when an image is encrypted using AES-CTR-128 or AES-CTR-256, the IV MUST
start with zero (0) and MUST be incremented by one for each 16-byte plaintext block
within the entire slot.</t>
        <t>Using the previous example with a slot size of 64 KiB, the sector size 4096 bytes and
the AES plaintext block size of 16 byte requires IVs from 0 to 255 in the first sector
and 16 * 256 IVs for the remaining sectors in the slot.</t>
        <figure anchor="aes-ctr-fig">
          <name>AES-CTR Operation</name>
          <artwork><![CDATA[
         IV1            IV2
          |              |
          |              |
          |              |
      +-------+      +-------+
      |       |      |       |
      |       |      |       |
   k--|  E    |   k--|  E    |
      |       |      |       |
      +-------+      +-------+
          |              |
     P1--(+)        P2--(+)
          |              |
          |              |
          C1             C2

Legend: 
  See previous diagram.
]]></artwork>
        </figure>
      </section>
    </section>
    <section anchor="complete-examples">
      <name>Complete Examples</name>
      <t>The following manifests examplify how to deliver encrypted firmware and its
encryption info to devices.</t>
      <t>The examples are signed using the following ECDSA secp256r1 key:</t>
      <artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork>
      <t>The corresponding public key can be used to verify these examples:</t>
      <artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork>
      <t>Each example uses SHA-256 as the digest function.</t>
      <section anchor="example-AES-KW-write">
        <name>AES Key Wrap Example with Write Directive</name>
        <t>The following SUIT manifest requests a parser to write and to decrypt the
encrypted payload into a component with the suit-directive-write
directive.</t>
        <t>The SUIT manifest in diagnostic notation (with line breaks added
for readability) is shown here:</t>
        <artwork><![CDATA[
{::include examples/suit-manifest-aes-kw-content.diag.signed}
]]></artwork>
        <t>In hex format, the SUIT manifest is this:</t>
        <artwork><![CDATA[
{::include examples/suit-manifest-aes-kw-content.hex.signed}
]]></artwork>
      </section>
      <section anchor="example-AES-KW-copy">
        <name>AES Key Wrap Example with Fetch + Copy Directives</name>
        <t>The following SUIT manifest requests a parser to fetch the encrypted
payload and to stores it. Then, the payload is decrypt and stored into
another component with the suit-directive-copy directive. This approach
works well on constrained devices with execute-in-place flash memory.</t>
        <t>The SUIT manifest in diagnostic notation (with line breaks added for
readability) is shown here:</t>
        <artwork><![CDATA[
{::include examples/suit-manifest-aes-kw.diag.signed}
]]></artwork>
        <t>In hex format, the SUIT manifest is this:</t>
        <artwork><![CDATA[
{::include examples/suit-manifest-aes-kw.hex.signed}
]]></artwork>
      </section>
    </section>
    <section anchor="sec-cons">
      <name>Security Considerations</name>
      <t>The algorithms described in this document assume that the party performing payload encryption</t>
      <ul spacing="normal">
        <li>shares a key-encryption key (KEK) with the recipient (for use with the AES Key Wrap scheme), or</li>
        <li>is in possession of the public key of the recipient (for use with ES-DH).</li>
      </ul>
      <t>Both cases require some upfront communication interaction to distribute these keys to the involved
communication parties. This interaction may be provided by an device management solution,
as described in <xref target="RFC9019"/>, or may be executed earlier in the lifecycle of the device, for example
during manufacturing or during commissioning. In addition to the keying material key identifiers
and algorithm information needs to be provisioned. This specification places no requirements
on the structure of the key identifier.</t>
      <t>To provide high security for AES Key Wrap it is important that the KEK is of high entropy,
and that implementations protect the KEK from disclosure. Compromise of the KEK may result
in the disclosure of all key data protected with that KEK.</t>
      <t>Since the CEK is randomly generated, it must be ensured that the guidelines for random number
generation in <xref target="RFC8937"/> are followed.</t>
      <t>In some cases third party companies analyse binaries for known security vulnerabilities. With
encrypted payloads this type of analysis is prevented. Consequently, these third party
companies either need to be given access to the plaintext binary before encryption or they need
to become authorized recipients of the encrypted payloads. In either case, it is necessary to
explicitly consider those third parties in the software supply chain when such a binary analysis
is desired.</t>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <t>IANA is asked to add two values to the SUIT_Parameters registry established by 
<xref target="I-D.ietf-suit-manifest"/>.</t>
      <artwork><![CDATA[
Label      Name                 Reference
-----------------------------------------
TBD1       Encryption Info      Section 4
]]></artwork>
      <t>[Editor's Note: 
 - TBD1: Proposed 19
]</t>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC3394">
          <front>
            <title>Advanced Encryption Standard (AES) Key Wrap Algorithm</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <author fullname="R. Housley" initials="R." surname="Housley"/>
            <date month="September" year="2002"/>
          </front>
          <seriesInfo name="RFC" value="3394"/>
          <seriesInfo name="DOI" value="10.17487/RFC3394"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9053">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052).</t>
              <t>This document, along with RFC 9052, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9053"/>
          <seriesInfo name="DOI" value="10.17487/RFC9053"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="I-D.ietf-suit-manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Ãyvind RÃ¸nningstad" initials="O." surname="RÃ¸nningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="27" month="February" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-22"/>
        </reference>
        <reference anchor="I-D.ietf-cose-aes-ctr-and-cbc">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): AES-CTR and AES-CBC</title>
            <author fullname="Russ Housley" initials="R." surname="Housley">
              <organization>Vigil Security, LLC</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <date day="25" month="May" year="2023"/>
            <abstract>
              <t>   The Concise Binary Object Representation (CBOR) data format is
   designed for small code size and small message size.  CBOR Object
   Signing and Encryption (COSE) is specified in RFC 9052 to provide
   basic security services using the CBOR data format.  This document
   specifies the conventions for using AES-CTR and AES-CBC as Content
   Encryption algorithms with COSE.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-aes-ctr-and-cbc-06"/>
        </reference>
        <reference anchor="I-D.ietf-suit-trust-domains">
          <front>
            <title>SUIT Manifest Extensions for Multiple Trust Domains</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Ken Takayama" initials="K." surname="Takayama">
              <organization>SECOM CO., LTD.</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This specification describes extensions to the SUIT Manifest format
   (as defined in [I-D.ietf-suit-manifest]) for use in deployments with
   multiple trust domains.  A device has more than one trust domain when
   it enables delegation of different rights to mutually distrusting
   entities for use for different purposes or Components in the context
   of firmware or software update.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-trust-domains-04"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC9019">
          <front>
            <title>A Firmware Update Architecture for Internet of Things</title>
            <author fullname="B. Moran" initials="B." surname="Moran"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <author fullname="D. Brown" initials="D." surname="Brown"/>
            <author fullname="M. Meriac" initials="M." surname="Meriac"/>
            <date month="April" year="2021"/>
            <abstract>
              <t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t>
              <t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9019"/>
          <seriesInfo name="DOI" value="10.17487/RFC9019"/>
        </reference>
        <reference anchor="RFC9124">
          <front>
            <title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
            <author fullname="B. Moran" initials="B." surname="Moran"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <date month="January" year="2022"/>
            <abstract>
              <t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t>
              <t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9124"/>
          <seriesInfo name="DOI" value="10.17487/RFC9124"/>
        </reference>
        <reference anchor="RFC8937">
          <front>
            <title>Randomness Improvements for Security Protocols</title>
            <author fullname="C. Cremers" initials="C." surname="Cremers"/>
            <author fullname="L. Garratt" initials="L." surname="Garratt"/>
            <author fullname="S. Smyshlyaev" initials="S." surname="Smyshlyaev"/>
            <author fullname="N. Sullivan" initials="N." surname="Sullivan"/>
            <author fullname="C. Wood" initials="C." surname="Wood"/>
            <date month="October" year="2020"/>
            <abstract>
              <t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols. Weak or predictable "cryptographically secure" pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t>
              <t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8937"/>
          <seriesInfo name="DOI" value="10.17487/RFC8937"/>
        </reference>
        <reference anchor="RFC5652">
          <front>
            <title>Cryptographic Message Syntax (CMS)</title>
            <author fullname="R. Housley" initials="R." surname="Housley"/>
            <date month="September" year="2009"/>
            <abstract>
              <t>This document describes the Cryptographic Message Syntax (CMS). This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="70"/>
          <seriesInfo name="RFC" value="5652"/>
          <seriesInfo name="DOI" value="10.17487/RFC5652"/>
        </reference>
        <reference anchor="RFC5280">
          <front>
            <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
            <author fullname="D. Cooper" initials="D." surname="Cooper"/>
            <author fullname="S. Santesson" initials="S." surname="Santesson"/>
            <author fullname="S. Farrell" initials="S." surname="Farrell"/>
            <author fullname="S. Boeyen" initials="S." surname="Boeyen"/>
            <author fullname="R. Housley" initials="R." surname="Housley"/>
            <author fullname="W. Polk" initials="W." surname="Polk"/>
            <date month="May" year="2008"/>
            <abstract>
              <t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet. An overview of this approach and model is provided as an introduction. The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms. Standard certificate extensions are described and two Internet-specific extensions are defined. A set of required certificate extensions is specified. The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions. An algorithm for X.509 certification path validation is described. An ASN.1 module and examples are provided in the appendices. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5280"/>
          <seriesInfo name="DOI" value="10.17487/RFC5280"/>
        </reference>
        <reference anchor="iana-suit" target="TBD">
          <front>
            <title>IANA SUIT Manifest Registry</title>
            <author>
              <organization>Internet Assigned Numbers Authority</organization>
            </author>
            <date year="2023"/>
          </front>
        </reference>
        <reference anchor="ROP" target="https://en.wikipedia.org/wiki/Return-oriented_programming">
          <front>
            <title>Return-Oriented Programming</title>
            <author>
              <organization>Wikipedia</organization>
            </author>
            <date year="2023" month="March"/>
          </front>
        </reference>
      </references>
    </references>
    <?line 1106?>

<section anchor="acknowledgements">
      <name>Acknowledgements</name>
      <t>We would like to thank Henk Birkholz for his feedback on the CDDL description in this document.
Additionally, we would like to thank Michael Richardson, Ãyvind RÃ¸nningstad, Dave Thaler, Laurence
Lundblade, and Carsten Bormann for their review feedback. Finally, we would like to
thank Dick Brooks for making us aware of the challenges firmware encryption imposes on binary analysis.</t>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+192XIaWbbouyL0DzvsiGupDQgQoKGPTzSTymrLQ1seqnoI
RwIpyFKSiTMTydjl/o77Kff9/Nhd054SkFXurtPn3mhVhAvI3NPaa15rr12t
Vnd3iqiIw1M1TMbZalGEE/UqWMVpMMlVlKjLt+dv1PMgia7CvMh3d4LRKAtv
7vv2JB0nwRw6n2TBVVGNwuKqmi+jonoVZfPbIAurIfcTpUm10drdGQdFOE2z
1anKi8nuzu5OtMhOVZEt86JZr5/UmzCDLAxO1WU4XmZRsdrduU2z62mWLhen
NPzuznW4gt8mp+o8KcIsCYvqAEfH3vIiSCYfgjhNYE6rEGa4iE53d5TKrsbh
JC9Wsf5dqSIdu5+jZBImhfklT7MiC69y+8Nq7n8vsmhs3x+n8zm0t8+jJI4S
Z7TwU1GNo7yoQkejNIYXq+nvHuMjAOI8WCyiZOrO50Mc3oT4WgsXFiyLWZrh
Uqr4nP6iBJ4+rak3+XiWXoVJNDWPeFOeBkkS5pueh/Mgik/VjF6oFeaFP0zn
n2oAURyyPNLrmnqaLvM4XJWGeb3M87VHaTYFNPkc4M6fqnfRNIrNnlbUxUXf
vKkxzn9nbarc/x9u8K08HNcA4P4saZK9mnqeZkGif+QZ9rIwmQSJ/8ifYTeb
q4toHgHG6xdkZGlco8Z/CLL5lqEHNXg1vS0NPQhuoon/wB/4IkqCLC2NOcFW
tRG2+kNML9Sg1YZBn8H2B9fBKpgH/rjPwmTtiT/w5bD/8rnqv6zBdrwZ1Eoz
uA6TWiHta0jXgBrwQK89SbM59HMTEnW9Pus3G40T/fnw8KSlP5/U203n86H+
fNw44nfOq4Oa5Rtz4S3+o3Gah9UgzKvjIqsChVfHo/GGxsRGqpMUJgqwIe6S
XJUnelK3Ez1pNM1Ej08Oj/TndsdOut08rtPnKEgCGueUQWVJUgPXciTVzfNo
mgD3fLGcj8IsV1162yC28OTz7ouuz1TV63AKXCKT9ybAL09Vs948lHZBNg2B
67zpDWh+L1/dMZv30XW0CCdR4I35OiyWWVJ9mUXAr5C/Z+k0C+Zz4D/umPVO
rX5YWx95VhSL/PTgAPDjVvePyHmA3w6k81Q6/7DwO9/dqVarQPGwwGBMXObN
LMqRAy6Re6p8EY6jqwiYVhGOZ0n0cQkfYQuVFiPJFDjzVYGipaK0kAH2mEzU
AsCcJkEsCI7LCNRopZZFBL9hy2IWqvPhm7PdHQK5xrUaEMtKBdMsDGkSMCGY
NhAgAAfah4sZ/J4FcRWkSxGN1d7wcn93ZxBdwUSrT8M4ho7U3uDpvsJpdIeX
1N/7LFioPfhWffZ+v6bg/4OnuzvLHBa0WI5i6AfkmKJVIYgWs5W6nUVxqLiJ
ojcDmElYzWewyAkJPkeeYvualtP4Pb2iFS5iQH8UN7AQgMwYKHYBgmcGq7mN
ihlIquQGlhkhrFCqzUOUZGuzqeHu4G7No8kkDvHbQ4UInqWT5Rib40/vlnEC
sBkBiAvcNhrBUAHMCPY3meZq7zx9s68m4U00hrdmwU2osiDKYU4wZWAnIXzC
fQ5UFsZRMAI4IDBzlAah2Wi1XCByqjkgB2xePofWAW1YEOfAQ5E6qS12BetE
NIuQCmVgYJYp7i0gV2E7jebBFDEOYOfhxe4OMw91G+TYQxingO3qy5fNLOvr
V+i+3IfGJJjh7s5omQAkESoA84DwMxily4KGNtMhMCQKACbTrgBihPCgSOEl
AApodO77NP0KgQt/1zCGtwGfxjMVFQq0ixh2p8YEJ1M0vBFQZ55OwhhWJjzx
61fopgB2n/P2uK8SxGcBDTDCxVzB3IhQ1gCouFUNEEIFk0nE7WGfqBFSpOwF
/h5MkWsXOBXgAGMarKKX4FNkoCagBRRBDDsOXDYoEEcIeeZhngM0iBsijnM3
gAoTgNA61GCmK0EdWEpwBfPFIQBzriLUBiPgJgVwkBznaimP4OgQHtAoUhQC
K8qAEQUZ0kIFIDyOlxNsGxRFML4GBgVMK0vnCtdKv49hq3KCiTe7Ecp8oO6n
3EoVqwWsJY5XiigF6BvmD4RwnaS3cTiZhpr4mUsD5uqeYJfm6TIhHIsymQgQ
whky1U8BsAaATOZzbeVwbbUHMgbYHeDGy1eAF1n4cRlliM966jQuT5iQ0OFQ
8+Aa3gQEnC9hF+cpzGeCbHO8jGGOiKEgEUOYxyJOo6KEn+skROiNVINA0AyD
5epn+JqB7FjgCnLEsE3bDSNOQpodTIqptfQGYFpoLB/edyBcj0vSLLtlzgkU
CygE0wX+w8xWWqubAMAKWERkL3wr/z3iihV8YEmFQNu4xtsUyTVLg/FMZB9I
AuarWn758KmQxhevSOGpqqERV5dWXKkN0opYBrbYKLF4RFf+qHXxo/aeDZ/t
m21Dcg8z4uAwdaTp7eJFhB0uKQakDDMWeF4DMBfdFsLUC5TR2N0E9aRotDQk
+XKZqWkKUu2W2RNMejnmMRJSw3APtvWgUlpWrhlpFo5WyPnGYI7CBqBIzYD/
i6xbwW4XtyEo2YjQ8DL0WMLaIMthxAgpDLeYOBGj+HuzdMDcaYRyeJ6CjhqQ
foPbPcYhCYdd7QiXZfDV7kSlpM/kxNaEUGEeYr6nuChk38m66EuRBkMk/zGw
+zL/s1y6onKk5CBnXNOqGAwyvsaeKvjrJkWMHlC/02Xm/KxxcA7oDviv4jDI
iDOSREJwgbh7itNi/g2bMNdLQmJdkgqRqmkIaoiwSDDTcaHImFIE4+hnmHzO
ggshA3SaL+lHYrwlvv5Q9Y2CxMjwBsaMkjROpyuN6Yg86IPI1YPnby/fPKjw
/9WLl/T59fBPb89fDwf4+fJp9+LCfNBvXD59+fYCnu/uyEfbFKyy58MXA24N
v6rST8+7Pz1gcf/g5as35y9fdC8eoG8GcYU8MowswvxHgrpAx8jSSJPJx4D0
JEZUr//qfyWjfPH7RovFP9pxwObpM9poX7/u7oD6kfCIaRIj5eJX2I0VcirY
MOwIIA9Yu0CpDEIOhslnYLwqpKPaup4f5Dl8AGwO5kBNAdpFd7G4O3SuCkvO
e2g0WkGiV4MM8A2RGlUHfquOCze8DBENFgGmf5hRUyNdWHsl6ZLGcXpL2BoG
iLXEgn+nLqkVWFppbAQzIlSxYiTEXhG1HFEjKF3D5q/1SNt7gMmEYNNu7QQE
lOhbSBGgRhEWkOYeWjp64PG/fJUX4fyB2gM2ax6k2T4JakNTNKCdCCogLJit
9FUbhS/S8plIM3jBESRRwfz2CvWDMCI2Zft1jCXud3fHbsUeygQyrUCcpRk1
AJHEvxvbC/eT9QRFCmzIvHB3Z4YbO0kBjknKayktxVFAQedZAEeIjHkBcqEQ
q9LRt2itoPGSVQLMP82KALWvFIcIGWikx6yDnuy1KyAnUpSIUQcARBgPBMlN
mNG+nkWypT4CshMtCoRroamUM4V7IkQQ1Ep7gE9Fse5BbxMpoP8GCGbPUz66
ZPVS26qj+z7TWoDbFN/rs5xde7dv3kUvC797b51Fkyo3RGbd9Qj5IdI1PXFo
2nA8RiiP9K9cZCeLRItLEkxWpJLajjvCeESapNiUsNeIQxUFHA8MgaxC2MQG
FGOH4LyWWyWJ47PGMIGNJwMOf/YmC4PmywWilNuFg97sCNmGXogVIMRQSqoM
GEtOhlmeztFoBA18NRcjJsyRyPANapOHoMsEBSOIVXdAJcupL+IHUcjCEl4h
4spFQGSkT1TjFD3/zJq+fMFVVUEVgL1BMZFvm7ImvywE8ZXr2Tl+HyaMku2L
YgOIkH05yVUWQL9LgiCDmxRskGMOC8LGwuv3GJT7ZGSQarTOF9Qej7QvPE1c
Npr7mJYjttASnCCag0avI5ZVcYelNsRqSWKrRZqDPpy7fp0yI7TzYRxwXiDk
xV0DZRr3QtSeKPHbPcrVj7V2/USNQzBZyeoWaYheT5KGZ8sMtxNZUkUZblvm
+PMlCGkYgEw1nLR2NgXOrHZ3ULQ4Q+0L+ZEtr6wpD1tqXAB6rcZZRwo0dl3a
PiFMMMSQ+n7GCRGLDtEt4DgkShjEZh/5mmB8lEVgtomQBC0xBy2aqdIMBoi5
0O4OF2fRTCQ6u02XMRLCDajA5K6ivqyj4ibM/CWpPdw+xzABNc4lBlevQQMV
TJnJhMgxBzWd+uq/vBx+EFarDL5XUHcT+cXOCC0TSjZ2bV85SraAkp08SL5x
HIxSZAFWSdtArYyFYO6ukJFOQnSowva5HcgKoPF4maOAGoUgwGhP//73v5uY
z33+HlfN3+Nf1fAXJc54+AgN3X5+1YjQz4D5jfrl241prF+8Wbhft8z0TKsV
j7+n9XPjyCyv8ptt1yH6L27iLEBvwPqaLLhsPAUfDFxk/WXD3lW3/NF0Lpms
1a/bww0TLjfdsIYNENn804aGzqIebxhx/auP0ESAX07VQy2dOWD05IGBqqPK
uWpX7cFXbTU5nCNHVQjYulUttIdFO6xYF7XNyGy0IhEU+lGBPmGP/1mHuevu
U1oFiDLkn6Ku3cWnwIIFXr8IM+yah01C9GgGHHpDLs+OEWGqJILFwFJdDM3E
oFiwNIi0rEGvF7miSYU32iMFV98YBWUv35eBtTuSVgYrCMZoGztLq5WBpAoc
aKvGpEEYJRF6b0oqArqK1NamMpdczF3t68vdpZvIynK+YKGnjCxk3NsTESvq
MZhfgzAOp8ZWUkWQX6NUd5JDODjoDiNu5U3TpOAB7HAcfgJjjDwHsDLHy4d9
Qf8mEIImF7nNyY4lw3ndaM4VumbRGTZZAXqyK4l6yrh/Dj0RSoCOl+PvVh+0
Sg6rzAaVBFUmoASirDbwl800miKFrrcumaSuoIwxOZXy0muMmug4Ac6v3MHI
2LWGvafbGyWeNABPoyLdbsJ7GLruMpVF01mRr+1VmtVUj3FikYHaES3YiRGH
AXnzoxuwaaeka6DFCxYA6kvkWppmQVKUeysTib9sngShdxayvYE+dPYfkr3b
YMXE7REMijgYi0Ho6U6iHRmNUfhKQgqchMPsQ4zjYFqM2H3bNTHUelDBo3Ak
aGWwoeg0U5IloB9l2uIx9g564NNRHM5PZdKajLxxRNdOwltkQNg/uePQ7mRg
TnG6JVUaN46RvqId3vxdD2F0VgQgLAC9XExP7HRzIaotAAq/oqGK2jRz1VtH
0z0Xn3bEoEd7yME4p8PdHYoHMiKKyx3nS0Hd5biwKrvhshp2ATpF8jUssihN
WRh6jhwbDIGpjDFNJF5p2GsouH0QnK+WCNwU/Wmx1eYtp0Wca4pZHmMknPJP
aMkp+VMCjPIYH6Zj61KUtzSkWTEG8z1oMmfDCWQmPOZhBUegmBkvUKYm45Vl
9trngwb5HXk0HNZmA2KZAeMNjGeRxp6FweSUxJ7zwGDO7o5nzLEP2XvVhrFA
dN2GAFoRYd47FB3IVmsWLKcOSCzQWSUQDXJgWL/26CIpGL5AQV+90Y5Po5ih
dMXW6HfLjb3o8bZzcUO6u0TcC9WeNc4k6I2uIwkCw0aDlQ8DUYRvbb/hTewN
2AzFbUHP4LQ0aX/KjpWx9fyigUtBc7SnKA5bUaM1JUkRT+CwztWKCZh7JG99
SuE67lsrJ9wBhZEmEh8VTgIzx3bEjGGDgfKxH3QPA75mMGihLetoPscMoQII
i3bC8Mroam3pM73zmkoNI0FGmUzj0MEWYiP+fpEDFY12dLlGFAtCKzQA/DjF
LpYUsgbyFehrhujOgSSQTEPvl8ODiG+Y98EeBhLE9RAbYejF0XUoqoZoBzb7
xHMi0Ya4TgIvnYGnRt0SnJfknEAGhAqw3kdN4DxXkLshc31nSU72AOAUsmln
f6OsrEVQ2iq58bIJu/zRS475OKDwZlM3lKo1LJJkRcQ6/VWQzyhSGJELHJ0x
6MuKRC4EUVadBosy3B/ltNG4HAqycrCUGY/sYc44C/CjVNuJ+Lq105qjPBVM
IKWFtGqHtcYRq0E0ExgrBRxaufE0ZqEesNiJL0FbJ4y/gWUbKJWxwo+S52bX
mJiwP4yq6/X6Uhnd8fkiEreRjj9jJFpRJhdovQUnWkzJ5MicDdnsQst11EEi
EjkH59eF1kPXwht+KsIkp+ZfHlpX4lfjsZZcPeHsJryUix4S6vZaP0SH04dX
1idZ8spql5QbGAK7T5mh1R7iMOwIySjzs5thjg32K+gWRjemfYVczRWtZeXr
sX/HwtSxm3EAYhV1NcfLRiNPooxVhaoWvVXH0yoCo/RmHjozRiZl1q5c15+g
AkHKbsWHc4SDp0pixkzgyG92QOuYjU7hQCT58oUctvoRx8rAKklKmQlqDB1y
miaG6REa6AYVf9/adhMfMT2YsATLS0zX0outYa6M8cuvnCCJbkOik8xmsVZu
gigmNXJtm2xSqHUZltHq4OCJ2rsbRdij8uQ/Feahqtp4BLPeBPN9OlJwZ1fY
j/rLm96gcYqJtEhcE9U4+ZvjTvHQUPtU+oPBhbfdzgoM5Ylj5SH/glrOQGNU
voUMieomEsRRBgFzSQ4y7dV7yrzaK+Ep5WPtu3lShYOeOjsXk/DWAKNfIoy5
G2g1fyr9dLFam8kYftw6ESMcgZslpAW6UyuPnqfLbIw9ytv3nOLuzpDz40xA
G/VHC1K2nynLwXqxv3wpdVRlZ0k4qeKoDGAgRhD9S8xOLUQDLG2MRe8DdTe/
OVDNekV9QZQ+UOu7caAax6dq9mjYbfSHg0eV8ntldIb3T/D9wXGnPmx0G2f1
R7s7mGThzoOz9rDrimq08dmLl2+Gp2arzHAiPL3u1IFtYFOVnZSeHMQw5zim
dofVwzo2NER1DyhrUpNdpK3S6pIhqE34L2T3ra1EDL1zJxGvN28kigOztCqe
PPqE4GwCOCvfveXLLMJHwIgeYI4+pujzyvHMxoFxeNXARMC8o/KmXoUFaMTY
AW5qxW7Smqvsjk1q8O7eZ6X171/pGkHDe81Tgt0/AbtxX6nHzcjtrfZfhN80
xe9Ab2zneOsdZ+vIdYlKtBgzGMaYyaqj16RGssvGKvdj3Lhv5WU/7/bXArlq
7w2NS67yBWqi4gviWfsp3ECZmGuWgYaxTFjrKSgnirPyrWoXbHN2uWHPAb/S
11632j6pYTEasRiwLKWPc15DAWaInw1Zcrkq1nsKTG8OsnhFxjAoUVnCHmT4
Gi0o78hYcZs6laxGOqvgTCT0h0qs2TdzSJMSDAJJCC0v043eujCyOw8rPYAN
W8dbym6kDAKOIpM94m0nJZ05Tg5S9jDRSyeZ57fBIrdI5SbaGPcj6I8SexeV
sUi1KwdXdYsWnI3CkP6DjpA4FCymTOIVjDkDK5j3jhPexbmGXpgJ4Cu65inl
FXUlTB2dSs7EVQzmqxqvxo7Y56mwJWky+u+Cogaa64g0ywEAYOYpAJIdJTYR
BaE64iw4x+NdpOm1Im81putsH34jrwGz+eOS4vaARtD7dvhQ1CItLM7SeiUd
llQJzN7yAqnPQ8DiSa65Sb4cAbsfs8VJGpFJvCLNaWvitc2KB07MocEtOemI
Kmu5YuU0MTFxdndeIlY5vbPCxlYHMyz0llKnJi1YP7yJAp2JNecQI1mxZX1b
0rnZv2cRYP1QAfkZ8SzGMi4oHuLmGBL208FnxxW5HjcljiCWnyj4Omf9lvL9
2IdkkwJhP/msJyv/z4bP9l43Kpf7nM2Zs78OE5YkwV+ntFsX1euGya2SPKXL
Gu82NCOPreDLoqiYdOyRv32k7fc3jt1fH1tGvDStfoeNgCc9059NcqMwVfEM
Yl8ka+Q7rgsBL2fnOEKC3uVNB0ZYek1BRiZmoezWwnSlgHwvRFw0reGL/p4h
t4q6dhflcAKREJYwJUqDBHBdkx35EOGs+/TB7yWqwtt4JIoMcaHyZ7zKPkIf
M1J10IL9N3cQq87htFT15aF4Dbjpw7WzfbjNW+gwnqJ/djanZB43n/z1WV9h
DqibDSpJ/nJERmfsW+d1Bo/TOUb/kBNToqHwirXjJpg8qvfyXkdTSK4TmY+d
rH5ObCVnh6TuEWswNiRWOhBpfFxr15oIfSfzVCc66nc6tWatQYqDfulQHwa0
PKHP+ChuJS3AcWp//WAJznh5gB3EIOyM68nNgXBCHjx9u8yNfblpYAFltRlf
kqAVN13PH7N6Fb01fGbiv/bIH8C5pjS+bOmIob/yUzlK53od9cZOmNUNvx07
2Cm6ptFQM6nzdxWFZ/EU6lfTGTNERx6ihHPS59ZCZjXW0Pj0bJGH8ZWkA0YF
+cVgDfoQhagxgqk1TUQDy7ZfMnMW0HBwmiIW4QbmrsrJ1pbs8ImswQ2/C1c/
v7qDrdFRBf+kHjNu4ZK7O1uRxt96D48Z3YRPhp/C8bLQ3nkrfCiB5rSU2XdG
RqZm5frXH4TuGcH4N+SxyOWeEcXb3zSGMCegrgUK5WVbUYr5GhKGM/J367pz
FsQmXRIjaeSi9CSNUdKHGEe6g4rLBORA0mjjlE9Ch/4WGYbK5CQ0iyPXRY9g
HwGwrqLCnA7ThwU5pB54iUr+cUZxtIpXF6PJOB9zDo89y0lKItMJTKDICcZZ
mnt5STpf1OKdcy4DjVwMbolOEuEJoUl0E02WQUz9lfx6OA8i4dTJucVgEmeA
+fqtYB/nZwXXACJhRPqwThaW0W4TgiGMoycNOpnBLgZVwtEP0d7rqKIsnjpo
yc/Nk6/3QFGcNR8QThfa0JOEAIuqfUSFEopwutGVLgJTonHMMELXgGwh6fF+
2JexDDZhSb5z7q+6u4NLaKBWBkus1Go1XlSy9zrBXzwiN3lKeKJX3YPQvw+6
7j59iNbB/iEqA34d5P6uCPTflCnFpTbSI5NUU1auD/NOOcJCqYRuphphKigt
+Twq/DMjhsKMOEA/v5GN6PPXGQWu1PnwJphO0VvjhnjYs0zRzfFkEmP5k+tb
OaBGq9rUwxP1sFM76ey5z/bpDOXGmNKTTdPAAbw0kifqLwhRcVHAKEqduqGT
FNh/9gHzQOB/82DxwbxJDrllYluerr/sPKbXHQmshzlQSRRXOOPN4DU8/It6
zAuwnPdvuzt/wwVsn5N6AmoaY0gDY0DAVCoGl37vqrYcYo84ofB3Kg7AqMUW
N0GMZUnwbRvkXKQRxiG+bhzcBcETZcZv6xhUxY5//u7XjlaCwB27lQPrIL9r
eVNMa2fS2zbDzHSDMHuG7JXgv6lHd+m/BvRKtTYACnX8790i42a1lOUF5qxm
XR0FaK9sM6vYl/rCO9mnLQq9mgrri+aInbYammA1HJLd4BlLeIRXDiSSGiOp
pY5XnEbCYxZ0xB6zOapRcpOKsxImHBnxzEqZ3WreDE/z3aT6kZ0wWhUhVTlD
ngeT/BxmqYrDZFrMaq66X4pA2gIRlLoGwMK+dWdhMDcs0HVuAtehyg52DuyU
5rRq7eu7k0HCgteZpJYRyfiDbSwkIn9i2QN+PxCO96DiPHbpJJwvitWHNPuQ
hxmejQdJbEhF/hDdsiSIPwTBREjGPP1bGfPMlNewz5/wAEFzqb8+sDkY/mvu
ubNFuljGgRz5ZmHNQvqNhxBAO7GxhPzeSO6tw1a8FOIQW4vJlrs2ifib82Jr
Ojtn+1FZbTjdpuXOBQfIF+1LSbGN0iTcZOW5Bq7UHwiw1FAq2YnfIA+D/cRl
jPvX3XjtLs/Dgj1dyZJzveD9vXnwM1LAahGqI0Ad/rXZ3DdKg4R0zC6LC50r
ZPjKl2ULsuSuYaKO2eh4pE6JP/3Qf15tNI/9BhG7FKi2Adid8Ca88uw9mVfv
TlX9U7NTgX87x/hv8xD/rdMvkxb+ezWi3+npOKCnDfx3RE8P6elxXdxeQGxB
6e8BPTofwKPraFJt0PdXxnlmfKp7xadiH156I3nEWDIKzIrSCewHSHV7EVYg
+ARvt1ud487J0WGzLv82mvWjZqfdaXT68K0DvzY7g6OjTgN/xbc6A3h2BJ+H
LrPbhEI8iBQ7IjfonnioKJUOcw2v0ZGHgnSybzVlDBoet1qH3UYd/oN/261+
s9M5bh7WO4PWWa953O/WG73WYe+4ftY5PmzVu816o9mst1rtTg9m2GoOdncO
G+3jxnH3rH7SaTZ7rbNW/axxdHIIL54MGseDen/YbXXOGu2TfutkeAT99Dqt
1sDRjNEXnaNZDOi0LXk9obhaME3SHF3uUhfLYcJ0qhdpryrIig4ws1LQSP8i
sVlNwafw5T/+Q5sGByguMTx7CprBgYuiGBUFTV79539KdNfRXLAP08H5O/in
jdHdxiRsderh8ag96hxPjprN5rg+6VwB3I5bk+Ng9Ih6NMFiohDsimj0wHHt
WOXnQN62+ic2EClihMnW5TkL4Pc2L6IEieohgoJoUCagXwH6gH9bp+oRUcoj
M4ozhFnYZj2N4Yp/s0fBcadZr4eto3br6PAwbI3r9atx/XjcCY6a43Hj5KQT
AjadNJthMGrXW1cy3t/wf6hw77uHx1wkMGLNRSsdsBYly/i5bFyaDOwSVWHt
mwet/nG9Dbh8fDToNFvDQXtYH/R6R92js6Oz7tGw90B8JBsiMR5JXuFpoACd
gPvYsSZJQNgukMew0xgCDZ31uoPGWaN3dtg8bPcO+51Wv96pnxwPu20gwuZh
swPM7Oyk1WwD5Z51js7qZ71OH6DUOu4Om8cn3Xqz3Wwfn9WBw3QHR/UWZhMI
1X3TU/+tKNeXh5zWt813f88omXiEx/gyC1xTbMs9t+241tkpFXhnyO2rzjEc
62rDAliBrcqFXIMGLNXAwpxYI+GkzXaffJt6c5zyThUqLRxRZYiDFSi8nuKI
jjuRlhf0tI6lckVhLZzT3q6Pzrg99TulJIma7Q5I961eh+fItQbON+IfYNSh
Z87xD8I4GUBeJsRn8G8laF54LNxU0KJ6kbjeK51tgi8+fTY4E6OGArHYrbjj
l8nYxDS7LFex04rJfSNY4jmm+QipSGYh/mqyeUCBwgEov1TzAEzKZ6whNS3M
JzNHSNzbb465d+tec5ufqr07NfU+lPpCStfKMedEsacgvg1WuSlGZSsVcIy+
Kl4yQeoDOrBGtfbwZEQQcRkW0Ju0b+yWDwykxieENpnNrNkQ8QXwxLE3r3wW
8C90OJGcmaDWracUAFushTX7guuK3t15mdzh10Y70Yns6mAthbIKz9nP2LfZ
T00xaI2nBjnD+zrBg5JS/SFKEo88MScqyDLXofsIKx5odsb8iI7KJo75b2xK
x0HkcCWTovCbOY3Ny65nU9LDpPSrefcf9CGvnymzrETjncZo16/M8TbYKcc7
s8F5fLdXmH0SI4zUO9zKHpPS4zn74ABBSi76rmPPbJ0HE8AXb2/u7Vr+NXvw
23qamXHS2ZSkak+BqzU3NJAgHkciD7Q9iMzU4pddFa5ExqQkJLkBZso10Adn
vNOMIzwvg1EtZ/awOp7/b+CnRv7+bzf1v93U3++mpt1acyAvrFf6G85rfPwb
eLAX3+3E9twqvxZuW5fnzKRKMyEIg7JZ4ZmYuuVuYShN1sxat3vXncmXi015
lsH3e92RT6y7PZFN38vn/lCbULCx5w6fvLRaB3Mz7d51memaOcBSNF9mboU+
0bhhnVTiEc/aRZjbDG0ejDAN+YFyfaCfjA+UFMFgrKuzrR3ScQ0dR0vaECOQ
3CPMqsKsIg6SB1GMBxVR0RyP0wzzQePVBvPHXXHIB7U4B5ImX5q7VAbULtx0
nMaodoG+rXNzMMfKMRfmlP1ZwUab67Nw3f1wssUGquicHURLE1awM/ACFuTu
1ef7vZQKN6vUkYVmGKv7bSrlyWjOxeuwOl54VbCTn1xaZYCK09nKOoEdpejb
2tiUC4ppmomXfmlciGAgfRDUrRnv6/lAHObe6rZxEzDQ2C+0x97jamu/orqN
k2bpJ3SxNNsd59f2fu2O6VwuF4tXyxESVA0ginGHC9qaTZOzG2fqbTvzdXzo
dy8YQAX6Us6RCmyjq7hAnyOsCk61ymW9hXG7A1U10NlMbiReuf/wpMk1a68M
EDgaJv72due+gODCyQKAYEFJQj6hILIwblIYhezirenOXvKkscH8iAHPlEo/
BGxKIf49oKx+uY/JOav74L4rKQdnTBjLoyWzm9tEoEeNe8Eck/IdIOX7JXPy
PqAw6G01x1dBVqxw3lxPF+TdHgssodrVpsC2UgmlOJ0aZUzJ3PyXd3fodKcZ
47Wjmfzzhynvig1BuvRwSsoE/04Te0vqL2qQZVj8zX3t3fprdjn6TQcP8FVr
1vh0fqqWdhL456pa99TP+I/AIW22Yq54kt05goSRSfqAXIueutx3TZNYg3gp
fPpKl/gwPklPRD/v/iS/rJidy4EqPDtiT/4Iam/VLmAe2JFIQs8g39DQPRZO
xtB/eyzwnmE+vcf3i/b5s9jGC06FbT52oo5bg4H3if5VbTXAPYoB4qz/Xw8D
tuHXs2aj228fHzf6g85Zv9U+areAwXTaRyf1s+N6p3/c6LaPeseDk06/cXIM
DQ57GBTsHNVhUa16u9c+a9SPzgYwZgvHPISe8NPuDn/uNpv1bgvmAv+vN5oN
GBNjF93j4aB5VO+3eg1o36t3m4NWEyY3HHbqMMVhsz04arV3d9rNfq/VPGlA
F52TbnN4cnzSg9GbTeyn3++fdLtnnXq70eqdtOAHmHHjpNs6O6t3jnv9BsK+
CZ30usf9kzpMABZwdjRo944OO+2T4VHHDX5y6LN3eNTvD6B3+HHYHnaaw/bg
5LALnbTbwxPcXgwXNY7qvQZGbZrD4W8R/Cy5tZWfE7Sla6pCpN1fuzuW1dJx
FGp0GU2ThlOGHPOCyofOdYwVMZwZuxOJhM+zRwHh1iMv1PhXijT+VTVOG/Cv
G3L9q7zzFd6vSH+uzW17OVDRDYVdZ4+2oawOTn7VPW0IzkkscvZoA26XMVvP
/x4Y/qhSCtCuwUXjvw8ZHzrV5gn83+dOBkQ+mPjP6bbijLwZgso8t/b6ARj0
p2tv6PeuixXFh5uVLS+MsxvuorHtDTyDXW3Cpn2Lrje2d/4M3W+h+kfbZoBL
qB7CDL7FEb41A+YY2/nFow0dfN00KxtVLwXV/fcPXI9S9ZvBdcSGLQxqK3sq
hdfd6LrLZb4ZXCeU1SVEjDB8K3UsU75ibCA1nGjqZ3T69Xk4TzOqzsrf5/Qd
G8yjcZZK5bsYQ4EkgCmTCRQi0IirN2kMugwW6uJGxAEBqXP0QFOGX0S+bMqy
pmo+ozgdX+cVUE+w+CZMG8+QUiEmLvVIJRlyvvcpkERCuhoVy4lfgS6hWlX8
Madi7O6EMfRpq5dDv1Mp6UTBUKuKyetZOOXqtMxr6Zg+22GjNC1QdcKqNbaZ
qIKkQZYv1MHEozyt6oJFcVrkWJcIl7R+CU5NfflC7apxsEqXhamKH9ggKj/B
oYLdndI2KD60jPfmSiH4DLqDFeG4vsm+fh/WCEt68hEec6LLXa9zcAzrbuGU
nShs4ldZnaR4M2jBJVq1SYmHQ+kcZJpHUmxJF+orqL6ZPUTrnzQqTRarw1Hg
idxrMEAW2jqxclFexFXVYNvMhWloU+uKC5jrUARU3xKhVdFeCs79MyDDsl5L
cz0ax8NZjidI9QieSglQXMwNa5NNE1b1sQZW+RxwwkZDaTjECmoOc8sKc/Zb
n/IGWU9j6BJ8TB+A81X+xGjFHdwGC10ljk8NUgtdM0GcFhY5rHMMG7qFWDFG
yqfOVXBVyGY6RR1KZ3IQQbjkGAWifeVnsZ7DZ85F22JPG6Yn565wfCZEmqbB
Ay6HhgEZ4CgxHnF7MFnO5ysNwQeudxdfXkrIGnpAl5Wu3OmcnM8ivtuDKcJW
z2TmagNsk2XGVeFwRrDggTsuvkDhVP88r/N08+10fmmLEpKUd10xL8FF8UyQ
F1AxEuQFTlVS0W5Bu9y2DXukhpYH2DdV6/zCw7wJBhQ15zoziSDL+3xsGRY8
l4vAclMI0FwjJudC9by54iYwJAyPyjrLBXlhWHOPWSCrtRckZWsXY2KhKiz1
6E1EVzvwzi5vOd7vB22xyt4t39YtHOEWy0yWidRQIN4NGeHd1Ssu9WjqYqLc
KOh8n7AygEb3oOfkseA3H4UwCYaECd4ukcY3RGxvzI/mZDxGidErwH54vjOV
4+tUrlNuBqJaIXYNfNaOwvklvOSLQFNid+UgdjAB4yVLR8u8SJxTpvaCDRme
qnhMdPb0pbljw3BGj/DLnGGM98LJqVzKvJJ63hgeq1qJEWEJYiqggZVuKAZS
6Bn59KQrGnMSl1P53dQSL9Efch0r++VI7QJvhstFC8hsHXIRMnyXPS5Grr8h
EYTkf1Udz6KFCG7RP0wdFFoAqSw3crsulc4ECtY37phbPF1Ga47iSwRErliz
bJjrqGCd3BS1MToLzZLfrf3Dk9mjPCPOnQC1DtpXr2KPw6G7I8gmuMn71grd
epPC9r/Huzu/qJ6VpPf7++X7x3olmHaJ+3rPsb51lYX52xO21djHVrVf/fdr
xvrHZtj8Hz/Dw//xM2zt/wN4eGk4zD0x8d94+K+Z4f/veIgKXRcl1W8wQ6/V
986w79nMdBruNxrLeFpcg7xcao+9DASxC3rBuQDHXlWQhWzPBQnfwJotfatW
FCOjCAY6f4AvhEYPDqhwoN1MnLvguQjU1TK+Qnuv4GRD00qX5dPqDN/wsEyu
sdjDmjFapJ6vxUkk9fVvXbkBCzLoatjsBNNWv5xXNZcls7H4ObS5Q9rHbp1n
uzukY1TQ6UCFxyZ8U3pSvrwddCmxQWlaTv0Z9BzteyW4BKbTELXhEZfyshdN
O+Y6KUuenV1Wgp2L4Vx9XyC2Zv9jzQC941xrDvaC8klA22NtE+w6Xb9YX2Lj
KM440iikm7AdA4rv/DRVlZcZVhgWKNq64hvrCLrWgHOJ0Ya7Sje1Lt+UJ1iD
dZ+dGs7oPZITIxNbKcyvrMuUxMXqKpsOQh/XWrXjWkcKKG296NekSEi2u/fy
GMCChz+r4yKrwkSq49GYMnKmeAAZQIVJSH28UAFLwmFRfSpm1X/zep+PgNJz
Ruoe4pXqzwARcNf5xV5/34BdsF5ZV9emDajpayd0M9kQTPjV0NV3fef6qAIn
EG245Fv8tZglJnwAsQLAs5K8A9sVo9/63dwl16MXeU6zjdd2e7nZhvIqZu5A
3133FLcT2pcyXfYeYubbAM3uwIISkVpbwBtS2LyagoJo2qm7Je1Mbr7Sq7gR
H9ne+bt9IN7YQW+32hJuMCGwYIV2O2zaCV0KTnVhkefvlL75e8gGdtUWpzPn
NOQkDpcMMuSM15AKl2OQnr/L+QYjxCw+FkT1h8TnwXmR+rpS0BkPxGnDJ3L0
tnpmJXmEkfOg45KKMq4ZhsRHq5pfIyFg7Hq+HM8AYvOAXMzkbhGJgG/qbtnN
qp1Huo+rkhtegMk3SsDzZ1HPFBAy52NwYA4G8KUugnXCpuE7EG8U6wuos9AI
qNx6AnUZPNlRLtlp91dXcIJN065BtwgZe+bMliO45DKk1LbVTlepC2brGtn5
E6WPZ1w+pkinsxC3z7kVnTIIiVuNxnw5gcCTU99wSHI0iXRmxzXaCIRqImQQ
c6kmw15936aQGRk84qL6XOoJufVKA6xg1QFxeqIltPa68K00E44jAJikcgDj
q5mdkUqmuCtAH+Bpz11JjxohAuNXE9xwohdUYNdRcSjBttNCJKk4Ipf7atVP
OhQDAgylV/YN1Taax7TLlBkT8K7TfuhZ7O5gcHsEcnmvIZ3sGzSUQerC8XCc
g0bnSbPd8Tq3l5OIcwRgVK+Zm9bKnjOAtK6fxiiLQCmYNeBF8F6ABiZltAty
vwA72N3J5EIuKqRQR1RstNfqW7xq+PrvKydyW1LV+T7J83fV6t7jffxBK8rw
tdzoF7/RHU90J4/5yWOrUbtv/8KffvHb3vH0mq7gHOqn7tf79Hz3rO5e52Np
uQ0C6lc96fsb1G/iDl6EUyDBU4WvvYrUE6fagWaE8Co+6NuYs30yhAfOhS36
/CY+uoZHl/ogqM7Ux/1+on58+dpisX9wW7Mjbe9ovvlSv65T77WUxG9vE6rH
KO9WjADVZAgEgicPkTuaYTeywkLuaQHkFpq8Fa3eeMyt7s/EJ2NR0oqU7MGv
QLRanhJTxMS6O1jmSK7ZkeiwME59Wg7IkuLLTpiItsBc4lcib6LNt+bmNe3/
N5FcyQnz2OM9uB0pqYWcKC5NxfQjbM3W4EGFwjKOZrvt6DV5YWQZggLa/g6z
ormNOU45Fy3YkUWau2+4tvn8nYfn5++8DJLt5PF9zyx5+1/181/89r+U29/5
3GM9agPr+Xb/35rfHWt71TD8mb42S/z5+4H5TU50GTpYi3lvYMjVyoyiyNYY
BdB8mVGAxcWKmTJXqazr+OZ8pJAIptzOMHaFB77jCCOZG3IC+Nxy7tUm4ETg
1LhK9FihHpyq/PKNm/ZuRDuTYX9wice6xwugg6yBfNOmadLW9YY/nL9Qr16f
v+uCuv9s+BP9urvz/PyHp93psPu89/yH3urjD5fPWyfw/Yd+Xz7fDp/2fqjf
Brfnve6f/jTtLv78089/7r/94eJ5u/4OFdX+zz9dFj8+rp/8/MM8Wf3xVbYY
XLz5fDCLfnw5e9190e92L4dxOgyy6fLjx5M/zt59isKjF+n85uPHi+PXxc3u
zqvHoNq8fz+eTW662Zv86tl1kfd/Gn66ffaiyF48/TE6edk7fPH4Num+LfLP
89fNw+et4ln0XpY2fDHYsDAnUZLq1eeLNCE/jXOmrFTYmfIAKJEkt6DfDMe3
vYvzvgvGs+vb4e1PT5+lfz7//HO93/3TT+fyedD903gAgBvO/hj0fvjYuvj4
8ebyp3fjn5Ll5+CPWedjdDAc7e6MPh/MW9m7ODn/cXT7rH70dLW4GHXnvefj
/s+j4PPrRuvmzXTy+Sr/4+3Zxeh5+3pSfH55cZnG0ydPXECUZyZwoGqvXgr2
5dMuyht9dkVq8nu1FFhe2iNQQ1cS8D1M9tKYLw+l+6oUoOMbg9bJhjLqbVQc
a6bmfF9skOV8cR9fgyO+PafeqlvE2V4oIbc3epckGXdO6YocvPxSfvBvb3Ov
23ByZnUlekmJtgnROZdhYXcn/DARB+q+za9Fb4ZFny+np1Ka1+DWgecpIi/Q
9a2+AamGs6gx0dtT2ud+rnaxPn02ef6BcaH/tWHvxASujPqYr8OyF32tYwRd
PPRdCMF3/HhZVrY8ti7Ai8lSeLpQX5NOWoytJ6zxiDyj9iobVCLYEfVtFKLr
aywC+RkFoFel2bVcBcveFrxeiWzpiZusKLHrapRUOVHJc3v8M7CSk1H+mVj5
342Nm7EQPa9L8lb2U7rcUJu0Xx6C8KO7hmxAQ5/eyDcky5jSPW69FcaXrFi5
iUPrh0/4iArV78/5UoSNFfwtEtlTm3ue904rxYaquLoQnX7EIdj/hKlHYe6c
3XEl2NoRZ38Ec6PI7k4PcFzcrNpZm6dzDOaAmk35jPP5MnEuxQTYjuUeF/eG
UJaOdDmovu5BMnrwTJHbB90oFOriEW6Pkrxi/O8jOqpk7lpMwGjiyxnTmI7Y
YAJqaRelflLjBP3r5E+mLk1CaBhkcWQLhoJuFtLdOP7VOHwIM9QnlSQ5Dmaw
vArwoAMlkWQ6aQ6Xx0kz6ElS54m56VmDonTiulTqNZf6L85RU/9qBFMCEwGD
49j6od4ZL7kCPkndEBpWqdJJPKVLEvxpMIdJjVd6Fk0pZsaEVS5uJpE5p8ql
JhW5pwTGoB5C9IstVpIsTG/5F3XmOsRgWpOBB7g1jtOcrhRFrRt+i3Lv2hDc
Ww7EmcubbCNy0sUManL827MKQmQB1dEvZW9J/aH1ClaUiqvvhOeT9RO75uky
QtU+kRu2xdOtz/1KJ+LMJhQ9Pjk8wns3Mi3wxNV7njD56RgKVldn3oNSCHgh
Wc5BvEKHKF6NHcmQ1wkycbNdOtEKuTwR23t2m5bVJHGE6ox37jrSYYwbciDU
iKvqGvYVIXVnbkThMrkwIpnp+LulwJp3Z4Nj79P93jrLzXVck8HOiXFUm5Xr
vmy5F2LblVU50aNMyrvpzQkpY8I4Bi4ivLtqLBIE+ku9ZUahdRboUBTer4Rt
0DXO3h3OA9XL0vAkFzAwqkhHhR4qdd590S3JK8IA/BnVh/xaEh8nE8qTlGIU
Wy4f5sAgXoWVFwHIgXzGDPSuCKT1d1xQxQv6e4HhnfLf65DyBNGXfe/kA2Am
vYG2zR233jnfMquUvdnaSPK/DIFx0uXZmAhI5ntVrV1GKwVNYAy6pp3h2R0j
CcThZKrZ3u7Oe5B3lAKurzDHqM81esivVS/Krmdp/JmoZ0ZV5cIJ3fou7JJO
3roJiGUlAW8CNsFAJIzbzcM9jwA/ALyv8f/ZJEd34X/979VNBPzw9X/9nwTF
BmwasJgB1qJ6MwtiDK5cBEsB+cUymYziYMLVfVUf1F/Mr+hRSN1Etunm85sI
s/RlJTV1Fm2ZGrrecG6DCBbcy9L0mtnIPLhGSYWRD0JwfTEtlnMLEzwJsimA
6FzCXUJ8gNH/Ba/3mv+zqQAA

-->

</rfc>
