<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.1 (Ruby 3.0.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-firmware-encryption-19" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="Encrypted Payloads in SUIT Manifests">Encrypted Payloads in SUIT Manifests</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security">Vigil Security, LLC</organization>
      <address>
        <email>housley@vigilsec.com</email>
      </address>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="D." surname="Brown" fullname="David Brown">
      <organization>Linaro</organization>
      <address>
        <email>david.brown@linaro.org</email>
      </address>
    </author>
    <author initials="K." surname="Takayama" fullname="Ken Takayama">
      <organization>SECOM CO., LTD.</organization>
      <address>
        <email>ken.takayama.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2023" month="December" day="03"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 93?>

<t>This document specifies techniques for encrypting software, firmware,
machine learning models, and personalization data by utilizing the IETF
SUIT manifest. Key agreement is provided by ephemeral-static (ES)
Diffie-Hellman (DH) and AES Key Wrap (AES-KW). ES-DH uses public key
cryptography while AES-KW uses a pre-shared key. Encryption of the
plaintext is accomplished with conventional symmetric key cryptography.</t>



    </abstract>



  </front>

  <middle>


<?line 102?>

<section anchor="introduction"><name>Introduction</name>

<t>Vulnerabilities with Internet of Things (IoT) devices have raised the
need for a reliable and secure firmware update mechanism that is also
suitable for constrained devices. To protect firmware images, the SUIT manifest
format was developed <xref target="I-D.ietf-suit-manifest"/>. It provides a bundle of
metadata, including where to find the payload, the devices to which it
applies and a security wrapper.</t>

<t><xref target="RFC9124"/> details the information that has to be provided by the SUIT
manifest format. In addition to offering protection against modification,
via a digital signature or a message authentication code,
confidentiality may also be afforded.</t>

<t>Encryption prevents third parties, including attackers, from gaining
access to the payload. Attackers typically need intimate knowledge
of a binary, such as a firmware image, to mount their attacks.
For example, return-oriented programming (ROP) <xref target="ROP"/> requires access
to the binary and encryption makes it much more difficult to write exploits.
Beside confidentiality of the binary, confidentiality of the sources
(e.g. in case of open source software) may be required as well to prevent
reverse engineering and/or reproduction of the binary firmware.</t>

<t>While the original motivating use case of this document was firmware
encryption, the use of SUIT manifests has been extended to other use cases
requiring integrity and confidentiality protection, such as:</t>

<t><list style="symbols">
  <t>software packages,</t>
  <t>personalization data,</t>
  <t>configuration data, and</t>
  <t>machine learning models.</t>
</list></t>

<t>Hence, we use the term payload to generically refer to all those objects.</t>

<t>The payload is encrypted using a symmetric content encryption
key, which can be established using a variety of mechanisms; this
document defines two content key distribution methods for use with
the IETF SUIT manifest, namely:</t>

<t><list style="symbols">
  <t>Ephemeral-Static (ES) Diffie-Hellman (DH), and</t>
  <t>AES Key Wrap (AES-KW).</t>
</list></t>

<t>The former method relies on asymmetric key cryptography while the
latter uses symmetric key cryptography.</t>

<t>Our design aims to reduce the number of content key distribution methods
for use with payload encryption and thereby increase interoperability
between different SUIT manifest parser implementations.</t>

<t>The goal of this specification is to protect payloads during transportation
end-to-end, and at rest when stored inside a device. Since many of the
devices today do not offer hardware-based, on-the-fly decryption of
code stored in flash memory, it may be necessary to decrypt and store
firmware images in on-chip flash before code can be executed. Since
devices with hardware-based, on-the-fly decryption become more common,
the goal of accomplishing confidentiality at rest may be better accomplished.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This document assumes familiarity with the IETF SUIT manifest <xref target="I-D.ietf-suit-manifest"/>,
the SUIT information model <xref target="RFC9124"/>, and the SUIT architecture <xref target="RFC9019"/>.</t>

<t>The following abbreviations are used in this document:</t>

<t><list style="symbols">
  <t>Key Wrap (KW), defined in <xref target="RFC3394"/> (for use with AES)</t>
  <t>Key-Encryption Key (KEK) <xref target="RFC3394"/></t>
  <t>Content-Encryption Key (CEK) <xref target="RFC5652"/></t>
  <t>Ephemeral-Static (ES) Diffie-Hellman (DH) <xref target="RFC9052"/></t>
</list></t>

<t>The terms sender and recipient have the following meaning:</t>

<t><list style="symbols">
  <t>Sender: Entity that sends an encrypted payload.</t>
  <t>Recipient: Entity that receives an encrypted payload.</t>
</list></t>

<t>Additionally, we introduce the term "distribution system" (or distributor)
to refer to an entity that knows the recipients of payloads. It is important
to note that the distribution system is far more than a file server. For
use of encryption, the distribution system either knows the public key
of the recipient (for ES-DH), or the KEK (for AES-KW).</t>

<t>The author, which is responsible for creating the payload, does not
know the recipients.</t>

<t>The author and the distribution system are logical roles. In some
deployments these roles are separated in different physical entities
and in others they are co-located.</t>

</section>
<section anchor="arch"><name>Architecture</name>

<t><xref target="RFC9019"/> describes the architecture for distributing payloads and
manifests from an author to devices. It does, however, not detail the
use of payload encryption. This document enhances the architecture to
support encryption.</t>

<t><xref target="arch-fig"/> shows the distribution system, which represents a file
server and the device management infrastructure.</t>

<t>The sender (author) needs to know the recipient (device) to use encryption.
For AES-KW, the KEK needs to be known and, in case of ES-DH, the sender needs
to be in possession of the public key of the recipient. The public key and
parameters may be in the recipient's X.509 certificate <xref target="RFC5280"/>. For
authentication of the sender and for integrity protection the recipients
must be provisioned with a trust anchor when a manifest is protected using
a digital signature. When a MAC is used to protect the manifest then a
symmetric key must be shared by the recipient and the sender.</t>

<t>With encryption, the author cannot just create a manifest for the payload
and sign it, since the subsequent encryption step by the distribution
system would invalidate the signature over the manifest. (The content key
distribution information is embedded inside the COSE_Encrypt structure,
which is included in the SUIT manifest.) Hence, the author has to
collaborate with the distribution system. The varying degree of
collaboration is discussed below.</t>

<figure title="Architecture for the distribution of Encrypted Payloads." anchor="arch-fig"><artset><artwork  type="svg"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="384" width="472" viewBox="0 0 472 384" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 8,160 L 8,224" fill="none" stroke="black"/>
<path d="M 8,288 L 8,352" fill="none" stroke="black"/>
<path d="M 96,32 L 96,96" fill="none" stroke="black"/>
<path d="M 96,160 L 96,224" fill="none" stroke="black"/>
<path d="M 96,288 L 96,352" fill="none" stroke="black"/>
<path d="M 128,64 L 128,320" fill="none" stroke="black"/>
<path d="M 328,160 L 328,208" fill="none" stroke="black"/>
<path d="M 344,48 L 344,80" fill="none" stroke="black"/>
<path d="M 384,88 L 384,152" fill="none" stroke="black"/>
<path d="M 432,48 L 432,80" fill="none" stroke="black"/>
<path d="M 448,160 L 448,208" fill="none" stroke="black"/>
<path d="M 8,32 L 96,32" fill="none" stroke="black"/>
<path d="M 344,48 L 432,48" fill="none" stroke="black"/>
<path d="M 104,64 L 128,64" fill="none" stroke="black"/>
<path d="M 344,80 L 432,80" fill="none" stroke="black"/>
<path d="M 8,96 L 96,96" fill="none" stroke="black"/>
<path d="M 8,160 L 96,160" fill="none" stroke="black"/>
<path d="M 328,160 L 448,160" fill="none" stroke="black"/>
<path d="M 104,192 L 320,192" fill="none" stroke="black"/>
<path d="M 328,208 L 448,208" fill="none" stroke="black"/>
<path d="M 8,224 L 96,224" fill="none" stroke="black"/>
<path d="M 8,288 L 96,288" fill="none" stroke="black"/>
<path d="M 104,320 L 128,320" fill="none" stroke="black"/>
<path d="M 8,352 L 96,352" fill="none" stroke="black"/>
<polygon class="arrowhead" points="392,152 380,146.4 380,157.6 " fill="black" transform="rotate(90,384,152)"/>
<polygon class="arrowhead" points="112,320 100,314.4 100,325.6 " fill="black" transform="rotate(180,104,320)"/>
<polygon class="arrowhead" points="112,192 100,186.4 100,197.6 " fill="black" transform="rotate(180,104,192)"/>
<polygon class="arrowhead" points="112,64 100,58.4 100,69.6 " fill="black" transform="rotate(180,104,64)"/>
<g class="text">
<text x="52" y="52">Device</text>
<text x="48" y="68">1</text>
<text x="388" y="68">Author</text>
<text x="424" y="116">Payload</text>
<text x="464" y="116">+</text>
<text x="428" y="132">Manifest</text>
<text x="52" y="180">Device</text>
<text x="176" y="180">Payload</text>
<text x="216" y="180">+</text>
<text x="260" y="180">Manifest</text>
<text x="388" y="180">Distribution</text>
<text x="48" y="196">2</text>
<text x="388" y="196">System</text>
<text x="56" y="260">...</text>
<text x="52" y="308">Device</text>
<text x="48" y="324">n</text>
</g>
</svg>
</artwork><artwork  type="ascii-art"><![CDATA[
 +----------+
 |  Device  |                              +----------+
 |    1     |<--+                          |  Author  |
 |          |   |                          +----------+
 +----------+   |                               |
                |                               | Payload +
                |                               | Manifest
                |                               v
 +----------+   |                        +--------------+
 |  Device  |   |  Payload + Manifest    | Distribution |
 |    2     |<--+------------------------|    System    |
 |          |   |                        +--------------+
 +----------+   |
                |
      ...       |
                |
 +----------+   |
 |  Device  |   |
 |    n     |<--+
 |          |
 +----------+
]]></artwork></artset></figure>

<t>The author has several deployment options, namely:</t>

<t><list style="symbols">
  <t>The author, as the sender, obtains information about the recipients
and their keys from the distribution system. There are proprietary as well as
standardized device management solutions available providing this functionality,
as discussed in <xref target="RFC9019"/>. Then, it performs the necessary
steps to encrypt the payload. As a last step it creates one or more manifests.
The device(s) perform decryption and act as recipients.</t>
  <t>The author treats the distribution system as the initial recipient. The
author typically uses REST APIs or web user interfaces to interact with the
distribution system. Then, the distribution system decrypts and re-encrypts the
payload for consumption by the device (or the devices). Delegating the task of
re-encrypting the payload to the distribution system offers flexibility when the
number of devices that need to receive encrypted payloads changes dynamically
or when updates to KEKs or recipient public keys are necessary. As a downside,
the author needs to trust the distribution system with performing the
re-encryption of the payload.</t>
</list></t>

<t>If the author delegates encryption rights to the distributor two models are possible:</t>

<t><list style="numbers">
  <t>The distributor replaces the COSE_Encrypt in the manifest and then signs the
manifest again. However, the COSE_Encrypt structure is contained within a signed
container, which presents a problem: replacing the COSE_Encrypt with a new one
will cause the digest of the manifest to change, thereby changing the signature.
This means that the distributor must be able to sign the new manifest. If this
is the case, then the distributor gains the ability to construct and sign
manifests, which allows the distributor the authority to sign code, effectively
presenting the distributor with full control over the recipient. Because
distributors typically perform their re-encryption online in order to handle
a large number of devices in a timely fashion, it is not possible to air-gap
the distributor's signing operations. This impacts the recommendations in
Section 4.3.17 of <xref target="RFC9124"/>. This model nevertheless represent the current
state of firmware updates for IoT devices.</t>
  <t>The distributor uses a two-manifest system. More precisely, the distributor
constructs a new manifest that overrides the COSE_Encrypt using the dependency
system defined in <xref target="I-D.ietf-suit-trust-domains"/>. This incurs additional
overhead: one additional signature verification and one additional manifest,
as well as the additional machinery in the recipient needed for dependency
processing. This extra complexity offers extra security.</t>
</list></t>

<t>These two models also present different threat profiles for the distributor.
If the distributor only has encryption rights, then an attacker who breaches
the distributor can only mount a limited attack: they can encrypt a modified
binary, but the recipients will identify the attack as soon as they perform
the required image digest check and revert back to a correct image immediately.</t>

<t>It is RECOMMENDED that distributors are implemented using a two-manifest
system in order to distribute content encryption keys without requiring
re-signing of the manifest, despite the increase in complexity and greater
number of signature verifications that this imposes on the recipient.</t>

</section>
<section anchor="parameters"><name>Encryption Extensions</name>

<t>This specification introduces a new extension to the SUIT_Parameters structure.</t>

<t>The SUIT_Encryption_Info structure (called suit-parameter-encryption-info in
<xref target="parameter-fig"/>) contains the content key distribution information. The
content of the SUIT_Encryption_Info structure is explained in <xref target="AES-KW"/>
(for AES-KW) and in <xref target="ES-DH"/> (for ES-DH).</t>

<t>Once a CEK is available, the steps described in <xref target="content-enc"/> are applicable.
These steps apply to both content key distribution methods described in this
section.</t>

<t>The SUIT_Encryption_Info structure is either carried inside the
suit-directive-override-parameters or the suit-directive-set-parameters
parameters used in the "Directive Write" and "Directive Copy" directives.
An implementation claiming conformance with this specification
must implement support for these two parameters. Since a device will
typically only support one of the content key distribution methods,
the distribution system needs to know which of two specified methods
wis supported. Mandating only a single content key distribution
method for a constrained device also reduces the code size.</t>

<figure title="CDDL of the SUIT_Parameters Extension." anchor="parameter-fig"><artwork><![CDATA[
SUIT_Parameters //= (suit-parameter-encryption-info
    => bstr .cbor SUIT_Encryption_Info)

suit-parameter-encryption-info = 19
]]></artwork></figure>

<t>RFC Editor's Note (TBD19): The value for the suit-parameter-encryption-info
parameter is set to 19, as the proposed value.</t>

</section>
<section anchor="extended-directives"><name>Extended Directives</name>

<t>This specification extends these directives:</t>

<t><list style="symbols">
  <t>Directive Write (suit-directive-write) to decrypt the content specified by
suit-parameter-content with suit-parameter-encryption-info.</t>
  <t>Directive Copy (suit-directive-copy) to decrypt the content of the component
specified by suit-parameter-source-component with suit-parameter-encryption-info.</t>
</list></t>

<t>Examples of the two directives are shown below.</t>

<t><xref target="encryption-info-consumed-with-write"/> illustrates the Directive Write.
The encrypted payload specified with parameter-content, namely
h'EA1...CED' in the example, is decrypted using the SUIT_Encryption_Info
structure referred to by parameter-encryption-info, i.e., h'D86...1F0'.
The resulting plaintext payload is stored into component #0.</t>

<figure title="Example showing the extended suit-directive-write." anchor="encryption-info-consumed-with-write"><artwork><![CDATA[
/ directive-override-parameters / 20, {
  / parameter-content / 18: h'EA1...CED',
  / parameter-encryption-info / 19: h'D86...1F0'
},
/ directive-write / 18, 15
]]></artwork></figure>

<t><xref target="encryption-info-consumed-with-copy"/> illustrates the Directive Copy.
In this example the encrypted payload is found at the URI indicated
by the parameter-uri, i.e. "http://example.com/encrypted.bin". The
encrypted payload will be downloaded and stored in component #1.
Then, the information in the SUIT_Encryption_Info structure of the
parameter-encryption-info, i.e. h'D86...1F0', will be used to
decrypt the content in component #1 and the resulting plaintext
payload will be stored into component #0.</t>

<figure title="Example showing the extended suit-directive-copy." anchor="encryption-info-consumed-with-copy"><artwork><![CDATA[
/ directive-set-component-index / 12, 1,
/ directive-override-parameters / 20, {
  / parameter-uri / 21: "http://example.com/encrypted.bin",
},
/ directive-fetch / 21, 15,
/ directive-set-component-index / 12, 0,
/ directive-override-parameters / 20, {
  / parameter-source-component / 22: 1,
  / parameter-encryption-info / 19: h'D86...1F0'
},
/ directive-copy / 22, 15
]]></artwork></figure>

<t>The payload to be encrypted may be detached and, in that case, it is
not covered by the digital signature or the MAC protecting the manifest.
(To be more precise, the suit-authentication-wrapper found in the envelope
contains a digest of the manifest in the SUIT Digest Container.)</t>

<t>The lack of authentication and integrity protection of the payload is
particularly a concern when a cipher without integrity protection is
used.</t>

<t>To provide authentication and integrity protection of the payload
in the detached payload case a SUIT Digest Container with the hash
of the encrypted and/or plaintext payload MUST be included in the
manifest. See suit-parameter-image-digest parameter in Section
8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>.</t>

<t>Once a CEK is available, the steps described in <xref target="content-enc"/> are applicable.
These steps apply to both content key distribution methods.</t>

</section>
<section anchor="content-key-distribution"><name>Content Key Distribution</name>

<t>The sub-sections below describe two content key distribution methods,
namely AES Key Wrap (AES-KW) and Ephemeral-Static Diffie-Hellman (ES-DH).
Many other methods are specified in the literature, and even supported
by COSE. AES-KW and ES-DH cover the popular methods used in the market
today and they were selected due to their maturity, different
security properties, and because of their interoperability properties.</t>

<t>The two content key distribution methods require the CEKs to be
randomly generated. The guidelines for random number generation
in <xref target="RFC8937"/> MUST be followed.</t>

<t>When an encrypted payload is sent to multiple recipients, there
are different deployment options. To explain these options we use the
following notation:</t>

<figure><artwork><![CDATA[
   - KEK(R1, S) refers to a KEK shared between recipient R1 and
     the sender S. The KEK, as a concept, is used by AES Key Wrap
     but not by ES-DH.
   - CEK(R1, S) refers to a CEK shared between R1 and S.
   - CEK(*, S) or KEK(*, S) are used when a single CEK or a single
     KEK is shared with all authorized recipients by a given sender
     S in a certain context.
   - ENC(plaintext, k) refers to the encryption of plaintext with
     a key k.
]]></artwork></figure>

<section anchor="AES-KW"><name>Content Key Distribution with AES Key Wrap</name>

<section anchor="introduction-1"><name>Introduction</name>

<t>The AES Key Wrap (AES-KW) algorithm is described in <xref target="RFC3394"/>, and
can be used to encrypt a randomly generated content-encryption key (CEK)
with a pre-shared key-encryption key (KEK). The COSE conventions for using
AES-KW are specified in Section 8.5.2 of <xref target="RFC9052"/> and in Section 6.2.1 of
<xref target="RFC9053"/>. The encrypted CEK is carried in the COSE_recipient structure
alongside the information needed for AES-KW. The COSE_recipient structure,
which is a substructure of the COSE_Encrypt structure, contains the CEK
encrypted by the KEK.</t>

<t>To provide high security for AES Key Wrap, it is important that the
KEK is of high entropy, and that implementations protect the KEK
from disclosure. Compromise of the KEK may result in the disclosure
of all data protected with that KEK, including binaries, and configuration data.</t>

<t>The COSE_Encrypt structure conveys information for encrypting the payload,
which includes information like the algorithm and the IV, even though the
payload may not be embedded in the COSE_Encrypt.ciphertext if it is
conveyed as detached content.</t>

</section>
<section anchor="deployment-options"><name>Deployment Options</name>

<t>There are three deployment options for use with AES Key Wrap for payload
encryption:</t>

<t><list style="symbols">
  <t>If all recipients (typically of the same product family) share the same KEK,
a single COSE_recipient structure contains the encrypted CEK. The sender executes
the following steps:</t>
</list></t>

<figure><artwork><![CDATA[
     1. Fetch KEK(*, S)
     2. Generate CEK
     3. ENC(CEK, KEK)
     4. ENC(payload, CEK)
]]></artwork></figure>

<t>This deployment option is strongly discouraged. An attacker gaining access to
the KEK will be able to encrypt and send payloads to all recipients configured
to use this KEK.</t>

<t><list style="symbols">
  <t>If recipients have different KEKs, then multiple COSE_recipient structures
are included but only a single CEK is used. Each COSE_recipient structure
contains the CEK encrypted with the KEKs appropriate for a given recipient.
The benefit of this approach is that the payload is encrypted only once with
a CEK while there is no sharing of the KEK across recipients. Hence, authorized
recipients still use their individual KEK to decrypt the CEK and to subsequently
obtain the plaintext. The steps taken by the sender are:</t>
</list></t>

<figure><artwork><![CDATA[
    1.  Generate CEK
    2.  for i=1 to n
        {
    2a.    Fetch KEK(Ri, S)
    2b.    ENC(CEK, KEK(Ri, S))
        }
    3.  ENC(payload, CEK)
]]></artwork></figure>

<t><list style="symbols">
  <t>The third option is to use different CEKs encrypted with KEKs of
authorized recipients. This approach is appropriate when no benefits can
be gained from encrypting and transmitting payloads only once. Assume there
are n recipients with their unique KEKs - KEK(R1, S), ..., KEK(Rn, S).
The sender needs to execute the following steps:</t>
</list></t>

<figure><artwork><![CDATA[
    1.  for i=1 to n
        {
    1a.    Fetch KEK(Ri, S)
    1b.    Generate CEK(Ri, S)
    1c.    ENC(CEK(Ri, S), KEK(Ri, S))
    1d.    ENC(payload, CEK(Ri, S))
    2.  }
]]></artwork></figure>

</section>
<section anchor="cddl"><name>CDDL</name>

<t>The CDDL for the COSE_Encrypt_Tagged structure is shown in <xref target="cddl-aeskw"/>.
empty_or_serialized_map and header_map are structures defined in <xref target="RFC9052"/>.</t>

<figure title="CDDL for AES-KW-based Content Key Distribution" anchor="cddl-aeskw"><artwork><![CDATA[
outer_header_map_protected = empty_or_serialized_map
outer_header_map_unprotected = header_map

SUIT_Encryption_Info_AESKW = [
  protected   : bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : bstr / nil,
  recipients  : [ + COSE_recipient_AESKW .within COSE_recipient ]
]

COSE_recipient_AESKW = [
  protected   : bstr .size 0 / bstr .cbor empty_map,
  unprotected : recipient_header_unpr_map_aeskw,
  ciphertext  : bstr        ; CEK encrypted with KEK
]

empty_map = {}

recipient_header_unpr_map_aeskw =
{
    1 => int,         ; algorithm identifier
  ? 4 => bstr,        ; identifier of the KEK pre-shared with the recipient
  * label => values   ; extension point
}
]]></artwork></figure>

<t>Note that the AES-KW algorithm, as defined in Section 2.2.3.1 of <xref target="RFC3394"/>,
does not have public parameters that vary on a per-invocation basis. Hence,
the protected header in the COSE_recipient structure is a byte string
of zero length.</t>

</section>
<section anchor="example"><name>Example</name>

<t>This example uses the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm for payload encryption: AES-GCM-128
  <list style="symbols">
      <t>IV: h'93702C81590F845D9EC866CCAC767BD1'</t>
    </list></t>
  <t>Algorithm id for key wrap: A128KW</t>
  <t>KEK COSE_Key (Secret Key):
  <list style="symbols">
      <t>/ kty / 1: 4 / Symmetric /</t>
      <t>/ k / -1: 'aaaaaaaaaaaaaaaa'</t>
    </list></t>
  <t>KID: 'kid-1'</t>
  <t>Plaintext: "This is a real firmware image."
  <list style="symbols">
      <t>in hex: 546869732069732061207265616C206669726D7761726520696D6167652E</t>
    </list></t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608443A10101A10550F14AAB9D81D51F7AD943FE87AF4F70CDF6818341
A0A2012204456B69642D31581875603FFC9518D794713C8CA8A115A7FB32
565A6D59534D62
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="aeskw-aesgcm-example"/>.</t>

<figure title="COSE_Encrypt Example for AES Key Wrap" anchor="aeskw-aesgcm-example"><artwork><![CDATA[
96([
  / protected: / << {
    / alg / 1: 1 / AES-GCM-128 /
  } >>,
  / unprotected: / {
    / IV / 5: h'F14AAB9D81D51F7AD943FE87AF4F70CD'
  },
  / payload: / null / detached ciphertext /,
  / recipients: / [
    [
      / protected: / << {
      } >>,
      / unprotected: / {
        / alg / 1: -3 / A128KW /,
        / kid / 4: 'kid-1'
      },
      / payload: /
        h'75603FFC9518D794713C8CA8A115A7FB32565A6D59534D62'
        / CEK encrypted with KEK /
    ]
  ]
])
]]></artwork></figure>

<t>The encrypted payload (with a line feed added) was:</t>

<figure><artwork><![CDATA[
2F59C3A34D9570FB99A5382E66466A3221A8AD85CE508BA306FB431A60EF
A5AAAA078355070205A4B196832DF17F
]]></artwork></figure>

</section>
</section>
<section anchor="ES-DH"><name>Content Key Distribution with Ephemeral-Static Diffie-Hellman</name>

<section anchor="introduction-2"><name>Introduction</name>

<t>Ephemeral-Static Diffie-Hellman (ES-DH) is a scheme that provides public key
encryption given a recipient's public key. There are multiple variants
of this scheme; this document re-uses the variant specified in Section 8.5.5
of <xref target="RFC9052"/>.</t>

<t>The following two layer structure is used:</t>

<t><list style="symbols">
  <t>Layer 0: Has a content encrypted with the CEK. The content may be detached.</t>
  <t>Layer 1: Uses the AES Key Wrap algorithm to encrypt the randomly generated
CEK with the KEK derived with ES-DH, whereby the resulting symmetric
key is fed into the HKDF-based key derivation function.</t>
</list></t>

<t>As a result, the two layers combine ES-DH with AES-KW and HKDF. An example is
given in <xref target="esdh-aesgcm-example"/>.</t>

</section>
<section anchor="deployment-options-1"><name>Deployment Options</name>

<t>There are two deployment options with this approach. We assume that recipients
are always configured with a device-unique public / private key pair.</t>

<t><list style="symbols">
  <t>A sender wants to transmit a payload to multiple recipients. All recipients
shall receive the same encrypted payload, i.e. the same CEK is used.
One COSE_recipient structure per recipient is used and it contains the
CEK encrypted with the KEK. To generate the KEK each COSE_recipient structure
contains a COSE_recipient_inner structure to carry the sender's ephemeral key
and an identifier for the recipients public key.</t>
</list></t>

<t>The steps taken by the sender are:</t>

<figure><artwork><![CDATA[
    1.  Generate CEK
    2.  for i=1 to n
        {
    2a.     Generate KEK(Ri, S) using ES-DH
    2b.     ENC(CEK, KEK(Ri, S))
        }
    3.  ENC(payload,CEK)
]]></artwork></figure>

<t><list style="symbols">
  <t>The alternative is to encrypt a payload with a different CEK for each
recipient. This results in n-manifests. This approach is useful when payloads contain
information unique to a device. The encryption operation then effectively becomes
ENC(payload_i, CEK(Ri, S)). Assume that KEK(R1, S),..., KEK(Rn, S) have been generated
for the different recipients using ES-DH. The following steps need to be made
by the sender:</t>
</list></t>

<figure><artwork><![CDATA[
    1.  for i=1 to n
        {
    1a.     Generate KEK(Ri, S) using ES-DH
    1b.     Generate CEK(Ri, S)
    1c.     ENC(CEK(Ri, S), KEK(Ri, S))
    1d.     ENC(payload, CEK(Ri, S))
        }
]]></artwork></figure>

</section>
<section anchor="cddl-1"><name>CDDL</name>

<t>The CDDL for the COSE_Encrypt_Tagged structure is shown in <xref target="cddl-esdh"/>.
Only the minimum number of parameters is shown. empty_or_serialized_map
and header_map are structures defined in <xref target="RFC9052"/>.</t>

<figure title="CDDL for ES-DH-based Content Key Distribution" anchor="cddl-esdh"><artwork><![CDATA[
outer_header_map_protected = empty_or_serialized_map
outer_header_map_unprotected = header_map

SUIT_Encryption_Info_ESDH = [
  protected   : bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : bstr / nil,
  recipients  : [ + COSE_recipient_ESDH .within COSE_recipient ]
]

COSE_recipient_ESDH = [
  protected   : bstr .cbor recipient_header_map_esdh,
  unprotected : recipient_header_unpr_map_esdh,
  ciphertext  : bstr        ; CEK encrypted with KEK
]

recipient_header_map_esdh =
{
    1 => int,         ; algorithm identifier
  * label => values   ; extension point
}

recipient_header_unpr_map_esdh =
{
   -1 => COSE_Key,    ; ephemeral public key for the sender
  ? 4 => bstr,        ; identifier of the recipient public key
  * label => values   ; extension point
}
]]></artwork></figure>

<t>See <xref target="content-enc"/> for a description on how to encrypt the payload.</t>

</section>
<section anchor="context-information-structure"><name>Context Information Structure</name>

<t>The context information structure is used to ensure that the derived keying material
is "bound" to the context of the transaction. This specification re-uses the structure
defined in Section 5.2 of <xref target="RFC9053"/> and tailors it accordingly.</t>

<t>The following information elements are bound to the context:</t>

<t><list style="symbols">
  <t>the protocol employing the key-derivation method,</t>
  <t>information about the utilized AES Key Wrap algorithm, and the key length.</t>
  <t>the protected header field, which contains the content key encryption algorithm.</t>
</list></t>

<t>The sender and recipient identities are left empty.</t>

<t>The following fields in <xref target="cddl-context-info"/> require an explanation:</t>

<t><list style="symbols">
  <t>The COSE_KDF_Context.AlgorithmID field MUST contain the algorithm identifier
for AES Key Wrap algorithm utilized. This specification uses the following
values: A128KW (value -3), A192KW (value -4), or A256KW (value -5)</t>
  <t>The COSE_KDF_Context.SuppPubInfo.keyDataLength field MUST contain the key length
of the algorithm in the COSE_KDF_Context.AlgorithmID field expressed as the number
of bits. For A128KW the value is 128, for A192KW the value is 192, and for A256KW
the value 256.</t>
  <t>The COSE_KDF_Context.SuppPubInfo.other field captures the protocol in
which the ES-DH content key distribution algorithm is used and MUST be set to
the constant string "SUIT Payload Encryption".</t>
  <t>The COSE_KDF_Context.SuppPubInfo.protected field MUST contain the serialized
content of the recipient_header_map_esdh field, which contains (among other fields)
the identifier of the content key distribution method.</t>
</list></t>

<figure title="CDDL for COSE_KDF_Context Structure" anchor="cddl-context-info"><sourcecode type="CDDL"><![CDATA[
COSE_KDF_Context = [
    AlgorithmID : int,
    PartyUInfo : [ PartyInfoSender ],
    PartyVInfo : [ PartyInfoRecipient ],
    SuppPubInfo : [
        keyDataLength : uint,
        protected : bstr .cbor recipient_header_map_esdh,
        other: 'SUIT Payload Encryption'
    ],
    ? SuppPrivInfo : bstr
]

PartyInfoSender = (
    identity : nil,
    nonce : nil,
    other : nil
)

PartyInfoRecipient = (
    identity : nil,
    nonce : nil,
    other : nil
)
]]></sourcecode></figure>

<t>The HKDF-based key derivation function MAY contain a salt value,
as described in Section 5.1 of <xref target="RFC9053"/>. This optional value is used to
influence the key generation process. This specification does not mandate the
use of a salt value. If the salt is public and carried in the message, then
the "salt" algorithm header parameter MUST be used. The purpose of the salt
is to provide extra randomness in the KDF context. If the salt is sent
in the 'salt' algorithm header parameter, then the receiver MUST be able to
process the salt and MUST pass it into the key derivation function.
For more information about the salt, see <xref target="RFC5869"/> and NIST
SP800-56 <xref target="SP800-56"/>.</t>

<t>Profiles of this specification MAY specify an extended version of the
context information structure or MAY utilize a different context information
structure.</t>

</section>
<section anchor="example-1"><name>Example</name>

<t>This example uses the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm for payload encryption: AES-GCM-128
  <list style="symbols">
      <t>IV: h'3517CE3E78AC2BF3D1CDFDAF955E8600'</t>
    </list></t>
  <t>Algorithm for content key distribution: ECDH-ES + A128KW</t>
  <t>KEK COSE_Key (Receiver's Private Key):
  <list style="symbols">
      <t>/ kty / 1: 2 / EC2 /</t>
      <t>/ crv / -1: 1 / P-256 /</t>
      <t>/ x / -2: h'5886CD61DD875862E5AAA820E7A15274C968A9BC96048DDCACE32F50C3651BA3'</t>
      <t>/ y / -3: h'9EED8125E932CD60C0EAD3650D0A485CF726D378D1B016ED4298B2961E258F1B'</t>
      <t>/ d / -4: h'60FE6DD6D85D5740A5349B6F91267EEAC5BA81B8CB53EE249E4B4EB102C476B3'</t>
    </list></t>
  <t>KID: 'kid-2'</t>
  <t>KDF Context
  <list style="symbols">
      <t>ALgorithm ID: -3 (A128KW)</t>
      <t>SuppPubInfo
      <list style="symbols">
          <t>keyDataLength: 128</t>
          <t>protected = &lt;&lt; { / alg / 1: -3 / A128KW / } &gt;&gt;</t>
          <t>other = 'SUIT Payload Encryption'</t>
        </list></t>
    </list></t>
  <t>Plaintext: "This is a real firmware image."
  <list style="symbols">
      <t>in hex: 546869732069732061207265616C206669726D7761726520696D6167652E</t>
    </list></t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608443A10101A10550DAE613B2E0DC55F4322BE38BDBA9DC68F6818344
A101381CA220A401022001215820FF6E266DABAF51B7207569E31CF72646
183E94CEE64FCDC8695AD9A505AEFDEA2258205FBC4A29844450B3AC22AB
30C7F7004BB59D8BD60D7997734A9FA0124B65089504456B69642D325818
B0E21628283F3E409F8158D8FFCA567F340E379AC39E49C9
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="esdh-aesgcm-example"/>.</t>

<figure title="COSE_Encrypt Example for ES-DH" anchor="esdh-aesgcm-example"><artwork><![CDATA[
96([
  / protected: / << {
    / alg / 1: 1 / AES-GCM-128 /
  } >>,
  / unprotected: / {
    / IV / 5: h'DAE613B2E0DC55F4322BE38BDBA9DC68'
  },
  / payload: / null / detached ciphertext /,
  / recipients: / [
    [
      / protected: / << {
        / alg / 1: -29 / ECDH-ES + A128KW /
      } >>,
      / unprotected: / {
        / ephemeral key / -1: {
          / kty / 1: 2 / EC2 /,
          / crv / -1: 1 / P-256 /,
          / x / -2: h'FF6E266DABAF51B7207569E31CF72646
                      183E94CEE64FCDC8695AD9A505AEFDEA',
          / y / -3: h'5FBC4A29844450B3AC22AB30C7F7004B
                      B59D8BD60D7997734A9FA0124B650895'
        },
        / kid / 4: 'kid-2'
      },
      / payload:
        / h'B0E21628283F3E409F8158D8FFCA567F340E379AC39E49C9'
        / CEK encrypted with KEK /
    ]
  ]
])
]]></artwork></figure>

<t>The encrypted payload (with a line feed added) was:</t>

<figure><artwork><![CDATA[
344FA2D5AD2F43F6F363DA6FF2C337FE69E33E3D63714D23985BF02499EB
0E8B231D45C378245DA3611C160CC511
]]></artwork></figure>

</section>
</section>
<section anchor="content-enc"><name>Content Encryption</name>

<t>This section summarizes the steps taken for content encryption, which
applies to both content key distribution methods.</t>

<t>For use with AEAD ciphers, the COSE specification requires a consistent byte
stream for the authenticated data structure to be created. This structure
is shown in <xref target="cddl-enc-aeskw"/> and is defined in Section 5.3 of <xref target="RFC9052"/>.</t>

<figure title="CDDL for Enc_structure Data Structure" anchor="cddl-enc-aeskw"><artwork><![CDATA[
 Enc_structure = [
   context : "Encrypt",
   protected : empty_or_serialized_map,
   external_aad : bstr
 ]
]]></artwork></figure>

<t>This Enc_structure needs to be populated as follows:</t>

<t>The protected field in the Enc_structure from <xref target="cddl-enc-aeskw"/> refers
to the content of the protected field from the COSE_Encrypt structure.</t>

<t>The value of the external_aad MUST be set to a zero-length byte string,
i.e., h'' in diagnostic notation and encoded as 0x40.</t>

<t>Some ciphers provide confidentiality witout integrity protection, such
as AES-CTR and AES-CBC (see <xref target="RFC9459"/>). For these ciphers the
Enc_structure, shown in <xref target="cddl-enc-aeskw"/>, MUST NOT be used because
the Additional Authenticated Data (AAD) byte string is only consumable
by AEAD ciphers. Hence, the AAD structure is not supplied to the 
API of those ciphers and the protected header in the SUIT_Encryption_Info_AESKW
or SUIT_Encryption_Info_ESDH structure MUST be a zero-length byte string,
respectively.</t>

</section>
</section>
<section anchor="flash"><name>Firmware Updates on IoT Devices with Flash Memory</name>

<t>There are many flavors of embedded devices, the market is large and fragmented.
Hence, it is likely that some implementations and deployments implement their
firmware update procedure differently than described below. On a positive note,
the SUIT manifest allows different deployment scenarios to be supported easily
thanks to the "scripting" functionality offered by the commands.</t>

<t>This section is specific to firmware images on microcontrollers and does
not apply to generic software, configuration data, and machine learning models. 
The differences are the result of two aspects:</t>

<t><list style="symbols">
  <t>Use of flash memory: Flash memory on microcontrollers is a type of non-volatile
memory that erases data in larger units called blocks, pages, or sectors and
re-writes data at the byte level (often 4-bytes) or larger units. Flash memory
is furthermore segmented into different memory regions, which store the
bootloader, different versions of firmware images (in so-called slots), and
configuration data. <xref target="image-layout"/> shows an example layout of a microcontroller
flash area.</t>
  <t>Microcontroller Design: Code on microcontrollers cannot be executed from an
arbitrary place in flash memory, execute-in-place, without extra software
development and design efforts. Hence, developers often compile firmware such
that the bootloader can execute the code from a specific location in flash
memory. Often, the primary slot is used for this purpose.</t>
</list></t>

<t>When the encrypted firmware image has been transferred to the device, it will
typically be stored in a staging area, in the secondary slot in our example.</t>

<t>At the next boot, the bootloader will recognize a new firmware image and will
start decrypting the downloaded image sector-by-sector and will swap it with
the image found in the primary slot. This approach of swapping the newly
downloaded image with the previously valid image requires two slots to allow
the update to be reversed in case the newly obtained firmware image fails to
boot. This adds robustness to the firmware update procedure.</t>

<t>The swap will only take place after the signature on the plaintext is verified.
Note that the plaintext firmware image is available in the primary slot only after
the swap has been completed, unless "dummy decrypt" is used to compute the hash
over the plaintext prior to executing the decrypt operation during a swap.
Dummy decryption here refers to the decryption of the firmware image found in
the secondary slot sector-by-sector and computing a rolling hash over the resulting
plaintext firmware image (also sector-by-sector) without performing the swap operation.
While there are performance optimizations possible, such as conveying hashes for
each sector in the manifest rather than a hash of the entire firmware image,
such optimizations are not described in this specification.</t>

<t>Without support for hardware-based, on-the-fly decryption the image in primary
slot is available in cleartext, it may need to be re-encrypted before copying it
to the secondary slot. This may be necessary when the secondary slot has different
access permissions or when the staging area is located in off-chip flash memory and
is therefore more vulnerable to physical attacks.</t>

<figure title="Example Flash Area Layout" anchor="image-layout"><artset><artwork  type="svg"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="544" width="424" viewBox="0 0 424 544" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,528" fill="none" stroke="black"/>
<path d="M 416,32 L 416,528" fill="none" stroke="black"/>
<path d="M 8,32 L 416,32" fill="none" stroke="black"/>
<path d="M 8,64 L 416,64" fill="none" stroke="black"/>
<path d="M 8,256 L 416,256" fill="none" stroke="black"/>
<path d="M 8,448 L 416,448" fill="none" stroke="black"/>
<path d="M 8,496 L 416,496" fill="none" stroke="black"/>
<path d="M 8,528 L 416,528" fill="none" stroke="black"/>
<g class="text">
<text x="60" y="52">Bootloader</text>
<text x="48" y="84">Primary</text>
<text x="100" y="84">Slot</text>
<text x="360" y="100">(sector</text>
<text x="404" y="100">1)</text>
<text x="212" y="116">..................................................</text>
<text x="360" y="148">(sector</text>
<text x="404" y="148">2)</text>
<text x="212" y="164">..................................................</text>
<text x="360" y="196">(sector</text>
<text x="404" y="196">3)</text>
<text x="212" y="212">..................................................</text>
<text x="360" y="244">(sector</text>
<text x="404" y="244">4)</text>
<text x="56" y="276">Secondary</text>
<text x="116" y="276">Slot</text>
<text x="360" y="292">(sector</text>
<text x="404" y="292">1)</text>
<text x="212" y="308">..................................................</text>
<text x="360" y="340">(sector</text>
<text x="404" y="340">2)</text>
<text x="212" y="356">..................................................</text>
<text x="360" y="388">(sector</text>
<text x="404" y="388">3)</text>
<text x="212" y="404">..................................................</text>
<text x="360" y="436">(sector</text>
<text x="404" y="436">4)</text>
<text x="36" y="468">Swap</text>
<text x="76" y="468">Area</text>
<text x="72" y="516">Configuration</text>
<text x="148" y="516">Data</text>
</g>
</svg>
</artwork><artwork  type="ascii-art"><![CDATA[
+--------------------------------------------------+
| Bootloader                                       |
+--------------------------------------------------+
| Primary Slot                                     |
|                                        (sector 1)|
|..................................................|
|                                                  |
|                                        (sector 2)|
|..................................................|
|                                                  |
|                                        (sector 3)|
|..................................................|
|                                                  |
|                                        (sector 4)|
+--------------------------------------------------+
| Secondary Slot                                   |
|                                        (sector 1)|
|..................................................|
|                                                  |
|                                        (sector 2)|
|..................................................|
|                                                  |
|                                        (sector 3)|
|..................................................|
|                                                  |
|                                        (sector 4)|
+--------------------------------------------------+
| Swap Area                                        |
|                                                  |
+--------------------------------------------------+
| Configuration Data                               |
+--------------------------------------------------+
]]></artwork></artset></figure>

<t>The ability to restart an interrupted firmware update is often a requirement
for low-end IoT devices. To fulfill this requirement it is necessary to chunk
a firmware image into sectors and to encrypt each sector individually
using a cipher that does not increase the size of the resulting ciphertext
(i.e., by not adding an authentication tag after each encrypted block).</t>

<t>When an update gets aborted while the bootloader is decrypting the newly obtained
image and swapping the sectors, the bootloader can restart where it left off. This
technique offers robustness and better performance.</t>

<t>For this purpose, ciphers without integrity protection are used to encrypt the
firmware image. Integrity protection of the firmware image MUST be provided
and the suit-parameter-image-digest, defined in Section 8.4.8.6 of
<xref target="I-D.ietf-suit-manifest"/>, MUST be used.</t>

<t><xref target="RFC9459"/> registers AES Counter (AES-CTR) mode and AES Cipher Block Chaining
(AES-CBC) ciphers that do not offer integrity protection. These ciphers are useful
for use cases that require firmware encryption on IoT devices. For many other use
cases where software packages, configuration information or personalization data
need to be encrypted, the use of Authenticated Encryption with Associated Data
(AEAD) ciphers is RECOMMENDED.</t>

<t>The following sub-sections provide further information about the initialization vector
(IV) selection for use with AES-CBC and AES-CTR in the firmware encryption context. An
IV MUST NOT be re-used when the same key is used. For this application, the IVs are
not random but rather based on the slot/sector-combination in flash memory. The
text below assumes that the block-size of AES is (much) smaller than the sector size. The
typical sector-size of flash memory is in the order of KiB. Hence, multiple AES blocks
need to be decrypted until an entire sector is completed.</t>

<section anchor="aes-cbc"><name>AES-CBC</name>

<t>In AES-CBC, a single IV is used for encryption of firmware belonging to a single sector,
since individual AES blocks are chained together, as shown in <xref target="aes-cbc-fig"/>. The
numbering  of sectors in a slot MUST start with zero (0) and MUST increase by one with
every sector till the end of the slot is reached. The IV follows this numbering.</t>

<t>For example, let us assume the slot size of a specific flash controller on an IoT device
is 64 KiB, the sector size 4096 bytes (4 KiB) and AES-128-CBC uses an AES-block size of
128 bit (16 bytes). Hence, sector 0 needs 4096/16=256 AES-128-CBC operations using IV 0.
If the firmware image fills the entire slot, then that slot contains 16 sectors, i.e. IVs
ranging from 0 to 15.</t>

<figure title="AES-CBC Operation" anchor="aes-cbc-fig"><artset><artwork  type="svg"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="400" width="232" viewBox="0 0 232 400" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 40,112 L 40,192" fill="none" stroke="black"/>
<path d="M 72,48 L 72,104" fill="none" stroke="black"/>
<path d="M 72,200 L 72,256" fill="none" stroke="black"/>
<path d="M 104,112 L 104,192" fill="none" stroke="black"/>
<path d="M 120,64 L 120,224" fill="none" stroke="black"/>
<path d="M 160,112 L 160,192" fill="none" stroke="black"/>
<path d="M 192,48 L 192,104" fill="none" stroke="black"/>
<path d="M 192,200 L 192,256" fill="none" stroke="black"/>
<path d="M 224,112 L 224,192" fill="none" stroke="black"/>
<path d="M 48,64 L 80,64" fill="none" stroke="black"/>
<path d="M 120,64 L 200,64" fill="none" stroke="black"/>
<path d="M 40,112 L 104,112" fill="none" stroke="black"/>
<path d="M 160,112 L 224,112" fill="none" stroke="black"/>
<path d="M 40,192 L 104,192" fill="none" stroke="black"/>
<path d="M 160,192 L 224,192" fill="none" stroke="black"/>
<path d="M 72,224 L 120,224" fill="none" stroke="black"/>
<path d="M 24,384 L 40,384" fill="none" stroke="black"/>
<g class="text">
<text x="68" y="36">P1</text>
<text x="196" y="36">P2</text>
<text x="36" y="68">IV</text>
<text x="24" y="164">k--</text>
<text x="64" y="164">E</text>
<text x="144" y="164">k--</text>
<text x="184" y="164">E</text>
<text x="76" y="276">C1</text>
<text x="196" y="276">C2</text>
<text x="32" y="308">Legend:</text>
<text x="28" y="324">Pi</text>
<text x="48" y="324">=</text>
<text x="96" y="324">Plaintext</text>
<text x="164" y="324">blocks</text>
<text x="28" y="340">Ci</text>
<text x="48" y="340">=</text>
<text x="100" y="340">Ciphertext</text>
<text x="172" y="340">blocks</text>
<text x="24" y="356">E</text>
<text x="40" y="356">=</text>
<text x="92" y="356">Encryption</text>
<text x="172" y="356">function</text>
<text x="24" y="372">k</text>
<text x="40" y="372">=</text>
<text x="88" y="372">Symmetric</text>
<text x="144" y="372">key</text>
<text x="56" y="388">=</text>
<text x="80" y="388">XOR</text>
<text x="136" y="388">operation</text>
</g>
</svg>
</artwork><artwork  type="ascii-art"><![CDATA[
       P1              P2
        |              |
   IV--(+)    +-------(+)
        |     |        |
        |     |        |
    +-------+ |    +-------+
    |       | |    |       |
    |       | |    |       |
 k--|  E    | | k--|  E    |
    |       | |    |       |
    +-------+ |    +-------+
        |     |        |
        +-----+        |
        |              |
        |              |
        C1             C2

Legend: 
  Pi = Plaintext blocks
  Ci = Ciphertext blocks
  E = Encryption function
  k = Symmetric key
  (+) = XOR operation
]]></artwork></artset></figure>

<section anchor="aes-kw-aes-cbc-example"><name>AES-KW + AES-CBC Example</name>

<t>This example uses the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm for payload encryption: A128-CBC
  <list style="symbols">
      <t>IV: h'93702C81590F845D9EC866CCAC767BD1'</t>
    </list></t>
  <t>Algorithm id for key wrap: A128KW</t>
  <t>KEK COSE_Key (Secret Key):
  <list style="symbols">
      <t>/ kty / 1: 4 / Symmetric /</t>
      <t>/ k / -1: 'aaaaaaaaaaaaaaaa'</t>
    </list></t>
  <t>KID: 'kid-1'</t>
  <t>Plaintext: "This is a real firmware image."
  <list style="symbols">
      <t>in hex: 546869732069732061207265616C206669726D7761726520696D6167652E</t>
    </list></t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608445A10139FFFAA1055093702C81590F845D9EC866CCAC767BD1F681
8341A0A2012204456B69642D315818E198FF269626EC43299D33586FC7B2
646B13292261160422
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="aeskw-aescbc-example"/>.</t>

<figure title="COSE_Encrypt Example for AES Key Wrap" anchor="aeskw-aescbc-example"><artwork><![CDATA[
96([
  / protected: / << {
    / alg / 1: -65531 / A128CBC /
  } >>,
  / unprotected: / {
    / IV / 5: h'93702C81590F845D9EC866CCAC767BD1'
  },
  / payload: / null / detached ciphertext /,
  / recipients: / [
    [
      / protected: / << {
      } >>,
      / unprotected: / {
        / alg / 1: -3 / A128KW /,
        / kid / 4: 'kid-1'
      },
      / payload: /
        h'E198FF269626EC43299D33586FC7B2646B13292261160422'
        / CEK encrypted with KEK /
    ]
  ]
])
]]></artwork></figure>

<t>The encrypted payload (with a line feed added) was:</t>

<figure><artwork><![CDATA[
9C09156CF4ACE0401086D98586E0B09FA5B5CF78F2BCCBF6C914DDB42BF0
E21E
]]></artwork></figure>

</section>
<section anchor="es-dh-aes-cbc-example"><name>ES-DH + AES-CBC Example</name>

<t>This example uses the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm for payload encryption: AES-CBC-128
  <list style="symbols">
      <t>IV: h'DAE613B2E0DC55F4322BE38BDBA9DC68'</t>
    </list></t>
  <t>Algorithm for content key distribution: ECDH-ES + A128KW</t>
  <t>KEK COSE_Key (Receiver's Private Key):
  <list style="symbols">
      <t>/ kty / 1: 2 / EC2 /</t>
      <t>/ crv / -1: 1 / P-256 /</t>
      <t>/ x / -2: h'5886CD61DD875862E5AAA820E7A15274C968A9BC96048DDCACE32F50C3651BA3'</t>
      <t>/ y / -3: h'9EED8125E932CD60C0EAD3650D0A485CF726D378D1B016ED4298B2961E258F1B'</t>
      <t>/ d / -4: h'60FE6DD6D85D5740A5349B6F91267EEAC5BA81B8CB53EE249E4B4EB102C476B3'</t>
    </list></t>
  <t>KDF Context
  <list style="symbols">
      <t>ALgorithm ID: -3 (A128KW)</t>
      <t>SuppPubInfo
      <list style="symbols">
          <t>keyDataLength: 128</t>
          <t>protected = &lt;&lt; { / alg / 1: -3 / A128KW / } &gt;&gt;</t>
          <t>other = 'SUIT Payload Encryption'</t>
        </list></t>
    </list></t>
  <t>Plaintext: "This is a real firmware image."
  <list style="symbols">
      <t>in hex: 546869732069732061207265616C206669726D7761726520696D6167652E</t>
    </list></t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608445A10139FFFAA10550DAE613B2E0DC55F4322BE38BDBA9DC68F681
8344A101381CA120A401022001215820BE4FB61E951F0378F453B610C91D
DD29EF00CD36A0957F9686AC7D693E8880A32258200DF7D9253B34FC0247
A11E15F20281680447896BE91B65E1D1E06D3E5FC57B0A581832970E4511
E3709F118B838C5EDD62A05A1421558CE56C20
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="esdh-aescbc-example"/>. Note that the COSE_Encrypt structure also needs to
be protected and authenticated by the suit-authentication-wrapper,
which is not shown below.</t>

<figure title="COSE_Encrypt Example for ES-DH" anchor="esdh-aescbc-example"><artwork><![CDATA[
96([
  / protected: / << {
    / alg / 1: -65531 / A128CBC /
  } >>,
  / unprotected: / {
    / IV / 5: h'DAE613B2E0DC55F4322BE38BDBA9DC68'
  },
  / payload: / null / detached ciphertext /,
  / recipients: / [
    [
      / protected: / << {
        / alg / 1: -29 / ECDH-ES + A128KW /
      } >>,
      / unprotected: / {
        / ephemeral key / -1: {
          / kty / 1: 2 / EC2 /,
          / crv / -1: 1 / P-256 /,
          / x / -2: h'BE4FB61E951F0378F453B610C91DDD29EF00CD36A0957F9686AC7D693E8880A3',
          / y / -3: h'0DF7D9253B34FC0247A11E15F20281680447896BE91B65E1D1E06D3E5FC57B0A'
        }
      },
      / payload: / h'32970E4511E3709F118B838C5EDD62A05A1421558CE56C20'
        / CEK encrypted with KEK /
    ]
  ]
])
]]></artwork></figure>

<t>The encrypted payload (with a line feed added) was:</t>

<figure><artwork><![CDATA[
9C09156CF4ACE0401086D98586E0B09FA5B5CF78F2BCCBF6C914DDB42BF0
E21E
]]></artwork></figure>

</section>
</section>
<section anchor="aes-ctr"><name>AES-CTR</name>

<t>Unlike AES-CBC, AES-CTR uses an IV per AES operation, as shown in <xref target="aes-ctr-fig"/>.
Hence, when an image is encrypted using AES-CTR-128 or AES-CTR-256, the IV MUST
start with zero (0) and MUST be incremented by one for each 16-byte plaintext block
within the entire slot.</t>

<t>Using the previous example with a slot size of 64 KiB, the sector size 4096 bytes and
the AES plaintext block size of 16 byte requires IVs from 0 to 255 in the first sector
and 16 * 256 IVs for the remaining sectors in the slot.</t>

<figure title="AES-CTR Operation" anchor="aes-ctr-fig"><artset><artwork  type="svg"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="320" width="248" viewBox="0 0 248 320" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 56,96 L 56,176" fill="none" stroke="black"/>
<path d="M 88,48 L 88,88" fill="none" stroke="black"/>
<path d="M 88,184 L 88,240" fill="none" stroke="black"/>
<path d="M 120,96 L 120,176" fill="none" stroke="black"/>
<path d="M 176,96 L 176,176" fill="none" stroke="black"/>
<path d="M 208,48 L 208,88" fill="none" stroke="black"/>
<path d="M 208,184 L 208,240" fill="none" stroke="black"/>
<path d="M 240,96 L 240,176" fill="none" stroke="black"/>
<path d="M 56,96 L 120,96" fill="none" stroke="black"/>
<path d="M 176,96 L 240,96" fill="none" stroke="black"/>
<path d="M 56,176 L 120,176" fill="none" stroke="black"/>
<path d="M 176,176 L 240,176" fill="none" stroke="black"/>
<path d="M 64,208 L 96,208" fill="none" stroke="black"/>
<path d="M 184,208 L 216,208" fill="none" stroke="black"/>
<g class="text">
<text x="88" y="36">IV1</text>
<text x="208" y="36">IV2</text>
<text x="40" y="148">k--</text>
<text x="80" y="148">E</text>
<text x="160" y="148">k--</text>
<text x="200" y="148">E</text>
<text x="52" y="212">P1</text>
<text x="172" y="212">P2</text>
<text x="92" y="260">C1</text>
<text x="212" y="260">C2</text>
<text x="32" y="292">Legend:</text>
<text x="32" y="308">See</text>
<text x="84" y="308">previous</text>
<text x="156" y="308">diagram.</text>
</g>
</svg>
</artwork><artwork  type="ascii-art"><![CDATA[
         IV1            IV2
          |              |
          |              |
          |              |
      +-------+      +-------+
      |       |      |       |
      |       |      |       |
   k--|  E    |   k--|  E    |
      |       |      |       |
      +-------+      +-------+
          |              |
     P1--(+)        P2--(+)
          |              |
          |              |
          C1             C2

Legend: 
  See previous diagram.
]]></artwork></artset></figure>

<section anchor="aes-kw-aes-ctr-example"><name>AES-KW + AES-CTR Example</name>

<t>This example uses the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm for payload encryption: AES-CTR-128
  <list style="symbols">
      <t>IV: h'93702C81590F845D9EC866CCAC767BD1'</t>
    </list></t>
  <t>Algorithm id for key wrap: A128KW</t>
  <t>KEK COSE_Key (Secret Key):
  <list style="symbols">
      <t>/ kty / 1: 4 / Symmetric /</t>
      <t>/ k / -1: 'aaaaaaaaaaaaaaaa'</t>
    </list></t>
  <t>KID: 'kid-1'</t>
  <t>Plaintext: "This is a real firmware image."
  <list style="symbols">
      <t>in hex: 546869732069732061207265616C206669726D7761726520696D6167652E</t>
    </list></t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608445A10139FFFDA1055093702C81590F845D9EC866CCAC767BD1F681
8341A0A2012204456B69642D315818CE34035CE5C2E2666E46D4C131FC56
1DD190A6D26CFA1990
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="aeskw-aesctr-example"/>.</t>

<figure title="COSE_Encrypt Example for AES Key Wrap" anchor="aeskw-aesctr-example"><artwork><![CDATA[
96([
  / protected: / << {
    / alg / 1: -65534 / A128CTR /
  } >>,
  / unprotected: / {
    / IV / 5: h'93702C81590F845D9EC866CCAC767BD1'
  },
  / payload: / null / detached ciphertext /,
  / recipients: / [
    [
      / protected: / << {
      } >>,
      / unprotected: / {
        / alg / 1: -3 / A128KW /,
        / kid / 4: 'kid-1'
      },
      / payload: /
        h'CE34035CE5C2E2666E46D4C131FC561DD190A6D26CFA1990'
        / CEK encrypted with KEK /
    ]
  ]
])
]]></artwork></figure>

<t>The encrypted payload (with a line feed added) was:</t>

<figure><artwork><![CDATA[
B74188DE68CD904873C7D4AB265A7F5608AC63F68DBBCE7773ADCB38DA07
]]></artwork></figure>

</section>
<section anchor="es-dh-aes-ctr-example"><name>ES-DH + AES-CTR Example</name>

<t>This example uses the following parameters:</t>

<t><list style="symbols">
  <t>Algorithm for payload encryption: AES-CTR-128
  <list style="symbols">
      <t>IV: h'DAE613B2E0DC55F4322BE38BDBA9DC68'</t>
    </list></t>
  <t>Algorithm for content key distribution: ECDH-ES + A128KW</t>
  <t>KEK COSE_Key (Receiver's Private Key):
  <list style="symbols">
      <t>/ kty / 1: 2 / EC2 /</t>
      <t>/ crv / -1: 1 / P-256 /</t>
      <t>/ x / -2: h'5886CD61DD875862E5AAA820E7A15274C968A9BC96048DDCACE32F50C3651BA3'</t>
      <t>/ y / -3: h'9EED8125E932CD60C0EAD3650D0A485CF726D378D1B016ED4298B2961E258F1B'</t>
      <t>/ d / -4: h'60FE6DD6D85D5740A5349B6F91267EEAC5BA81B8CB53EE249E4B4EB102C476B3'</t>
    </list></t>
  <t>KDF Context
  <list style="symbols">
      <t>ALgorithm ID: -3 (A128KW)</t>
      <t>SuppPubInfo
      <list style="symbols">
          <t>keyDataLength: 128</t>
          <t>protected = &lt;&lt; { / alg / 1: -3 / A128KW / } &gt;&gt;</t>
          <t>other = 'SUIT Payload Encryption'</t>
        </list></t>
    </list></t>
  <t>Plaintext: "This is a real firmware image."
  <list style="symbols">
      <t>in hex: 546869732069732061207265616C206669726D7761726520696D6167652E</t>
    </list></t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608445A10139FFFDA10550DAE613B2E0DC55F4322BE38BDBA9DC68F681
8344A101381CA120A401022001215820CB2A8EEAF7E260F02AD5C29E4608
939A6487E2172D239562819E5F52C6D34674225820FB6F870883864A9B14
828501FE47A4E9282A7065CD1C234E8A3BCE46F49A1A9F581818DC08054C
462C7977EE90FA2B9DE62FF6D42E398CEE8168
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a diagnostic format is shown in
<xref target="esdh-aesctr-example"/>. Note that the COSE_Encrypt structure also needs to
be protected and authenticated by the suit-authentication-wrapper,
which is not shown below.</t>

<figure title="COSE_Encrypt Example for ES-DH" anchor="esdh-aesctr-example"><artwork><![CDATA[
96([
  / protected: / << {
    / alg / 1: -65534 / A128CTR /
  } >>,
  / unprotected: / {
    / IV / 5: h'DAE613B2E0DC55F4322BE38BDBA9DC68'
  },
  / payload: / null / detached ciphertext /,
  / recipients: / [
    [
      / protected: / << {
        / alg / 1: -29 / ECDH-ES + A128KW /
      } >>,
      / unprotected: / {
        / ephemeral key / -1: {
          / kty / 1: 2 / EC2 /,
          / crv / -1: 1 / P-256 /,
          / x / -2: h'CB2A8EEAF7E260F02AD5C29E4608939A6487E2172D239562819E5F52C6D34674',
          / y / -3: h'FB6F870883864A9B14828501FE47A4E9282A7065CD1C234E8A3BCE46F49A1A9F'
        }
      },
      / payload: / h'18DC08054C462C7977EE90FA2B9DE62FF6D42E398CEE8168'
        / CEK encrypted with KEK /
    ]
  ]
])
]]></artwork></figure>

<t>The encrypted payload (with a line feed added) was:</t>

<figure><artwork><![CDATA[
2BB8DB522AE978246CC775C3B0241BD4B0333FFDD2DB70C7EE7A4966E3B7
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="complete-examples"><name>Complete Examples</name>

<t>The following manifests exemplify how to deliver encrypted payload and its
encryption info to devices.</t>

<t>HMAC-256 MAC are added in AES-KW examples using the following secret key:</t>

<figure><artwork><![CDATA[
  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
  (616161... in hex, and its length is 32)
]]></artwork></figure>

<t>ES-DH examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA-256 as the digest function.</t>

<section anchor="example-AES-KW-write"><name>AES Key Wrap Example with Write Directive</name>

<t>The following SUIT manifest requests a parser
to authenticate the manifest with COSE_Mac0 HMAC256,
and to write and to decrypt the
encrypted payload into a component with the suit-directive-write
directive.</t>

<t>The SUIT manifest in diagnostic notation (with line breaks added
for readability) is shown here:</t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'536EC695E423342FF57FA89B3E3C12C0
                          F9257992F7D96F017281782D2DF1C50F'
    ] >>,
    << / COSE_Mac0_Tagged / 17([
      / protected: / << {
        / algorithm-id / 1: 5 / HMAC256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / tag: / h'3B70571169B0FEE5E6220BF86E5E973F
                 7F32875495908EDAA91EC994BCA44B29'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 1,
    / common / 3: << {
      / components / 2: [
        ['plaintext-firmware']
      ]
    } >>,
    / install / 17: << [
      / fetch encrypted firmware /
      / directive-override-parameters / 20, {
        / parameter-content / 18:
          h'2F59C3A34D9570FB99A5382E66466A3221A8AD85CE508B
            A306FB431A60EFA5AAAA078355070205A4B196832DF17F',
        / parameter-encryption-info / 19: << 96([
          / protected: / << {
            / alg / 1: 1 / AES-GCM-128 /
          } >>,
          / unprotected: / {
            / IV / 5: h'F14AAB9D81D51F7AD943FE87AF4F70CD'
          },
          / payload: / null / detached ciphertext /,
          / recipients: / [
            [
              / protected: / << {
              } >>,
              / unprotected: / {
                / alg / 1: -3 / A128KW /,
                / kid / 4: 'kid-1'
              },
              / payload: /
                h'75603FFC9518D794713C8CA8A115A7FB32565A6D59534D62'
                / CEK encrypted with KEK /
            ]
          ]
        ]) >>
      },

      / decrypt encrypted firmware /
      / directive-write / 18, 15
        / consumes the SUIT_Encryption_Info above /
    ] >>
  } >>
})
]]></artwork></figure>

<t>In hex format, the SUIT manifest is this:</t>

<figure><artwork><![CDATA[
D86BA2025853825824822F5820536EC695E423342FF57FA89B3E3C12C0F9
257992F7D96F017281782D2DF1C50F582AD18443A10105A0F658203B7057
1169B0FEE5E6220BF86E5E973F7F32875495908EDAA91EC994BCA44B2903
589DA4010102010357A102818152706C61696E746578742D6669726D7761
726511587C8414A212582E2F59C3A34D9570FB99A5382E66466A3221A8AD
85CE508BA306FB431A60EFA5AAAA078355070205A4B196832DF17F135843
D8608443A10101A10550F14AAB9D81D51F7AD943FE87AF4F70CDF6818341
A0A2012204456B69642D31581875603FFC9518D794713C8CA8A115A7FB32
565A6D59534D62120F
]]></artwork></figure>

</section>
<section anchor="example-AES-KW-copy"><name>AES Key Wrap Example with Fetch + Copy Directives</name>

<t>The following SUIT manifest requests a parser to fetch the encrypted
payload and to stores it. Then, the payload is decrypted and stored into
another component with the suit-directive-copy directive. This approach
works well on constrained devices with execute-in-place flash memory.</t>

<t>The SUIT manifest in diagnostic notation (with line breaks added for
readability) is shown here:</t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'AAB6A7868C4E43D5983BDE019EF22779
                          21F6F8EF1FCAF9403CA97255BED2CD30'
    ] >>,
    << / COSE_Mac0_Tagged / 17([
      / protected: / << {
        / algorithm-id / 1: 5 / HMAC256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / tag: / h'93B4B774A5D0421ED6FB5EBF890A284C
                 DAC7816CBC048BF47EE7FA7FF3BC02C3'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 1,
    / common / 3: << {
      / components / 2: [
        ['plaintext-firmware'],
        ['encrypted-firmware']
      ]
    } >>,
    / install / 17: << [
      / fetch encrypted firmware /
      / directive-set-component-index / 12, 1 / ['encrypted-firmware'] /,
      / directive-override-parameters / 20, {
        / parameter-image-size / 14: 46,
        / parameter-uri / 21: "https://example.com/encrypted-firmware"
      },
      / directive-fetch / 21, 15,

      / decrypt encrypted firmware /
      / directive-set-component-index / 12, 0 / ['plaintext-firmware'] /,
      / directive-override-parameters / 20, {
        / parameter-encryption-info / 19: << 96([
          / protected: / << {
            / alg / 1: 1 / AES-GCM-128 /
          } >>,
          / unprotected: / {
            / IV / 5: h'F14AAB9D81D51F7AD943FE87AF4F70CD'
          },
          / payload: / null / detached ciphertext /,
          / recipients: / [
            [
              / protected: / << {
              } >>,
              / unprotected: / {
                / alg / 1: -3 / A128KW /,
                / kid / 4: 'kid-1'
              },
              / payload: /
                h'75603FFC9518D794713C8CA8A115A7FB32565A6D59534D62'
                / CEK encrypted with KEK /
            ]
          ]
        ]) >>,
        / parameter-source-component / 22: 1 / ['encrypted-firmware'] /
      },
      / directive-copy / 22, 15 / consumes the SUIT_Encryption_Info above /
    ] >>
  } >>
})
]]></artwork></figure>

<t>In hex format, the SUIT manifest is this:</t>

<figure><artwork><![CDATA[
D86BA2025853825824822F5820AAB6A7868C4E43D5983BDE019EF2277921
F6F8EF1FCAF9403CA97255BED2CD30582AD18443A10105A0F6582093B4B7
74A5D0421ED6FB5EBF890A284CDAC7816CBC048BF47EE7FA7FF3BC02C303
58B7A40101020103582BA102828152706C61696E746578742D6669726D77
6172658152656E637279707465642D6669726D776172651158818C0C0114
A20E182E15782668747470733A2F2F6578616D706C652E636F6D2F656E63
7279707465642D6669726D77617265150F0C0014A2135843D8608443A101
01A10550F14AAB9D81D51F7AD943FE87AF4F70CDF6818341A0A201220445
6B69642D31581875603FFC9518D794713C8CA8A115A7FB32565A6D59534D
621601160F
]]></artwork></figure>

</section>
<section anchor="example-ES-DH-write"><name>ES-DH Example with Write + Copy Directives</name>

<t>The following SUIT manifest requests a parser to authenticate
the manifest with COSE_Sign1 ES256,
and to write and to decrypt the
encrypted payload into a component with the suit-directive-write
directive.</t>

<t>The SUIT manifest in diagnostic notation (with line breaks added for
readability) is shown here:</t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'CEF034223D7F2C39D676876995B4ED4E
                          8221AC5BF184B6606EE62C41C149C266'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: /
        h'65E59AAB8A35BDE9547458316D1C769F
          FB2CEA304C9FB6151E5C8A88A002A292
          C5B8C63C81B5AC0AE31948B610834E12
          CBDBB2753EA221544B6733076A92EE20'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 1,
    / common / 3: << {
      / components / 2: [
        ['decrypted-firmware']
      ]
    } >>,
    / install / 17: << [
      / directive-set-component-index / 12, 0
        / ['plaintext-firmware'] /,
      / directive-override-parameters / 20, {
        / parameter-content / 18:
          h'344FA2D5AD2F43F6F363DA6FF2C337FE69E33E3D63714D
            23985BF02499EB0E8B231D45C378245DA3611C160CC511',
        / parameter-encryption-info / 19: << 96([
          / protected: / << {
            / alg / 1: 1 / AES-GCM-128 /
          } >>,
          / unprotected: / {
            / IV / 5: h'DAE613B2E0DC55F4322BE38BDBA9DC68'
          },
          / payload: / null / detached ciphertext /,
          / recipients: / [
            [
              / protected: / << {
                / alg / 1: -29 / ECDH-ES + A128KW /
              } >>,
              / unprotected: / {
                / ephemeral key / -1: {
                  / kty / 1: 2 / EC2 /,
                  / crv / -1: 1 / P-256 /,
                  / x / -2: h'FF6E266DABAF51B7207569E31CF72646
                              183E94CEE64FCDC8695AD9A505AEFDEA',
                  / y / -3: h'5FBC4A29844450B3AC22AB30C7F7004B
                              B59D8BD60D7997734A9FA0124B650895'
                },
                / kid / 4: 'kid-2'
              },
              / payload: /
                h'B0E21628283F3E409F8158D8FFCA567F340E379AC39E49C9'
                / CEK encrypted with KEK /
            ]
          ]
        ]) >>
      },
      / directive-write / 18, 15
        / consumes the SUIT_Encryption_Info above /
    ] >>
  } >>
})
]]></artwork></figure>

<t>In hex format, the SUIT manifest is this:</t>

<figure><artwork><![CDATA[
D86BA2025873825824822F5820CEF034223D7F2C39D676876995B4ED4E82
21AC5BF184B6606EE62C41C149C266584AD28443A10126A0F6584065E59A
AB8A35BDE9547458316D1C769FFB2CEA304C9FB6151E5C8A88A002A292C5
B8C63C81B5AC0AE31948B610834E12CBDBB2753EA221544B6733076A92EE
200358ECA4010102010357A1028181526465637279707465642D6669726D
776172651158CB860C0014A212582E344FA2D5AD2F43F6F363DA6FF2C337
FE69E33E3D63714D23985BF02499EB0E8B231D45C378245DA3611C160CC5
11135890D8608443A10101A10550DAE613B2E0DC55F4322BE38BDBA9DC68
F6818344A101381CA220A401022001215820FF6E266DABAF51B7207569E3
1CF72646183E94CEE64FCDC8695AD9A505AEFDEA2258205FBC4A29844450
B3AC22AB30C7F7004BB59D8BD60D7997734A9FA0124B65089504456B6964
2D325818B0E21628283F3E409F8158D8FFCA567F340E379AC39E49C9120F
]]></artwork></figure>

</section>
<section anchor="example-ES-DH-dependency"><name>ES-DH Example with Dependency</name>

<t>The following SUIT manifest requests a parser
to resolve the delegation chain and dependency respectively.
The parser validates the COSE_Key in the suit-delegation section using the key above,
and then dynamically trusts it.
The dependency manifest is embedded as an integrated-dependency
and referred by uri "#dependency-manifest" .</t>

<t>The SUIT manifest in diagnostic notation (with line breaks added for
readability) is shown here:</t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / delegation / 1: << [
    [
      / NOTE: signed by trust anchor /
      << 18([
        / protected: / << {
          / alg / 1: -7 / ES256 /
        } >>,
        / unprotected / {
        },
        / payload: / << {
          / cnf / 8: {
            / NOTE: public key of delegated authority /
            / COSE_Key / 1: {
              / kty / 1: 2 / EC2 /,
              / crv / -1: 1 / P-256 /,
              / x / -2: h'0E908AA8F066DB1F084E0C3652C63952
                          BD99F2A5BDB22F9E01367AAD03ABA68B',
              / y / -3: h'77DA1BD8AC4F0CB490BA210648BF79AB
                          164D49AD3551D71D314B2749EE42D29A'
            }
          }
        } >>,
        / signature: /
          h'FB2D5ACF66B9C8573CE92E13BFB8D113
            F798715CC10B5A0010B11925C155E724
            5A64E131073B87AC50CAC71650A21315
            B82D06CA2298CD1A95519AAE4C4B5315'
      ]) >>
    ]
  ] >>,
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: / h'6A1D9F42E7B4047D2F54046019AE3ED4
                          3A8ACC467AC16576B17D6F8E633042D2'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: /
        h'DF493BDBF167EFFB40593C5910D33B66
          429721467DF05800EA66A88B91729CD5
          1007981F151FC324745FF43E6F75AAF5
          197DD5EC4AA6BCEFCE43E4B1E35C948E'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 1,
    / common / 3: << {
      / dependencies / 1: {
        / component-index / 1: {
          / dependency-prefix / 1: [
             'dependency-manifest.suit'
          ]
        }
      },
      / components / 2: [
        ['decrypted-firmware']
      ]
    } >>,
    / manifest-component-id / 5: [
      'dependent-manifest.suit'
    ],
    / install / 17: << [
      / NOTE: set SUIT_Encryption_Info /
      / directive-set-component-index / 12, 0
        / ['decrypted-firmware'] /,
      / directive-override-parameters / 20, {
        / parameter-content / 18:
          h'344FA2D5AD2F43F6F363DA6FF2C337FE69E33E3D63714D
            23985BF02499EB0E8B231D45C378245DA3611C160CC511',
        / parameter-encryption-info / 19: << 96([
          / protected: / << {
            / alg / 1: 1 / AES-GCM-128 /
          } >>,
          / unprotected: / {
            / IV / 5: h'DAE613B2E0DC55F4322BE38BDBA9DC68'
          },
          / payload: / null / detached ciphertext /,
          / recipients: / [
            [
              / protected: / << {
                / alg / 1: -29 / ECDH-ES + A128KW /
              } >>,
              / unprotected: / {
                / ephemeral key / -1: {
                  / kty / 1: 2 / EC2 /,
                  / crv / -1: 1 / P-256 /,
                  / x / -2: h'FF6E266DABAF51B7207569E31CF72646
                              183E94CEE64FCDC8695AD9A505AEFDEA',
                  / y / -3: h'5FBC4A29844450B3AC22AB30C7F7004B
                              B59D8BD60D7997734A9FA0124B650895'
                },
                / kid / 4: 'kid-2'
              },
              / payload: /
                h'B0E21628283F3E409F8158D8FFCA567F340E379AC39E49C9'
                / CEK encrypted with KEK /
            ]
          ]
        ]) >>
      },

      / NOTE: call dependency-manifest /
      / directive-set-component-index / 12, 1
        / ['dependenty-manifest.suit'] /,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / algorithm-id / -16 / SHA256 /,
          / digest-bytes / h'1051324059C5193317CAC9A099BBC0B6
                             AFB56184C04277F566A3A4131F4A1C25'
        ] >>,
        / parameter-image-size / 14: 247,
        / parameter-uri / 21: "#dependency-manifest"
      },
      / directive-fetch / 21, 15,
      / condition-dependency-integrity / 7, 15,
      / directive-process-dependency / 11, 15
    ] >>
  } >>,
  "#dependency-manifest": <<
    / SUIT_Envelope_Tagged / 107({
      / authentication-wrapper / 2: << [
        << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: / h'1051324059C5193317CAC9A099BBC0B6
                              AFB56184C04277F566A3A4131F4A1C25'
        ] >>,
        << / COSE_Sign1_Tagged / 18([
          / protected: / << {
            / algorithm-id / 1: -7 / ES256 /
          } >>,
          / unprotected: / {},
          / payload: / null,
          / signature: /
            h'55990F3745DC4F200FF946643A6DE30D
              DCE57B080B7D68DE9896D8190B9A63E2
              D60E7C3D9693B67221AA6D07BBF0AB45
              314C236827A242C22B5E688DDC467269'
        ]) >>
      ] >>,
      / manifest / 3: << {
        / manifest-version / 1: 1,
        / manifest-sequence-number / 2: 1,
        / common / 3: << {
          / components / 2: [
            ['decrypted-firmware']
          ],
          / shared-sequence / 4: << [
            / directive-set-componnt-index / 12, 0
              / ['decrypted-firmware'] /,
            / directive-override-parameters / 20, {
              / parameter-image-digest / 3: << [
                / algorithm-id / -16 / SHA256 /,
                / digest-bytes / h'36921488FE6680712F734E11F58D87EE
                                   B66D4B21A8A1AD3441060814DA16D50F'
              ] >>,
              / parameter-image-size / 14: 30
            }
          ] >>
        } >>,
        / manifest-component-id / 5: [
          'dependency-manifest.suit'
        ],
        / validate / 7: << [
          / condition-image-match / 3, 15
        ] >>,
        / install / 17: << [
          / directive-set-component-index / 12, 0
            / ['decrypted-firmware'] /,
          / directive-write / 18, 15
            / consumes the SUIT_Encryption_Info set by dependent /,
          / condition-image-match / 3, 15
            / check the integrity of the decrypted payload /
        ] >>
      } >>
    })
  >>
})
]]></artwork></figure>

<t>In hex format, the SUIT manifest is this:</t>

<figure><artwork><![CDATA[
D86BA401589E8181589AD28443A10126A0584FA108A101A4010220012158
200E908AA8F066DB1F084E0C3652C63952BD99F2A5BDB22F9E01367AAD03
ABA68B22582077DA1BD8AC4F0CB490BA210648BF79AB164D49AD3551D71D
314B2749EE42D29A5840FB2D5ACF66B9C8573CE92E13BFB8D113F798715C
C10B5A0010B11925C155E7245A64E131073B87AC50CAC71650A21315B82D
06CA2298CD1A95519AAE4C4B5315025873825824822F58206A1D9F42E7B4
047D2F54046019AE3ED43A8ACC467AC16576B17D6F8E633042D2584AD284
43A10126A0F65840DF493BDBF167EFFB40593C5910D33B66429721467DF0
5800EA66A88B91729CD51007981F151FC324745FF43E6F75AAF5197DD5EC
4AA6BCEFCE43E4B1E35C948E03590170A501010201035837A201A101A101
815818646570656E64656E63792D6D616E69666573742E73756974028181
526465637279707465642D6669726D77617265058157646570656E64656E
742D6D616E69666573742E73756974115901138E0C0014A212582E344FA2
D5AD2F43F6F363DA6FF2C337FE69E33E3D63714D23985BF02499EB0E8B23
1D45C378245DA3611C160CC511135890D8608443A10101A10550DAE613B2
E0DC55F4322BE38BDBA9DC68F6818344A101381CA220A401022001215820
FF6E266DABAF51B7207569E31CF72646183E94CEE64FCDC8695AD9A505AE
FDEA2258205FBC4A29844450B3AC22AB30C7F7004BB59D8BD60D7997734A
9FA0124B65089504456B69642D325818B0E21628283F3E409F8158D8FFCA
567F340E379AC39E49C90C0114A3035824822F58201051324059C5193317
CAC9A099BBC0B6AFB56184C04277F566A3A4131F4A1C250E18F715742364
6570656E64656E63792D6D616E6966657374150F070F0B0F742364657065
6E64656E63792D6D616E696665737458F7D86BA2025873825824822F5820
1051324059C5193317CAC9A099BBC0B6AFB56184C04277F566A3A4131F4A
1C25584AD28443A10126A0F6584055990F3745DC4F200FF946643A6DE30D
DCE57B080B7D68DE9896D8190B9A63E2D60E7C3D9693B67221AA6D07BBF0
AB45314C236827A242C22B5E688DDC46726903587BA601010201035849A2
028181526465637279707465642D6669726D7761726504582F840C0014A2
035824822F582036921488FE6680712F734E11F58D87EEB66D4B21A8A1AD
3441060814DA16D50F0E181E05815818646570656E64656E63792D6D616E
69666573742E73756974074382030F1147860C00120F030F
]]></artwork></figure>

</section>
</section>
<section anchor="operational-considerations"><name>Operational Considerations</name>

<t>The algorithms described in this document assume that the party
performing payload encryption</t>

<t><list style="symbols">
  <t>shares a key-encryption key (KEK) with the recipient
(for use with the AES Key Wrap scheme), or</t>
  <t>is in possession of the public key of the recipient
(for use with ES-DH).</t>
</list></t>

<t>Both cases require some upfront communication interaction
to distribute these keys to the involved communication parties.
This interaction may be provided by a device management protocol,
as described in <xref target="RFC9019"/>, or may be executed earlier in
the lifecycle of the device, for example during manufacturing
or during commissioning. In addition to the keying material
key identifiers and algorithm information need to be provisioned.
This specification places no requirements on the structure of the
key identifier.</t>

<t>In some cases third party companies analyse binaries for known
security vulnerabilities. With encrypted payloads, this type of
analysis is prevented. Consequently, these third party companies
either need to be given access to the plaintext binary before
encryption or they need to become authorized recipients of the
encrypted payloads. In either case, it is necessary to explicitly
consider those third parties in the software supply chain when
such a binary analysis is desired.</t>

</section>
<section anchor="sec-cons"><name>Security Considerations</name>

<t>This entire document is about security.</t>

<t>It is good security practise to use different keys for different purpose.
For example, the KEK used with an AES-KW-based content key distribution
method for encryption should be different from the long-term symmetric key
used for authentication in a communication security protocol.</t>

<t>To further reduce the attack surface it may be beneficial use different
long-term keys for the encryption of different types of payloads. For
example, KEK_1 may be used with an AES-KW content key distribution method
to encrypt a firmware image while KEK_2 would be used to encrypt
configuration data.</t>

<t>A large part of this document is focused on the content key distribution and
two methods are utilized, namely AES Key Wrap (AES-KW) and Ephemeral-Static
Diffie-Hellman (ES-DH). In this table we summarize the main properties with
respect to their deployment:</t>

<figure><artset><artwork  type="svg"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="464" width="520" viewBox="0 0 520 464" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,448" fill="none" stroke="black"/>
<path d="M 136,32 L 136,448" fill="none" stroke="black"/>
<path d="M 144,32 L 144,448" fill="none" stroke="black"/>
<path d="M 248,32 L 248,448" fill="none" stroke="black"/>
<path d="M 376,32 L 376,448" fill="none" stroke="black"/>
<path d="M 512,32 L 512,448" fill="none" stroke="black"/>
<path d="M 8,32 L 512,32" fill="none" stroke="black"/>
<path d="M 8,128 L 512,128" fill="none" stroke="black"/>
<path d="M 8,272 L 512,272" fill="none" stroke="black"/>
<path d="M 8,368 L 512,368" fill="none" stroke="black"/>
<path d="M 8,448 L 512,448" fill="none" stroke="black"/>
<path d="M 128,32 C 136.83064,32 144,39.16936 144,48" fill="none" stroke="black"/>
<path d="M 152,32 C 143.16936,32 136,39.16936 136,48" fill="none" stroke="black"/>
<path d="M 128,128 C 136.83064,128 144,135.16936 144,144" fill="none" stroke="black"/>
<path d="M 128,128 C 136.83064,128 144,120.83064 144,112" fill="none" stroke="black"/>
<path d="M 152,128 C 143.16936,128 136,135.16936 136,144" fill="none" stroke="black"/>
<path d="M 152,128 C 143.16936,128 136,120.83064 136,112" fill="none" stroke="black"/>
<path d="M 128,272 C 136.83064,272 144,279.16936 144,288" fill="none" stroke="black"/>
<path d="M 128,272 C 136.83064,272 144,264.83064 144,256" fill="none" stroke="black"/>
<path d="M 152,272 C 143.16936,272 136,279.16936 136,288" fill="none" stroke="black"/>
<path d="M 152,272 C 143.16936,272 136,264.83064 136,256" fill="none" stroke="black"/>
<path d="M 128,368 C 136.83064,368 144,375.16936 144,384" fill="none" stroke="black"/>
<path d="M 128,368 C 136.83064,368 144,360.83064 144,352" fill="none" stroke="black"/>
<path d="M 152,368 C 143.16936,368 136,375.16936 136,384" fill="none" stroke="black"/>
<path d="M 152,368 C 143.16936,368 136,360.83064 136,352" fill="none" stroke="black"/>
<path d="M 128,448 C 136.83064,448 144,440.83064 144,432" fill="none" stroke="black"/>
<path d="M 152,448 C 143.16936,448 136,440.83064 136,432" fill="none" stroke="black"/>
<g class="text">
<text x="52" y="68">Number</text>
<text x="92" y="68">of</text>
<text x="180" y="68">Same</text>
<text x="216" y="68">key</text>
<text x="280" y="68">One</text>
<text x="312" y="68">key</text>
<text x="408" y="68">One</text>
<text x="440" y="68">Key</text>
<text x="64" y="84">Long-Term</text>
<text x="176" y="84">for</text>
<text x="208" y="84">all</text>
<text x="280" y="84">per</text>
<text x="324" y="84">device</text>
<text x="408" y="84">per</text>
<text x="452" y="84">device</text>
<text x="44" y="100">Keys</text>
<text x="192" y="100">devices</text>
<text x="52" y="164">Number</text>
<text x="92" y="164">of</text>
<text x="188" y="164">Single</text>
<text x="292" y="164">Single</text>
<text x="408" y="164">One</text>
<text x="440" y="164">CEK</text>
<text x="56" y="180">Content</text>
<text x="176" y="180">CEK</text>
<text x="208" y="180">per</text>
<text x="280" y="180">CEK</text>
<text x="312" y="180">per</text>
<text x="408" y="180">per</text>
<text x="456" y="180">payload</text>
<text x="68" y="196">Encryption</text>
<text x="192" y="196">payload</text>
<text x="296" y="196">payload</text>
<text x="436" y="196">encryption</text>
<text x="44" y="212">Keys</text>
<text x="92" y="212">(CEKs)</text>
<text x="188" y="212">shared</text>
<text x="292" y="212">shared</text>
<text x="440" y="212">transaction</text>
<text x="180" y="228">with</text>
<text x="216" y="228">all</text>
<text x="284" y="228">with</text>
<text x="320" y="228">all</text>
<text x="408" y="228">per</text>
<text x="452" y="228">device</text>
<text x="188" y="244">devies</text>
<text x="292" y="244">devies</text>
<text x="40" y="308">Use</text>
<text x="76" y="308">Case</text>
<text x="188" y="308">Legacy</text>
<text x="304" y="308">Efficient</text>
<text x="432" y="308">Point-to-</text>
<text x="184" y="324">Usage</text>
<text x="296" y="324">Payload</text>
<text x="416" y="324">Point</text>
<text x="472" y="324">Payload</text>
<text x="316" y="340">Distribution</text>
<text x="444" y="340">Distribution</text>
<text x="76" y="404">Recommended?</text>
<text x="176" y="404">No,</text>
<text x="208" y="404">bad</text>
<text x="280" y="404">Yes</text>
<text x="408" y="404">Yes</text>
<text x="196" y="420">practice</text>
</g>
</svg>
</artwork><artwork  type="ascii-art"><![CDATA[
+---------------++------------+---------------+----------------+
|               ||            |               |                |
|  Number of    ||  Same key  |  One key      |  One Key       |
|  Long-Term    ||  for all   |  per device   |  per device    |
|  Keys         ||  devices   |               |                |
|               ||            |               |                |
+---------------++------------+---------------+----------------+
|               ||            |               |                |
|  Number of    ||  Single    |  Single       |  One CEK       |
|  Content      ||  CEK per   |  CEK per      |  per payload   |
|  Encryption   ||  payload   |  payload      |  encryption    |
|  Keys (CEKs)  ||  shared    |  shared       |  transaction   |
|               ||  with all  |  with all     |  per device    |
|               ||  devies    |  devies       |                |
|               ||            |               |                |
+---------------++------------+---------------+----------------+
|               ||            |               |                |
|  Use Case     ||  Legacy    |  Efficient    |  Point-to-     |
|               ||  Usage     |  Payload      |  Point Payload |
|               ||            |  Distribution |  Distribution  |
|               ||            |               |                |
+---------------++------------+---------------+----------------+
|               ||            |               |                |
|  Recommended? ||  No, bad   |  Yes          |  Yes           |
|               ||  practice  |               |                |
|               ||            |               |                |
+---------------++------------+---------------+----------------+
]]></artwork></artset></figure>

<t>The use of firmware encryption with IoT devices introduces an battery
exhaustion attack. This attack utilizes the fact that flash memory
operations are energy-expensive. To perform this attacker, the adversary
needs to be able to swap detached payloads and force the device to process
a wrong payload. Swapping the payloads is only possible when there is no
communication security protocol in place between the device and the
distribution system or when the distribution system itself is compromised.
The security features provided by the manifest will detect this attack and
the device will not boot the incorrectly provided payload. However, at this
time the energy-expensive flash operations have already been performed.
Consequently, these operations may reduce the lifetime of devices and
battery powered IoT devices are particularly vulnerable to such an attack.
See <xref target="flash"/> for further discussion about IoT devices using flash memory.</t>

<t>Including the digest of the encrypted payload in the manifest allows the
device to detect a battery exhaustion attack before energy consuming decryption
and flash memory copy or swap operations took place. When battery exhaustion
attacks are not a concern, it is adequate to use the digest of the plaintet
payload instead.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>IANA is asked to add the following value to the SUIT Parameters
registry established by Section 11.5 of <xref target="I-D.ietf-suit-manifest"/>:</t>

<figure><artwork><![CDATA[
Label      Name                 Reference
-----------------------------------------
TBD19      Encryption Info      Section 4
]]></artwork></figure>

<t>[Editor's Note: TBD19: Proposed 19]</t>

</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC3394">
  <front>
    <title>Advanced Encryption Standard (AES) Key Wrap Algorithm</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <date month="September" year="2002"/>
  </front>
  <seriesInfo name="RFC" value="3394"/>
  <seriesInfo name="DOI" value="10.17487/RFC3394"/>
</reference>

<reference anchor="RFC9052">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
      <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="96"/>
  <seriesInfo name="RFC" value="9052"/>
  <seriesInfo name="DOI" value="10.17487/RFC9052"/>
</reference>

<reference anchor="RFC9053">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052).</t>
      <t>This document, along with RFC 9052, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9053"/>
  <seriesInfo name="DOI" value="10.17487/RFC9053"/>
</reference>

<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>


<reference anchor="I-D.ietf-suit-manifest">
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname="Brendan Moran" initials="B." surname="Moran">
         <organization>Arm Limited</organization>
      </author>
      <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
      <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
         <organization>Inria</organization>
      </author>
      <author fullname="Ãyvind RÃ¸nningstad" initials="O." surname="RÃ¸nningstad">
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day="23" month="October" year="2023"/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-24"/>
   
</reference>

<reference anchor="RFC9459">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): AES-CTR and AES-CBC</title>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <date month="September" year="2023"/>
    <abstract>
      <t>The Concise Binary Object Representation (CBOR) data format is designed for small code size and small message size. CBOR Object Signing and Encryption (COSE) is specified in RFC 9052 to provide basic security services using the CBOR data format. This document specifies the conventions for using AES-CTR and AES-CBC as content encryption algorithms with COSE.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9459"/>
  <seriesInfo name="DOI" value="10.17487/RFC9459"/>
</reference>


<reference anchor="I-D.ietf-suit-trust-domains">
   <front>
      <title>SUIT Manifest Extensions for Multiple Trust Domains</title>
      <author fullname="Brendan Moran" initials="B." surname="Moran">
         <organization>Arm Limited</organization>
      </author>
      <author fullname="Ken Takayama" initials="K." surname="Takayama">
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day="11" month="September" year="2023"/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT Manifest format
   (as defined in [I-D.ietf-suit-manifest]) for use in deployments with
   multiple trust domains.  A device has more than one trust domain when
   it enables delegation of different rights to mutually distrusting
   entities for use for different purposes or Components in the context
   of firmware or software update.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-trust-domains-05"/>
   
</reference>




    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC9019">
  <front>
    <title>A Firmware Update Architecture for Internet of Things</title>
    <author fullname="B. Moran" initials="B." surname="Moran"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="D. Brown" initials="D." surname="Brown"/>
    <author fullname="M. Meriac" initials="M." surname="Meriac"/>
    <date month="April" year="2021"/>
    <abstract>
      <t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t>
      <t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9019"/>
  <seriesInfo name="DOI" value="10.17487/RFC9019"/>
</reference>

<reference anchor="RFC9124">
  <front>
    <title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
    <author fullname="B. Moran" initials="B." surname="Moran"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
    <date month="January" year="2022"/>
    <abstract>
      <t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t>
      <t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9124"/>
  <seriesInfo name="DOI" value="10.17487/RFC9124"/>
</reference>

<reference anchor="RFC8937">
  <front>
    <title>Randomness Improvements for Security Protocols</title>
    <author fullname="C. Cremers" initials="C." surname="Cremers"/>
    <author fullname="L. Garratt" initials="L." surname="Garratt"/>
    <author fullname="S. Smyshlyaev" initials="S." surname="Smyshlyaev"/>
    <author fullname="N. Sullivan" initials="N." surname="Sullivan"/>
    <author fullname="C. Wood" initials="C." surname="Wood"/>
    <date month="October" year="2020"/>
    <abstract>
      <t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols. Weak or predictable "cryptographically secure" pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t>
      <t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8937"/>
  <seriesInfo name="DOI" value="10.17487/RFC8937"/>
</reference>

<reference anchor="RFC5652">
  <front>
    <title>Cryptographic Message Syntax (CMS)</title>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <date month="September" year="2009"/>
    <abstract>
      <t>This document describes the Cryptographic Message Syntax (CMS). This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="70"/>
  <seriesInfo name="RFC" value="5652"/>
  <seriesInfo name="DOI" value="10.17487/RFC5652"/>
</reference>

<reference anchor="RFC5280">
  <front>
    <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
    <author fullname="D. Cooper" initials="D." surname="Cooper"/>
    <author fullname="S. Santesson" initials="S." surname="Santesson"/>
    <author fullname="S. Farrell" initials="S." surname="Farrell"/>
    <author fullname="S. Boeyen" initials="S." surname="Boeyen"/>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <author fullname="W. Polk" initials="W." surname="Polk"/>
    <date month="May" year="2008"/>
    <abstract>
      <t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet. An overview of this approach and model is provided as an introduction. The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms. Standard certificate extensions are described and two Internet-specific extensions are defined. A set of required certificate extensions is specified. The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions. An algorithm for X.509 certification path validation is described. An ASN.1 module and examples are provided in the appendices. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5280"/>
  <seriesInfo name="DOI" value="10.17487/RFC5280"/>
</reference>

<reference anchor="RFC5869">
  <front>
    <title>HMAC-based Extract-and-Expand Key Derivation Function (HKDF)</title>
    <author fullname="H. Krawczyk" initials="H." surname="Krawczyk"/>
    <author fullname="P. Eronen" initials="P." surname="Eronen"/>
    <date month="May" year="2010"/>
    <abstract>
      <t>This document specifies a simple Hashed Message Authentication Code (HMAC)-based key derivation function (HKDF), which can be used as a building block in various protocols and applications. The key derivation function (KDF) is intended to support a wide range of applications and requirements, and is conservative in its use of cryptographic hash functions. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5869"/>
  <seriesInfo name="DOI" value="10.17487/RFC5869"/>
</reference>


<reference anchor="iana-suit" target="TBD">
  <front>
    <title>IANA SUIT Manifest Registry</title>
    <author >
      <organization>Internet Assigned Numbers Authority</organization>
    </author>
    <date year="2023"/>
  </front>
</reference>
<reference anchor="ROP" target="https://en.wikipedia.org/wiki/Return-oriented_programming">
  <front>
    <title>Return-Oriented Programming</title>
    <author >
      <organization>Wikipedia</organization>
    </author>
    <date year="2023" month="March"/>
  </front>
</reference>
<reference anchor="SP800-56" target="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Ar3.pdf">
  <front>
    <title>Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography, NIST Special Publication 800-56A Revision 3</title>
    <author >
      <organization>NIST</organization>
    </author>
    <date year="2018" month="April"/>
  </front>
</reference>


    </references>


<?line 2013?>

<section anchor="full-cddl"><name>Full CDDL</name>

<t>The following CDDL must be appended to the SUIT Manifest CDDL. The SUIT CDDL is defined in
Appendix A of <xref target="I-D.ietf-suit-manifest"/></t>

<figure><sourcecode type="CDDL"><![CDATA[
; Define SUIT_Encryption_Info_* as a subset of COSE_Encrypt

SUIT_Encryption_Info = #6.96(
    SUIT_Encryption_Info_AESKW .within COSE_Encrypt /
    SUIT_Encryption_Info_ESDH .within COSE_Encrypt)

SUIT_Encryption_Info_AESKW = [
  protected   : bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : bstr / nil,
  recipients  : [ + COSE_recipient_AESKW .within COSE_recipient ]
]

COSE_recipient_AESKW = [
  protected   : bstr .size 0 / bstr .cbor empty_map,
  unprotected : recipient_header_unpr_map_aeskw,
  ciphertext  : bstr        ; CEK encrypted with KEK
]
empty_map = {}

recipient_header_unpr_map_aeskw =
{
    1 => int,         ; algorithm identifier
  ? 4 => bstr,        ; identifier of the recipient public key
  * label => values   ; extension point
}

SUIT_Encryption_Info_ESDH = [
  protected   : bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : bstr / nil,
  recipients  : [ + COSE_recipient_ESDH .within COSE_recipient ]
]

COSE_recipient_ESDH = [
  protected   : bstr .cbor recipient_header_map_esdh,
  unprotected : recipient_header_unpr_map_esdh,
  ciphertext  : bstr        ; CEK encrypted with KEK
]

recipient_header_map_esdh =
{
    1 => int,         ; algorithm identifier
  * label => values   ; extension point
}

recipient_header_unpr_map_esdh =
{
   -1 => COSE_Key,    ; ephemeral public key for the sender
  ? 4 => bstr,        ; identifier of the recipient public key
  * label => values   ; extension point
}

; common definitions
outer_header_map_protected =
{
    1 => int,         ; algorithm identifier
  * label => values   ; extension point
}

outer_header_map_unprotected =
{
    5 => bstr,        ; IV
  * label => values   ; extension point
}


; Extends SUIT Manifest

$$SUIT_Parameters //= (suit-parameter-encryption-info =>
    bstr .cbor SUIT_Encryption_Info)

suit-parameter-encryption-info = 19
]]></sourcecode></figure>

</section>
<section numbered="no" anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank Henk Birkholz for his feedback on the CDDL description in this document.
Additionally, we would like to thank Michael Richardson, Ãyvind RÃ¸nningstad, Dave Thaler, Laurence
Lundblade, Christian AmsÃ¼ss, Ruud Derwig, and Carsten Bormann for their review feedback. Finally,
we would like to thank Dick Brooks for making us aware of the challenges encryption imposes on
binary analysis.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+2923bbVpYo+s4x9A8Yzh7HUoWkcCehanc3CICxyteynKTS
dTI8QBKSUCYJBiCtKI77O86nnIf91j+252WthQXwItlxqpPeUY2KSWJhXed9
zjVnr9c76qzz9Tw7M5LltLxdrbOZ8TK9nRfprDLypXHx9flr41m6zC+zal0d
ddLJpMze3bf1rJgu0wV0PivTy3Uvz9aXvWqTr3uXebm4Scusl3E/ebHsWcFR
Z5qus6uivD0zqvXsqHPUyVflmbEuN9XaNs3AtGEGZZaeGRfZdFPm69ujzk1R
vr0qi83qjIY/6rzNbuG32Zlxvlxn5TJb92IcHXur1uly9iadF0uY020GM1zl
Z0cdwygvp9msWt/O5e+GsS6m+ud8OcuWa/VLVZTrMrus6h9uF83v6zKf1u2n
xWIB79fP8+U8X2qjZT+ue/O8Wvego0kxh4a94k9f4iPYxEW6WuXLK30+b+bZ
uwybubiwdLO+LkpcSg+f01++hKeP+8branpdXGbL/Eo94kN5nC6XWbXrebZI
8/mZcU0N+mvV4N+vFj/2YUdxyPZIr/rG42JTzbPb1jCvNlW19agorwBMfkrx
5M+Mb/KrfK7OtGs8fRqplhLimm22psr9//s7bFVl0z5seHOWNMlR33hWlOlS
/sgzHJXZcpYum4+aMwzLhfE0X+QA8bKBGFm83KeX/z0tF3uGjvvQtLhpDR2n
7/JZ80Fz4Kf5Mi2L1pgzfKs/wbf+fU4N+vDWjkGfwPGnb9PbdJE2x32SLbee
NAe+SKIXz4zoRR+O43Xcb83gbbbsr8X7fcRrAA14INe+LMoF9PMuI+x6NY5s
ywrkZ8cJXPk5MD1b++zIz0NrwG3Oe3G/phsLQVvUK64X7GhGBKM3K2BKsAtE
R5aX7SkFZj2lwLLVlIaBM5CfPb+enmcPTfV56PO7ebpMacwz3qAaEeWW1nTI
CKsqv1oCzXy+WUyysjJCaq3AWVDi8/B52CSlxqvsCmhDKdrNgEqeGbZpO+K9
tLzKgNa8HsU0vxcvD8zm2/xtvspmedoY81W23pTL3osyByqFVL0srsp0sQCq
o49p+n3T6W+PfL1er6qz01OAihvZP4LkKX47FZ0XovM3q2bnFy+Hptnz/AOT
fn5+8bo1X6aoM4JWAw4XGFFe9r7NqwyA+9ZIgNZPgKBeI9k1LqbX2QJo3dcV
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
7C2gL9m+Rq51Svt9Q6vbo9E0H+7UalpNDmk23HSPdqMe7lEc8O+g8kCLap3g
NTSYqTkxz2wh2T4Gslesly/dJdxvd34fLiLf+gheIl+5N0epZ9biK44fgJI9
HIKO4A/NgWWPB+gMscYoDQySQwEp6g/09tgd0TUTK4xBF7FM3xyCohFafqxu
hmpHtlMiPcBpnOZR6Iau72vw3rZ13UOVxL97KL/f691KCztynR1svmZVvJBF
yizNafju2ox2r7LKjz9OD+V37gOu9/AyqlXd4WlEbXpyqwS3LVXofvsi2l5n
07eilpnk8aJEU31jRoaknTY2VUoX8uOHE/jnszg8XRNk5CAhd98waHkpvSGo
4JY5xO9NFxl6Du+wPe83MHfYwsw+srtMyW17cadtMEZH6l12Xmna7eyz7d5l
zkULbueQCXeX31i3oXZ2GVHvspRKv3Gn7Ti+y+So2xk7uwyNd1kXpUmxs8+m
aDpeYFoDE5ROLSzXGWAQasjOWKszpPBTdCJjohs/IXcyhuAGdkxJuxI/8H14
CiII7JKDSvDAZedz57D3WTqfTYzsHbSH6FAM8N4RLMzqCGABy9jhs+7c1+a0
y8zU2W9nuttn3TmUR+wun3XnLqPCIatBZ5/T+j4+684+p/V9fNadXao5R1+H
DoV6K3za1gA6TRXgLhkfY7nHQAcAFhzf7dwHLClKewD/H5ljfo3f6hx+zYNx
9geUdO7SZQ4tpIMr2RdRcqdEf5cMf0ho76DUfpeYjkc2APqukwWg33bnPjEl
CqthA+0xrEegZ6cJCHcJeE3hrbMtvSEgWAnRjjsIVGcnhRq4Dk7DHAOUDkTk
iw3dOnqsRZ3MOZ1jCscKZGZRYFDVjJayLl6araZlPuE0UFSScVZMN1TaWVVe
FKnvQKpc3x51RK1gzhTaTgXKCUNJc8CIjLfZrWbQJuPn8ZPkyUkd6a6MupQm
qlFHVaZOV5eSqylaUU+6BsYd9EQZ0FVRVVlVaQWEm070OwaheBMu6Twq4DsX
vZWlc6tigWWzL8tiuSbVa7OURaKpwnYq6uJhrL9MVpqJDEowPiYDFJLXOwxH
mbX6wB3NKTkXp6qsuwT56VaveozSYCruGKNsBUIfnRHq58W0mGOASeswuWox
MH2saUzlfalHcTUZDi0t5znVveUbDnOQ16a303lWS4c4WpfT6ovAndmmFGnK
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

-->

</rfc>

